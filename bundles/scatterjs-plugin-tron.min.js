/*!
 * 
 * ScatterJS - plugin-tron v1.3.33
 * https://github.com/GetScatter/scatter-js/
 * Released under the MIT license.
 * 				
 */!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=268)}({11:function(t,n){function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(n){return"function"==typeof Symbol&&"symbol"===e(Symbol.iterator)?t.exports=r=function(t){return e(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":e(t)},r(n)}t.exports=r},19:function(t,n){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},2:function(t,n){t.exports=ScatterJS},20:function(t,n){function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t},e(n,r)}t.exports=e},268:function(t,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return v}));var r=e(3),o=e.n(r),u=e(4),i=e.n(u),c=e(6),f=e.n(c),a=e(7),l=e.n(a),s=e(8),p=e.n(s),y=e(2),b=y.SocketService,d=function(t,n){return new Proxy(t,n)},v=function(t){function n(){return o()(this,n),f()(this,l()(n).call(this,y.Blockchains.TRX,y.PluginTypes.BLOCKCHAIN_SUPPORT))}return p()(n,t),i()(n,[{key:"setSocketService",value:function(t){b=t}},{key:"hookProvider",value:function(){throw new Error("Tron hook provider not enabled yet.")}},{key:"signatureProvider",value:function(){var t=0>=arguments.length?void 0:arguments[0],n=1>=arguments.length?void 0:arguments[1];return function(e,r){e=y.Network.fromJson(e);var o=function(){var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return function(o){return t(),new Promise((function(t,u){var i={transaction:{transaction:o,participants:[r.defaultAddress.base58]},blockchain:y.Blockchains.TRX,network:e,requiredFields:{},abi:n};b.sendApiRequest({type:"requestSignature",payload:i}).then((function(n){return t(n.signatures[0])})).catch((function(t){return u(t)}))}))}},u=function(){var t=n(),e=t&&t.accounts.find((function(t){return t.blockchain===y.Blockchains.TRX}))?t.accounts.find((function(t){return t.blockchain===y.Blockchains.TRX})).address:null;e&&r.setAddress(e)};return d(r,{get:function(t,n){return u(),r.trx.sign=o(),"function"==typeof t[n]?function(){for(var e=arguments.length,r=Array(e),i=0;i<e;i++)r[i]=arguments[i];return"contract"===n?d(t[n].apply(t,r),{get:function(n,e){return u(),t.trx.sign=o({abi:r[0],address:r[1],method:e}),n[e]}}):t[n].apply(t,r)}:t[n]}})}}}]),n}(y.Plugin);"undefined"!=typeof window&&(window.ScatterTron=v)},3:function(t,n){t.exports=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}},4:function(t,n){function e(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},6:function(t,n,e){var r=e(11),o=e(19);t.exports=function(t,n){return!n||"object"!==r(n)&&"function"!=typeof n?o(t):n}},7:function(t,n){function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},8:function(t,n,e){var r=e(20);t.exports=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&r(t,n)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJTY2F0dGVySlNcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9wbHVnaW4tdHJvbi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl90eXBlb2YyIiwib2JqIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIl90eXBlb2YiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJTY2F0dGVySlMiLCJfc2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInNvY2tldFNlcnZpY2UiLCJTb2NrZXRTZXJ2aWNlIiwicHJveHkiLCJkdW1teSIsImhhbmRsZXIiLCJQcm94eSIsIlNjYXR0ZXJUcm9uIiwiQmxvY2tjaGFpbnMiLCJUUlgiLCJQbHVnaW5UeXBlcyIsIkJMT0NLQ0hBSU5fU1VQUE9SVCIsIl9zIiwiRXJyb3IiLCJ0aHJvd0lmTm9JZGVudGl0eSIsImlkZW50aXR5RmV0Y2hlciIsIm5ldHdvcmsiLCJfdHJvbiIsIk5ldHdvcmsiLCJmcm9tSnNvbiIsImdldFNpZ25lciIsImFiaSIsInNpZ25hcmdzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwYXlsb2FkIiwidHJhbnNhY3Rpb24iLCJwYXJ0aWNpcGFudHMiLCJkZWZhdWx0QWRkcmVzcyIsImJhc2U1OCIsImJsb2NrY2hhaW4iLCJyZXF1aXJlZEZpZWxkcyIsInNlbmRBcGlSZXF1ZXN0IiwidHlwZSIsInRoZW4iLCJ4Iiwic2lnbmF0dXJlcyIsInNldEFkZHJlc3MiLCJpZCIsImFkZHJlc3MiLCJhY2NvdW50cyIsImZpbmQiLCJpbnN0YW5jZSIsIm1ldGhvZCIsInRyeCIsInNpZ24iLCJhcmdzIiwiYSIsImIiLCJQbHVnaW4iLCJ3aW5kb3ciLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfZ2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2dCQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFB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QmdHLEVBQWFTLEVBQVlDLEdBRzdDLE9BRklELEdBQVlQLEVBQWtCRixFQUFZbEUsVUFBVzJFLEdBQ3JEQyxHQUFhUixFQUFrQkYsRUFBYVUsR0FDekNWLEksa0JDYlQsSUFBSTFELEVBQVUsRUFBUSxJQUVsQnFFLEVBQXdCLEVBQVEsSUFVcEMxRyxFQUFPRCxRQVJQLFNBQW9DdUMsRUFBTWxDLEdBQ3hDLE9BQUlBLEdBQTJCLFdBQWxCaUMsRUFBUWpDLElBQXNDLG1CQUFUQSxFQUkzQ3NHLEVBQXNCcEUsR0FIcEJsQyxJLGdCQ05YLFNBQVN1RyxFQUFnQmpHLEdBSXZCLE9BSEFWLEVBQU9ELFFBQVU0RyxFQUFrQmhHLE9BQU8rQixlQUFpQi9CLE9BQU9pRyxlQUFpQixTQUF5QmxHLEdBQzFHLE9BQU9BLEVBQUVpQyxXQUFhaEMsT0FBT2lHLGVBQWVsRyxJQUV2Q2lHLEVBQWdCakcsR0FHekJWLEVBQU9ELFFBQVU0RyxHLGtCQ1BqQixJQUFJakUsRUFBaUIsRUFBUSxJQWlCN0IxQyxFQUFPRCxRQWZQLFNBQW1COEcsRUFBVUMsR0FDM0IsR0FBMEIsbUJBQWZBLEdBQTRDLE9BQWZBLEVBQ3RDLE1BQU0sSUFBSWQsVUFBVSxzREFHdEJhLEVBQVNoRixVQUFZbEIsT0FBT1ksT0FBT3VGLEdBQWNBLEVBQVdqRixVQUFXLENBQ3JFTyxZQUFhLENBQ1hsQixNQUFPMkYsRUFDUE4sVUFBVSxFQUNWRCxjQUFjLEtBR2RRLEdBQVlwRSxFQUFlbUUsRUFBVUMiLCJmaWxlIjoic2NhdHRlcmpzLXBsdWdpbi10cm9uLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyNjgpO1xuIiwiZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YyKG9iaik7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsIm1vZHVsZS5leHBvcnRzID0gU2NhdHRlckpTOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsImltcG9ydCB7XHJcblx0UGx1Z2luLFxyXG5cdFBsdWdpblR5cGVzLFxyXG5cdEJsb2NrY2hhaW5zLFxyXG5cdE5ldHdvcmssXHJcblx0U29ja2V0U2VydmljZVxyXG59IGZyb20gJ0BzY2F0dGVyanMvY29yZSc7XHJcbmxldCBzb2NrZXRTZXJ2aWNlID0gU29ja2V0U2VydmljZTtcclxuY29uc3QgcHJveHkgPSAoZHVtbXksIGhhbmRsZXIpID0+IG5ldyBQcm94eShkdW1teSwgaGFuZGxlcik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2F0dGVyVHJvbiBleHRlbmRzIFBsdWdpbiB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBzdXBlcihCbG9ja2NoYWlucy5UUlgsIFBsdWdpblR5cGVzLkJMT0NLQ0hBSU5fU1VQUE9SVClcclxuICAgIH1cclxuXHJcblx0c2V0U29ja2V0U2VydmljZShfcyl7XHJcblx0XHRzb2NrZXRTZXJ2aWNlID0gX3M7XHJcblx0fVxyXG5cclxuICAgIGhvb2tQcm92aWRlcihuZXR3b3JrKXtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Ryb24gaG9vayBwcm92aWRlciBub3QgZW5hYmxlZCB5ZXQuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2lnbmF0dXJlUHJvdmlkZXIoLi4uYXJncyl7XHJcbiAgICAgICAgY29uc3QgdGhyb3dJZk5vSWRlbnRpdHkgPSBhcmdzWzBdO1xyXG4gICAgICAgIGNvbnN0IGlkZW50aXR5RmV0Y2hlciA9IGFyZ3NbMV07XHJcblxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIChuZXR3b3JrLCBfdHJvbikgPT4ge1xyXG5cclxuICAgICAgICAgICAgbmV0d29yayA9IE5ldHdvcmsuZnJvbUpzb24obmV0d29yayk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBnZXRTaWduZXIgPSAoYWJpID0gbnVsbCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzaWduYXJncyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dJZk5vSWRlbnRpdHkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjpzaWduYXJncyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50czpbX3Ryb24uZGVmYXVsdEFkZHJlc3MuYmFzZTU4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHsgdHJhbnNhY3Rpb24sIGJsb2NrY2hhaW46QmxvY2tjaGFpbnMuVFJYLCBuZXR3b3JrLCByZXF1aXJlZEZpZWxkczp7fSwgYWJpIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBzb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6J3JlcXVlc3RTaWduYXR1cmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKHggPT4gcmVzb2x2ZSh4LnNpZ25hdHVyZXNbMF0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCh4ID0+IHJlamVjdCh4KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNldEFkZHJlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGlkZW50aXR5RmV0Y2hlcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IGlkICYmIGlkLmFjY291bnRzLmZpbmQoeCA9PiB4LmJsb2NrY2hhaW4gPT09IEJsb2NrY2hhaW5zLlRSWClcclxuICAgICAgICAgICAgICAgICAgICA/IGlkLmFjY291bnRzLmZpbmQoeCA9PiB4LmJsb2NrY2hhaW4gPT09IEJsb2NrY2hhaW5zLlRSWCkuYWRkcmVzc1xyXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihhZGRyZXNzKSBfdHJvbi5zZXRBZGRyZXNzKGFkZHJlc3MpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHByb3h5KF90cm9uLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQoaW5zdGFuY2UsIG1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEFkZHJlc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICBfdHJvbi50cnguc2lnbiA9IGdldFNpZ25lcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgaW5zdGFuY2VbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1ldGhvZCA9PT0gJ2NvbnRyYWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3h5KGluc3RhbmNlW21ldGhvZF0oLi4uYXJncyksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQoYSxiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QWRkcmVzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS50cnguc2lnbiA9IGdldFNpZ25lcih7YWJpOiBhcmdzWzBdLCBhZGRyZXNzOiBhcmdzWzFdLCBtZXRob2Q6Yn0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVtiXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlW21ldGhvZF0oLi4uYXJncylcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBpbnN0YW5jZVttZXRob2RdO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5pZih0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgd2luZG93LlNjYXR0ZXJUcm9uID0gU2NhdHRlclRyb247XHJcbn0iLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiXSwic291cmNlUm9vdCI6IiJ9