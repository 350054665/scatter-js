!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=265)}({1:function(t,n){t.exports=ScatterJS},14:function(t,n){function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(n){return"function"==typeof Symbol&&"symbol"===e(Symbol.iterator)?t.exports=r=function(t){return e(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":e(t)},r(n)}t.exports=r},23:function(t,n){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},24:function(t,n){function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t},e(n,r)}t.exports=e},265:function(t,n,e){"use strict";e.r(n),e.d(n,"default",function(){return v});var r=e(4),o=e.n(r),u=e(5),i=e.n(u),c=e(6),f=e.n(c),a=e(8),l=e.n(a),s=e(9),p=e.n(s),y=e(1),b=y.SocketService,d=function(t,n){return new Proxy(t,n)},v=function(t){function n(){return o()(this,n),f()(this,l()(n).call(this,y.Blockchains.TRX,y.PluginTypes.BLOCKCHAIN_SUPPORT))}return p()(n,t),i()(n,[{key:"setSocketService",value:function(t){b=t}},{key:"hookProvider",value:function(){throw new Error("Tron hook provider not enabled yet.")}},{key:"signatureProvider",value:function(){var t=0>=arguments.length?void 0:arguments[0],n=1>=arguments.length?void 0:arguments[1];return function(e,r){e=y.Network.fromJson(e);var o=function(){var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return function(o){return t(),new Promise(function(t,u){var i={transaction:{transaction:o,participants:[r.defaultAddress.base58]},blockchain:y.Blockchains.TRX,network:e,requiredFields:{},abi:n};b.sendApiRequest({type:"requestSignature",payload:i}).then(function(n){return t(n.signatures[0])}).catch(function(t){return u(t)})})}},u=function(){var t=n(),e=t&&t.accounts.find(function(t){return t.blockchain===y.Blockchains.TRX})?t.accounts.find(function(t){return t.blockchain===y.Blockchains.TRX}).address:null;e&&r.setAddress(e)};return d(r,{get:function(t,n){return u(),r.trx.sign=o(),"function"==typeof t[n]?function(){for(var e=arguments.length,r=Array(e),i=0;i<e;i++)r[i]=arguments[i];return"contract"===n?d(t[n].apply(t,r),{get:function(n,e){return u(),t.trx.sign=o({abi:r[0],address:r[1],method:e}),n[e]}}):t[n].apply(t,r)}:t[n]}})}}}]),n}(y.Plugin);"undefined"!=typeof window&&(window.ScatterTron=v)},4:function(t,n){t.exports=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}},5:function(t,n){function e(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},6:function(t,n,e){var r=e(14),o=e(23);t.exports=function(t,n){return!n||"object"!==r(n)&&"function"!=typeof n?o(t):n}},8:function(t,n){function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},9:function(t,n,e){var r=e(24);t.exports=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&r(t,n)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiU2NhdHRlckpTXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9wbHVnaW4tdHJvbi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlNjYXR0ZXJKUyIsIl90eXBlb2YyIiwib2JqIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIl90eXBlb2YiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfc2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInNvY2tldFNlcnZpY2UiLCJTb2NrZXRTZXJ2aWNlIiwicHJveHkiLCJkdW1teSIsImhhbmRsZXIiLCJQcm94eSIsIlNjYXR0ZXJUcm9uIiwiYiIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwidGhpcyIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2dldFByb3RvdHlwZU9mX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCIsIkJsb2NrY2hhaW5zIiwiVFJYIiwiUGx1Z2luVHlwZXMiLCJCTE9DS0NIQUlOX1NVUFBPUlQiLCJfcyIsIkVycm9yIiwidGhyb3dJZk5vSWRlbnRpdHkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJpZGVudGl0eUZldGNoZXIiLCJuZXR3b3JrIiwiX3Ryb24iLCJOZXR3b3JrIiwiZnJvbUpzb24iLCJnZXRTaWduZXIiLCJhYmkiLCJzaWduYXJncyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicGF5bG9hZCIsInRyYW5zYWN0aW9uIiwicGFydGljaXBhbnRzIiwiZGVmYXVsdEFkZHJlc3MiLCJiYXNlNTgiLCJibG9ja2NoYWluIiwicmVxdWlyZWRGaWVsZHMiLCJzZW5kQXBpUmVxdWVzdCIsInR5cGUiLCJ0aGVuIiwieCIsInNpZ25hdHVyZXMiLCJzZXRBZGRyZXNzIiwiaWQiLCJhZGRyZXNzIiwiYWNjb3VudHMiLCJmaW5kIiwiaW5zdGFuY2UiLCJtZXRob2QiLCJ0cngiLCJzaWduIiwiYSIsImFyZ3MiLCJBcnJheSIsImgiLCJhcHBseSIsIlBsdWdpbiIsIndpbmRvdyIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsIl9nZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1C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bGUiOiJzY2F0dGVyanMtcGx1Z2luLXRyb24ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDI2NSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFNjYXR0ZXJKUzsiLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7IiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2Y7IiwiaW1wb3J0IHtcclxuXHRQbHVnaW4sXHJcblx0UGx1Z2luVHlwZXMsXHJcblx0QmxvY2tjaGFpbnMsXHJcblx0TmV0d29yayxcclxuXHRTb2NrZXRTZXJ2aWNlXHJcbn0gZnJvbSAnQHNjYXR0ZXJqcy9jb3JlJztcclxubGV0IHNvY2tldFNlcnZpY2UgPSBTb2NrZXRTZXJ2aWNlO1xyXG5jb25zdCBwcm94eSA9IChkdW1teSwgaGFuZGxlcikgPT4gbmV3IFByb3h5KGR1bW15LCBoYW5kbGVyKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjYXR0ZXJUcm9uIGV4dGVuZHMgUGx1Z2luIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHN1cGVyKEJsb2NrY2hhaW5zLlRSWCwgUGx1Z2luVHlwZXMuQkxPQ0tDSEFJTl9TVVBQT1JUKVxyXG4gICAgfVxyXG5cclxuXHRzZXRTb2NrZXRTZXJ2aWNlKF9zKXtcclxuXHRcdHNvY2tldFNlcnZpY2UgPSBfcztcclxuXHR9XHJcblxyXG4gICAgaG9va1Byb3ZpZGVyKG5ldHdvcmspe1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVHJvbiBob29rIHByb3ZpZGVyIG5vdCBlbmFibGVkIHlldC4nKTtcclxuICAgIH1cclxuXHJcbiAgICBzaWduYXR1cmVQcm92aWRlciguLi5hcmdzKXtcclxuICAgICAgICBjb25zdCB0aHJvd0lmTm9JZGVudGl0eSA9IGFyZ3NbMF07XHJcbiAgICAgICAgY29uc3QgaWRlbnRpdHlGZXRjaGVyID0gYXJnc1sxXTtcclxuXHJcblxyXG5cclxuICAgICAgICByZXR1cm4gKG5ldHdvcmssIF90cm9uKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBuZXR3b3JrID0gTmV0d29yay5mcm9tSnNvbihuZXR3b3JrKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGdldFNpZ25lciA9IChhYmkgPSBudWxsKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZ25hcmdzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvd0lmTm9JZGVudGl0eSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOnNpZ25hcmdzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydGljaXBhbnRzOltfdHJvbi5kZWZhdWx0QWRkcmVzcy5iYXNlNThdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0geyB0cmFuc2FjdGlvbiwgYmxvY2tjaGFpbjpCbG9ja2NoYWlucy5UUlgsIG5ldHdvcmssIHJlcXVpcmVkRmllbGRzOnt9LCBhYmkgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZToncmVxdWVzdFNpZ25hdHVyZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oeCA9PiByZXNvbHZlKHguc2lnbmF0dXJlc1swXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKHggPT4gcmVqZWN0KHgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2V0QWRkcmVzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gaWRlbnRpdHlGZXRjaGVyKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gaWQgJiYgaWQuYWNjb3VudHMuZmluZCh4ID0+IHguYmxvY2tjaGFpbiA9PT0gQmxvY2tjaGFpbnMuVFJYKVxyXG4gICAgICAgICAgICAgICAgICAgID8gaWQuYWNjb3VudHMuZmluZCh4ID0+IHguYmxvY2tjaGFpbiA9PT0gQmxvY2tjaGFpbnMuVFJYKS5hZGRyZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGFkZHJlc3MpIF90cm9uLnNldEFkZHJlc3MoYWRkcmVzcyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcHJveHkoX3Ryb24sIHtcclxuICAgICAgICAgICAgICAgIGdldChpbnN0YW5jZSwgbWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0QWRkcmVzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90cm9uLnRyeC5zaWduID0gZ2V0U2lnbmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBpbnN0YW5jZVttZXRob2RdID09PSAnZnVuY3Rpb24nKSByZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYobWV0aG9kID09PSAnY29udHJhY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJveHkoaW5zdGFuY2VbbWV0aG9kXSguLi5hcmdzKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldChhLGIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRBZGRyZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnRyeC5zaWduID0gZ2V0U2lnbmVyKHthYmk6IGFyZ3NbMF0sIGFkZHJlc3M6IGFyZ3NbMV0sIG1ldGhvZDpifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhW2JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VbbWV0aG9kXSguLi5hcmdzKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIGluc3RhbmNlW21ldGhvZF07XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmlmKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB3aW5kb3cuU2NhdHRlclRyb24gPSBTY2F0dGVyVHJvbjtcclxufSIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47IiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mOyIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzOyJdLCJzb3VyY2VSb290IjoiIn0=