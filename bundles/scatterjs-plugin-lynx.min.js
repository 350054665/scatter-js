/*!
 * 
 * ScatterJS - plugin-lynx v1.6.47
 * https://github.com/GetScatter/scatter-js/
 * Released under the MIT license.
 * 				
 */!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=269)}({0:function(t,n,e){t.exports=e(23)},1:function(t,n){function e(t,n,e,r,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,o)}t.exports=function(t){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=t.apply(n,r);function u(t){e(a,o,i,u,c,"next",t)}function c(t){e(a,o,i,u,c,"throw",t)}u(void 0)}))}}},11:function(t,n){function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(n){return"function"==typeof Symbol&&"symbol"===e(Symbol.iterator)?t.exports=r=function(t){return e(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":e(t)},r(n)}t.exports=r},19:function(t,n){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},2:function(t,n){t.exports=ScatterJS},20:function(t,n){function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t},e(n,r)}t.exports=e},23:function(t,n,e){var r=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function c(t,n,e,r){var o=n&&n.prototype instanceof d?n:d,i=Object.create(o.prototype),a=new _(r||[]);return i._invoke=function(t,n,e){var r=f;return function(o,i){if(r===l)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return T()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var u=S(a,e);if(u){if(u===y)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===f)throw r=h,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=l;var c=s(t,n,e);if("normal"===c.type){if(r=e.done?h:p,c.arg===y)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=h,e.method="throw",e.arg=c.arg)}}}(t,e,a),i}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f="suspendedStart",p="suspendedYield",l="executing",h="completed",y={};function d(){}function v(){}function m(){}var w={};w[i]=function(){return this};var b=Object.getPrototypeOf,g=b&&b(b(j([])));g&&g!==e&&r.call(g,i)&&(w=g);var x=m.prototype=d.prototype=Object.create(w);function E(t){["next","throw","return"].forEach((function(n){t[n]=function(t){return this._invoke(n,t)}}))}function L(t){var n;this._invoke=function(e,o){function i(){return new Promise((function(n,i){!function n(e,o,i,a){var u=s(t[e],t,o);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==typeof f&&r.call(f,"__await")?Promise.resolve(f.__await).then((function(t){n("next",t,i,a)}),(function(t){n("throw",t,i,a)})):Promise.resolve(f).then((function(t){c.value=t,i(c)}),(function(t){return n("throw",t,i,a)}))}a(u.arg)}(e,o,n,i)}))}return n=n?n.then(i,i):i()}}function S(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,S(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var o=s(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,y;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,y):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function O(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function k(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function _(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function e(){for(;++o<t.length;)if(r.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:T}}function T(){return{value:n,done:!0}}return v.prototype=x.constructor=m,m.constructor=v,m[u]=v.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===v||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},E(L.prototype),L.prototype[a]=function(){return this},t.AsyncIterator=L,t.async=function(n,e,r,o){var i=new L(c(n,e,r,o));return t.isGeneratorFunction(e)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},E(x),x[u]="Generator",x[i]=function(){return this},x.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(k),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(r,o){return u.type="throw",u.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),s=r.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),y},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),k(e),y}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;k(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),y}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},269:function(t,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return S}));var r=e(5),o=e.n(r),i=e(3),a=e.n(i),u=e(4),c=e.n(u),s=e(6),f=e.n(s),p=e(7),l=e.n(p),h=e(8),y=e.n(h),d=e(0),v=e.n(d),m=e(1),w=e.n(m),b=e(2),g=!1;"undefined"!=typeof window&&(void 0===window.lynxMobile?window.addEventListener("lynxMobileLoaded",(function(){return g=!0})):g=!0);var x=function(){var t=w()(v.a.mark((function t(){var n,e,r=arguments;return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=0<r.length&&void 0!==r[0]?r[0]:null,e=1<r.length&&void 0!==r[1]?r[1]:0,t.abrupt("return",new Promise((function(t){return n||(n=t),g?n(!0):5<e?n(!1):void setTimeout((function(){return x(n,e+1)}),100)})));case 3:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),E=function(t){for(var n="",e=new DataView(t),r=0;r<e.byteLength;r+=4)"00000000",n+=("00000000"+e.getUint32(r).toString(16)).slice(-8);return n},L=function(){var t=w()(v.a.mark((function t(n){var e;return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=new TextEncoder("utf-8").encode(n),t.t0=E,t.next=4,crypto.subtle.digest("SHA-256",e);case 4:return t.t1=t.sent,t.abrupt("return",(0,t.t0)(t.t1));case 6:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),S=function(t){function n(t){var e;if(a()(this,n),e=f()(this,l()(n).call(this,b.Blockchains.EOS,b.PluginTypes.WALLET_SUPPORT)),!t)return console.error("Lynx Plugin: You must pass in an eosjs version. Either ({Api, JsonRpc}) for eosjs2 or (Eos) for eosjs1"),f()(e);if(e.name="Lynx",e.isEosjs2=!1,t.hasOwnProperty("JsonRpc"))e.eosjs=t,e.isEosjs2=!0;else{if("function"!=typeof t)throw new Error("Lynx Plugin: Invalid eosjs. Please use 16.0.9 or 20+");e.eosjs=t}return e}return y()(n,t),c()(n,[{key:"init",value:function(t,n,e){this.context=t,this.holderFns=n,this.socketSetters=e}},{key:"connect",value:function(){var t=w()(v.a.mark((function t(n){var e=this;return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.plugin=n,t.abrupt("return",new Promise(function(){var t=w()(v.a.mark((function t(n){return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,x();case 2:t.sent&&(!e.holderFns.get().wallet&&(e.holderFns.get().wallet=e.name),n(!0));case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}()));case 2:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}()},{key:"runAfterInterfacing",value:function(){var t=w()(v.a.mark((function t(){var n,e=this;return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.methods()[b.WALLET_METHODS.getIdentity](),n={sendApiRequest:function(t){return e.methods()[t.type](t.payload)}},this.socketSetters.map((function(t){return t(n)})),t.abrupt("return",!0);case 4:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){var t,n=this;return t={},o()(t,b.WALLET_METHODS.isConnected,w()(v.a.mark((function t(){return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",!0);case 1:case"end":return t.stop()}}),t)})))),o()(t,b.WALLET_METHODS.disconnect,w()(v.a.mark((function t(){return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",!0);case 1:case"end":return t.stop()}}),t)})))),o()(t,b.WALLET_METHODS.isPaired,w()(v.a.mark((function t(){return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",!0);case 1:case"end":return t.stop()}}),t)})))),o()(t,b.WALLET_METHODS.getIdentity,function(){var t=w()(v.a.mark((function t(e){var r,o,i,a,u,c,s;return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e||(e={}),o=e.hasOwnProperty("accounts")&&e.accounts.length?e.accounts[0].chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",t.next=4,window.lynxMobile.requestSetAccount();case 4:if(i=t.sent){t.next=7;break}return t.abrupt("return",null);case 7:if(a=i.account.permissions.find((function(t){return"active"===t.perm_name})),u=a.required_auth.keys[0].key,(c=i.chainId||o)===o){t.next=12;break}throw new Error('User does not have an account with the chainId "'.concat(o,'" selected in Lynx.'));case 12:return s=[{name:i.account.account_name,authority:a.perm_name,publicKey:u,blockchain:b.Blockchains.EOS,isHardware:!1,chainId:c}],r={name:s[0].name,accounts:s,publicKey:u},n.context.identity=r,t.abrupt("return",r);case 16:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}()),o()(t,b.WALLET_METHODS.forgetIdentity,w()(v.a.mark((function t(){return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n.context.identity=null,t.abrupt("return",!0);case 2:case"end":return t.stop()}}),t)})))),o()(t,"identityFromPermissions",function(){var t=w()(v.a.mark((function t(){return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",n.context.identity);case 1:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}()),o()(t,b.WALLET_METHODS.getIdentityFromPermissions,w()(v.a.mark((function t(){return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",n.context.identity);case 1:case"end":return t.stop()}}),t)})))),o()(t,b.WALLET_METHODS.getArbitrarySignature,(function(t,e){var r=b.SocketService.getOriginOrPlugin(n.plugin);return window.lynxMobile.requestArbitrarySignature({data:e,whatFor:"".concat(r," is requesting an arbitrary signature")})})),o()(t,b.WALLET_METHODS.authenticate,function(){var t=w()(v.a.mark((function t(e){var r,o,i,a=arguments;return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=1<a.length&&void 0!==a[1]?a[1]:null,2<a.length&&void 0!==a[2]?a[2]:null,o=b.SocketService.getOriginOrPlugin(n.plugin),r=r||o,t.t0=L,t.next=7,L(r);case 7:return t.t1=t.sent,t.next=10,L(e);case 10:return t.t2=t.sent,t.t3=t.t1+t.t2,t.next=14,(0,t.t0)(t.t3);case 14:return i=t.sent,t.abrupt("return",window.lynxMobile.requestArbitrarySignature({data:i,whatFor:"".concat(o," wants to authenticate your public key")}));case 16:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}()),o()(t,b.WALLET_METHODS.requestSignature,function(){var t=w()(v.a.mark((function t(e){var r,o,i,a,u,c,s,f,p,l;return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e.abis,r=e.transaction,o=e.network,!n.isEosjs2){t.next=12;break}return a=new n.eosjs.JsonRpc(b.Network.fromJson(o).fullhost()),u={rpc:a},Object.keys(n.eosjs).map((function(t){"JsonRpc"===t||"Api"===t||(u[t]=n.eosjs[t])})),c=new n.eosjs.Api(u),r.abis.map((function(t){var n=t.account_name,e=t.abi;return c.cachedAbis.set(n,{rawAbi:e,abi:c.rawAbiToJson(e)})})),t.next=9,c.deserializeTransactionWithActions(r.serializedTransaction);case 9:i=t.sent,t.next=24;break;case 12:return s=new n.eosjs({httpEndpoint:b.Network.fromJson(o).fullhost(),chainId:o.chainId}),f={},p=r.actions.map((function(t){return t.account})).reduce((function(t,n){return t.includes(n)||t.push(n),t}),[]),t.next=17,Promise.all(p.map(function(){var t=w()(v.a.mark((function t(n){return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,s.contract(n);case 2:f[n]=t.sent.fc;case 3:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}()));case 17:return t.next=19,Promise.all(r.actions.map(function(){var t=w()(v.a.mark((function t(n){var e,r,o,i;return v.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=n.account,r=f[e],o=r.abi.actions.find((function(t){return t.name===n.name})).type,i=r.fromBuffer(o,n.data),r.abi.actions.find((function(t){return t.name===n.name})),s.fc.abiCache.abi(e,r.abi),t.abrupt("return",{data:i,account:n.account,name:n.name,authorization:n.authorization});case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}()));case 19:t.t0=t.sent,i={actions:t.t0},delete(l=Object.assign({},r)).actions,i=Object.assign(i,l);case 24:return t.abrupt("return",window.lynxMobile.requestSignature(i));case 25:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}()),o()(t,b.WALLET_METHODS.requestTransfer,(function(t,n,e){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},o=r.contract,i=r.symbol,a=r.memo;r.decimals;return o||(o="eosio.token"),i||(i="EOS"),window.lynxMobile.transfer({contract:o,symbol:i,toAccount:n,amount:e,memo:a})})),t}}]),n}(b.Plugin);"undefined"!=typeof window&&(window.ScatterLynx=S)},3:function(t,n){t.exports=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}},4:function(t,n){function e(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},5:function(t,n){t.exports=function(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}},6:function(t,n,e){var r=e(11),o=e(19);t.exports=function(t,n){return!n||"object"!==r(n)&&"function"!=typeof n?o(t):n}},7:function(t,n){function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},8:function(t,n,e){var r=e(20);t.exports=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&r(t,n)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,