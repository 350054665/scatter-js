!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=270)}([function(t,e,n){t.exports=n(27)},,function(t,e){function n(t,e,n,r,i,o,s){try{var a=t[o](s),u=a.value}catch(t){return void n(t)}a.done?e(u):Promise.resolve(u).then(r,i)}t.exports=function(t){return function(){var e=this,r=arguments;return new Promise(function(i,o){var s=t.apply(e,r);function a(t){n(s,i,o,a,u,"next",t)}function u(t){n(s,i,o,a,u,"throw",t)}a(void 0)})}}},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(19),i=n(23);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?i(t):e}},function(t,e){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},n(e)}t.exports=n},function(t,e,n){var r=n(24);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},,,function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(39),i=n(40),o=n(29);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):l(t,e);if("Buffer"===e.type&&o(e.data))return l(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(h(e),t=a(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function l(t,e){var n=e.length<0?0:0|d(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return N(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(t).length;default:if(r)return N(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return R(this,e,n);case"utf8":case"utf-8":return x(this,e,n);case"ascii":return O(this,e,n);case"latin1":case"binary":return T(this,e,n);case"base64":return E(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function y(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function w(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:v(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):v(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function v(t,e,n,r,i){var o,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=n;o<a;o++)if(c(t,o)===c(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var f=!0,l=0;l<u;l++)if(c(t,o+l)!==c(e,l)){f=!1;break}if(f)return o}return-1}function m(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function b(t,e,n,r){return K(N(e,t.length-n),t,n,r)}function _(t,e,n,r){return K(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function k(t,e,n,r){return _(t,e,n,r)}function S(t,e,n,r){return K(q(e),t,n,r)}function A(t,e,n,r){return K(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function E(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function x(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,a,u,c=t[i],h=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(h=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(h=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,f=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),i+=f}return function(t){var e=t.length;if(e<=P)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=P));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return h(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?x(this,0,t):g.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(o,s),c=this.slice(r,i),h=t.slice(e,n),f=0;f<a;++f)if(c[f]!==h[f]){o=c[f],s=h[f];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return w(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return w(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return m(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return k(this,t,e,n);case"base64":return S(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var P=4096;function O(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function T(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function R(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=D(t[o]);return i}function I(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function L(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function B(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function C(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function M(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function F(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function j(t,e,n,r,o){return o||F(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function W(t,e,n,r,o){return o||F(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||L(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||L(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||L(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||L(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||L(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||L(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||L(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||L(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||L(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||L(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||L(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||L(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||L(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||L(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||B(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||B(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):C(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):C(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):M(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);B(this,t,e,n,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);B(this,t,e,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):C(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):C(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):M(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return j(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return j(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return W(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return W(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=u.isBuffer(t)?t:N(new u(t,r).toString()),a=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%a]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function D(t){return t<16?"0"+t.toString(16):t.toString(16)}function N(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function q(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(U,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function K(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(6))},function(t,e,n){"use strict";var r=n(28),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=f;var o=n(22);o.inherits=n(16);var s=n(41),a=n(33);o.inherits(f,s);for(var u=i(a.prototype),c=0;c<u.length;c++){var h=u[c];f.prototype[h]||(f.prototype[h]=a.prototype[h])}function f(t){if(!(this instanceof f))return new f(t);s.call(this,t),a.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",l)}function l(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),f.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var s=Number.isNaN||function(t){return t!=t};function a(){a.init.call(this)}t.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function c(t){return void 0===t._maxListeners?a.defaultMaxListeners:t._maxListeners}function h(t,e,n,r){var i,o,s,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),s=o[e]),void 0===s)s=o[e]=n,++t._eventsCount;else if("function"==typeof s?s=o[e]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=c(t))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return t}function f(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=function(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,t))}.bind(r);return i.listener=n,r.wrapFn=i,i}function l(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):p(i,i.length)}function d(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},a.prototype.getMaxListeners=function(){return c(this)},a.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var c=u.length,h=p(u,c);for(n=0;n<c;++n)o(h[n],this,e)}return!0},a.prototype.addListener=function(t,e){return h(this,t,e,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(t,e){return h(this,t,e,!0)},a.prototype.once=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.on(t,f(this,t,e)),this},a.prototype.prependOnceListener=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.prependListener(t,f(this,t,e)),this},a.prototype.removeListener=function(t,e){var n,r,i,o,s;if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);if(void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,s||e)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},a.prototype.listeners=function(t){return l(this,t,!0)},a.prototype.rawListeners=function(t){return l(this,t,!1)},a.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):d.call(t,e)},a.prototype.listenerCount=d,a.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},,function(t,e){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}}},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,c=[],h=!1,f=-1;function l(){h&&u&&(h=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!h){var t=a(l);h=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||h||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},,function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(e){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?t.exports=r=function(t){return n(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":n(t)},r(e)}t.exports=r},,function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(12).Buffer)},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,e){function n(e,r){return t.exports=n=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},n(e,r)}t.exports=n},function(t,e,n){var r=n(12),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function s(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=s),o(i,s),s.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},s.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},,function(t,e,n){var r=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag";function u(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,o=Object.create(i.prototype),s=new P(r||[]);return o._invoke=function(t,e,n){var r=h;return function(i,o){if(r===l)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return T()}for(n.method=i,n.arg=o;;){var s=n.delegate;if(s){var a=A(s,n);if(a){if(a===p)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===h)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=l;var u=c(t,e,n);if("normal"===u.type){if(r=n.done?d:f,u.arg===p)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,s),o}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var h="suspendedStart",f="suspendedYield",l="executing",d="completed",p={};function g(){}function y(){}function w(){}var v={};v[o]=function(){return this};var m=Object.getPrototypeOf,b=m&&m(m(O([])));b&&b!==n&&r.call(b,o)&&(v=b);var _=w.prototype=g.prototype=Object.create(v);function k(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function S(t){var e;this._invoke=function(n,i){function o(){return new Promise(function(e,o){!function e(n,i,o,s){var a=c(t[n],t,i);if("throw"!==a.type){var u=a.arg,h=u.value;return h&&"object"==typeof h&&r.call(h,"__await")?Promise.resolve(h.__await).then(function(t){e("next",t,o,s)},function(t){e("throw",t,o,s)}):Promise.resolve(h).then(function(t){u.value=t,o(u)},function(t){return e("throw",t,o,s)})}s(a.arg)}(n,i,e,o)})}return e=e?e.then(o,o):o()}}function A(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method))return p;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var i=c(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,p;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,p):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function O(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,s=function n(){for(;++i<t.length;)if(r.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return s.next=s}}return{next:T}}function T(){return{value:e,done:!0}}return y.prototype=_.constructor=w,w.constructor=y,w[a]=y.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(_),t},t.awrap=function(t){return{__await:t}},k(S.prototype),S.prototype[s]=function(){return this},t.AsyncIterator=S,t.async=function(e,n,r,i){var o=new S(u(e,n,r,i));return t.isGeneratorFunction(n)?o:o.next().then(function(t){return t.done?t.value:o.next()})},k(_),_[a]="Generator",_[o]=function(){return this},_.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=O,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(x),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function i(r,i){return a.type="throw",a.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o],a=s.completion;if("root"===s.tryLoc)return i("end");if(s.tryLoc<=this.prev){var u=r.call(s,"catchLoc"),c=r.call(s,"finallyLoc");if(u&&c){if(this.prev<s.catchLoc)return i(s.catchLoc,!0);if(this.prev<s.finallyLoc)return i(s.finallyLoc)}else if(u){if(this.prev<s.catchLoc)return i(s.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return i(s.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,p):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),p},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),x(n),p}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;x(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:O(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),p}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){"use strict";(function(e){void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,s,a=arguments.length;switch(a){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,n)});case 3:return e.nextTick(function(){t.call(null,n,r)});case 4:return e.nextTick(function(){t.call(null,n,r,i)});default:for(o=new Array(a-1),s=0;s<o.length;)o[s++]=arguments[s];return e.nextTick(function(){t.apply(null,o)})}}}:t.exports=e}).call(this,n(17))},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=i;var r=n(14).EventEmitter;function i(){r.call(this)}n(16)(i,r),i.Readable=n(31),i.Writable=n(61),i.Duplex=n(62),i.Transform=n(63),i.PassThrough=n(64),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",a),n.on("close",u));var s=!1;function a(){s||(s=!0,t.end())}function u(){s||(s=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(h(),0===r.listenerCount(this,"error"))throw t}function h(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",a),n.removeListener("close",u),n.removeListener("error",c),t.removeListener("error",c),n.removeListener("end",h),n.removeListener("close",h),t.removeListener("close",h)}return n.on("error",c),t.on("error",c),n.on("end",h),n.on("close",h),t.on("close",h),t.emit("pipe",n),t}},function(t,e,n){(e=t.exports=n(41)).Stream=e,e.Readable=e,e.Writable=n(33),e.Duplex=n(13),e.Transform=n(44),e.PassThrough=n(60)},function(t,e,n){var r=n(12),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function s(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=s),o(i,s),s.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},s.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,n){"use strict";(function(e,r,i){var o=n(28);function s(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=v;var a,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;v.WritableState=w;var c=n(22);c.inherits=n(16);var h={deprecate:n(58)},f=n(42),l=n(32).Buffer,d=i.Uint8Array||function(){};var p,g=n(43);function y(){}function w(t,e){a=a||n(13),t=t||{};var r=e instanceof a;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,c=t.writableHighWaterMark,h=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(c||0===c)?c:h,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===t.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(A,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),A(t,e))}(t,n,r,e,i);else{var s=k(n);s||n.corked||n.bufferProcessing||!n.bufferedRequest||_(t,n),r?u(b,t,n,s,i):b(t,n,s,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new s(this)}function v(t){if(a=a||n(13),!(p.call(v,this)||this instanceof a))return new v(t);this._writableState=new w(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),f.call(this)}function m(t,e,n,r,i,o,s){e.writelen=r,e.writecb=s,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function b(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),A(t,e)}function _(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var a=0,u=!0;n;)i[a]=n,n.isBuf||(u=!1),n=n.next,a+=1;i.allBuffers=u,m(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new s(e),e.bufferedRequestCount=0}else{for(;n;){var c=n.chunk,h=n.encoding,f=n.callback;if(m(t,e,!1,e.objectMode?1:c.length,c,h,f),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function k(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function S(t,e){t._final(function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),A(t,e)})}function A(t,e){var n=k(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(S,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}c.inherits(v,f),w.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(w.prototype,"buffer",{get:h.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===v&&(t&&t._writableState instanceof w)}})):p=function(t){return t instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(t,e,n){var r,i=this._writableState,s=!1,a=!i.objectMode&&(r=t,l.isBuffer(r)||r instanceof d);return a&&!l.isBuffer(t)&&(t=function(t){return l.from(t)}(t)),"function"==typeof e&&(n=e,e=null),a?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof n&&(n=y),i.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(a||function(t,e,n,r){var i=!0,s=!1;return null===n?s=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(t.emit("error",s),o.nextTick(r,s),i=!1),i}(this,i,t,n))&&(i.pendingcb++,s=function(t,e,n,r,i,o){if(!n){var s=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=l.from(e,n));return e}(e,r,i);r!==s&&(n=!0,i="buffer",r=s)}var a=e.objectMode?1:r.length;e.length+=a;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else m(t,e,!1,a,r,i,o);return u}(this,i,a,t,e,n)),s},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||_(this,t))},v.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,A(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),v.prototype.destroy=g.destroy,v.prototype._undestroy=g.undestroy,v.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(17),n(48).setImmediate,n(6))},function(t,e,n){"use strict";var r=n(59).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=h,this.end=f,e=3;break;default:return this.write=l,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function h(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function l(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=s(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=s(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=s(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},,,function(t,e,n){var r=n(25).Buffer;function i(t,e){this._block=r.alloc(t),this._finalSize=e,this._blockSize=t,this._len=0}i.prototype.update=function(t,e){"string"==typeof t&&(e=e||"utf8",t=r.from(t,e));for(var n=this._block,i=this._blockSize,o=t.length,s=this._len,a=0;a<o;){for(var u=s%i,c=Math.min(o-a,i-u),h=0;h<c;h++)n[u+h]=t[a+h];a+=c,(s+=c)%i==0&&this._update(n)}return this._len+=o,this},i.prototype.digest=function(t){var e=this._len%this._blockSize;this._block[e]=128,this._block.fill(0,e+1),e>=this._finalSize&&(this._update(this._block),this._block.fill(0));var n=8*this._len;if(n<=4294967295)this._block.writeUInt32BE(n,this._blockSize-4);else{var r=(4294967295&n)>>>0,i=(n-r)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var o=this._hash();return t?o.toString(t):o},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=i},,function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=c(t),r=n[0],s=n[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),u=0,h=s>0?r-4:r,f=0;f<h;f+=4)e=i[t.charCodeAt(f)]<<18|i[t.charCodeAt(f+1)]<<12|i[t.charCodeAt(f+2)]<<6|i[t.charCodeAt(f+3)],a[u++]=e>>16&255,a[u++]=e>>8&255,a[u++]=255&e;2===s&&(e=i[t.charCodeAt(f)]<<2|i[t.charCodeAt(f+1)]>>4,a[u++]=255&e);1===s&&(e=i[t.charCodeAt(f)]<<10|i[t.charCodeAt(f+1)]<<4|i[t.charCodeAt(f+2)]>>2,a[u++]=e>>8&255,a[u++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(h(t,s,s+16383>a?a:s+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function h(t,e,n){for(var i,o,s=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,c=u>>1,h=-7,f=n?i-1:0,l=n?-1:1,d=t[e+f];for(f+=l,o=d&(1<<-h)-1,d>>=-h,h+=a;h>0;o=256*o+t[e+f],f+=l,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=l,h-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=c}return(d?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,a,u,c=8*o-i-1,h=(1<<c)-1,f=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?l/u:l*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=h?(a=0,s=h):s+f>=1?(a=(e*u-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[n+d]=255&s,d+=p,s/=256,c-=8);t[n+d-p]|=128*g}},function(t,e,n){"use strict";(function(e,r){var i=n(28);t.exports=m;var o,s=n(29);m.ReadableState=v;n(14).EventEmitter;var a=function(t,e){return t.listeners(e).length},u=n(42),c=n(32).Buffer,h=e.Uint8Array||function(){};var f=n(22);f.inherits=n(16);var l=n(54),d=void 0;d=l&&l.debuglog?l.debuglog("stream"):function(){};var p,g=n(55),y=n(43);f.inherits(m,u);var w=["error","close","destroy","pause","resume"];function v(t,e){t=t||{};var r=e instanceof(o=o||n(13));this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,s=t.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(s||0===s)?s:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=n(34).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function m(t){if(o=o||n(13),!(this instanceof m))return new m(t);this._readableState=new v(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function b(t,e,n,r,i){var o,s=t._readableState;null===e?(s.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,A(t)}(t,s)):(i||(o=function(t,e){var n;r=e,c.isBuffer(r)||r instanceof h||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(s,e)),o?t.emit("error",o):s.objectMode||e&&e.length>0?("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===c.prototype||(e=function(t){return c.from(t)}(e)),r?s.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):_(t,s,e,!0):s.ended?t.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!n?(e=s.decoder.write(e),s.objectMode||0!==e.length?_(t,s,e,!1):x(t,s)):_(t,s,e,!1))):r||(s.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(s)}function _(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&A(t)),x(t,e)}Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),m.prototype.destroy=y.destroy,m.prototype._undestroy=y.undestroy,m.prototype._destroy=function(t,e){this.push(null),e(t)},m.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=c.from(t,e),e=""),n=!0),b(this,t,e,!1,n)},m.prototype.unshift=function(t){return b(this,t,null,!0,!1)},m.prototype.isPaused=function(){return!1===this._readableState.flowing},m.prototype.setEncoding=function(t){return p||(p=n(34).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};var k=8388608;function S(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=k?t=k:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function A(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(d("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(E,t):E(t))}function E(t){d("emit readable"),t.emit("readable"),R(t)}function x(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(P,t,e))}function P(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(d("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function O(t){d("readable nexttick read 0"),t.read(0)}function T(t,e){e.reading||(d("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),R(t),e.flowing&&!e.reading&&t.read(0)}function R(t){var e=t._readableState;for(d("flow",e.flowing);e.flowing&&null!==t.read(););}function I(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,s=t>o.length?o.length:t;if(s===o.length?i+=o:i+=o.slice(0,t),0===(t-=s)){s===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(s));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=c.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,s=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,s),0===(t-=s)){s===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(s));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function L(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(B,e,t))}function B(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function C(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}m.prototype.read=function(t){d("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return d("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?L(this):A(this),null;if(0===(t=S(t,e))&&e.ended)return 0===e.length&&L(this),null;var r,i=e.needReadable;return d("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&d("length less than watermark",i=!0),e.ended||e.reading?d("reading or ended",i=!1):i&&(d("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=S(n,e))),null===(r=t>0?I(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&L(this)),null!==r&&this.emit("data",r),r},m.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},m.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?h:m;function c(e,r){d("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,d("cleanup"),t.removeListener("close",w),t.removeListener("finish",v),t.removeListener("drain",f),t.removeListener("error",y),t.removeListener("unpipe",c),n.removeListener("end",h),n.removeListener("end",m),n.removeListener("data",g),l=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||f())}function h(){d("onend"),t.end()}o.endEmitted?i.nextTick(u):n.once("end",u),t.on("unpipe",c);var f=function(t){return function(){var e=t._readableState;d("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,R(t))}}(n);t.on("drain",f);var l=!1;var p=!1;function g(e){d("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==C(o.pipes,t))&&!l&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function y(e){d("onerror",e),m(),t.removeListener("error",y),0===a(t,"error")&&t.emit("error",e)}function w(){t.removeListener("finish",v),m()}function v(){d("onfinish"),t.removeListener("close",w),m()}function m(){d("unpipe"),n.unpipe(t)}return n.on("data",g),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?s(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",y),t.once("close",w),t.once("finish",v),t.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),t},m.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var s=C(e.pipes,t);return-1===s?this:(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},m.prototype.on=function(t,e){var n=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&A(this):i.nextTick(O,this))}return n},m.prototype.addListener=m.prototype.on,m.prototype.resume=function(){var t=this._readableState;return t.flowing||(d("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(T,t,e))}(this,t)),this},m.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},m.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",function(){if(d("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause()))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<w.length;o++)t.on(w[o],this.emit.bind(this,w[o]));return this._read=function(e){d("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(m.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),m._fromList=I}).call(this,n(6),n(17))},function(t,e,n){t.exports=n(14).EventEmitter},function(t,e,n){"use strict";var r=n(28);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return o||s?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";t.exports=s;var r=n(13),i=n(22);function o(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function s(t){if(!(this instanceof s))return new s(t);r.call(this,t),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",a)}function a(){var t=this;"function"==typeof this._flush?this._flush(function(e,n){u(t,e,n)}):u(this,null,null)}function u(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(16),i.inherits(s,r),s.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},s.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},s.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},s.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},s.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,function(t){e(t),n.emit("close")})}},,,,function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(57),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(6))},,,,,function(t,e,n){"use strict";(function(t){var r=n(118);"undefined"==typeof navigator&&void 0===t.navigator&&(t.navigator={}),"undefined"==typeof screen&&void 0===t.screen&&(t.screen={});var i=(new r.DeviceUUID).parse(),o=[i.language,i.platform,i.os,i.cpuCores,i.colorDepth],s=i.hashMD5(o.join(":"));e.a=s}).call(this,n(6))},function(t,e){},function(t,e,n){"use strict";var r=n(32).Buffer,i=n(56);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e,n,i,o=r.allocUnsafe(t>>>0),s=this.head,a=0;s;)e=s.data,n=o,i=a,e.copy(n,i),a+=s.data.length,s=s.next;return o},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,s,a,u=1,c={},h=!1,f=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){p(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){o.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&p(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),r=function(e){t.postMessage(s+e,"*")}),l.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return c[u]=i,r(u),u++},l.clearImmediate=d}function d(t){delete c[t]}function p(t){if(h)setTimeout(p,0,t);else{var e=c[t];if(e){h=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{d(t),h=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(6),n(17))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(6))},function(t,e,n){var r=n(12),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function s(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=s),o(i,s),s.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},s.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,n){"use strict";t.exports=o;var r=n(44),i=n(22);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(16),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(33)},function(t,e,n){t.exports=n(13)},function(t,e,n){t.exports=n(31).Transform},function(t,e,n){t.exports=n(31).PassThrough},,,,,,,,,,,,,,function(t,e,n){"use strict";var r=n(25).Buffer,i=n(30).Transform;function o(t){i.call(this),this._block=r.allocUnsafe(t),this._blockSize=t,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}n(21)(o,i),o.prototype._transform=function(t,e,n){var r=null;try{this.update(t,e)}catch(t){r=t}n(r)},o.prototype._flush=function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)},o.prototype.update=function(t,e){if(function(t,e){if(!r.isBuffer(t)&&"string"!=typeof t)throw new TypeError(e+" must be a string or a buffer")}(t,"Data"),this._finalized)throw new Error("Digest already called");r.isBuffer(t)||(t=r.from(t,e));for(var n=this._block,i=0;this._blockOffset+t.length-i>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)n[o++]=t[i++];this._update(),this._blockOffset=0}for(;i<t.length;)n[this._blockOffset++]=t[i++];for(var s=0,a=8*t.length;a>0;++s)this._length[s]+=a,(a=this._length[s]/4294967296|0)>0&&(this._length[s]-=4294967296*a);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var e=this._digest();void 0!==t&&(e=e.toString(t)),this._block.fill(0),this._blockOffset=0;for(var n=0;n<4;++n)this._length[n]=0;return e},o.prototype._digest=function(){throw new Error("_digest is not implemented")},t.exports=o},function(t,e,n){var r=n(21),i=n(37),o=n(25).Buffer,s=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],a=new Array(64);function u(){this.init(),this._w=a,i.call(this,64,56)}function c(t,e,n){return n^t&(e^n)}function h(t,e,n){return t&e|n&(t|e)}function f(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function l(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function d(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}r(u,i),u.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},u.prototype._update=function(t){for(var e,n=this._w,r=0|this._a,i=0|this._b,o=0|this._c,a=0|this._d,u=0|this._e,p=0|this._f,g=0|this._g,y=0|this._h,w=0;w<16;++w)n[w]=t.readInt32BE(4*w);for(;w<64;++w)n[w]=0|(((e=n[w-2])>>>17|e<<15)^(e>>>19|e<<13)^e>>>10)+n[w-7]+d(n[w-15])+n[w-16];for(var v=0;v<64;++v){var m=y+l(u)+c(u,p,g)+s[v]+n[v]|0,b=f(r)+h(r,i,o)|0;y=g,g=p,p=u,u=a+m|0,a=o,o=i,i=r,r=m+b|0}this._a=r+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=a+this._d|0,this._e=u+this._e|0,this._f=p+this._f|0,this._g=g+this._g|0,this._h=y+this._h|0},u.prototype._hash=function(){var t=o.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=u},function(t,e,n){var r=n(21),i=n(37),o=n(25).Buffer,s=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],a=new Array(160);function u(){this.init(),this._w=a,i.call(this,128,112)}function c(t,e,n){return n^t&(e^n)}function h(t,e,n){return t&e|n&(t|e)}function f(t,e){return(t>>>28|e<<4)^(e>>>2|t<<30)^(e>>>7|t<<25)}function l(t,e){return(t>>>14|e<<18)^(t>>>18|e<<14)^(e>>>9|t<<23)}function d(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^t>>>7}function p(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^(t>>>7|e<<25)}function g(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^t>>>6}function y(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^(t>>>6|e<<26)}function w(t,e){return t>>>0<e>>>0?1:0}r(u,i),u.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},u.prototype._update=function(t){for(var e=this._w,n=0|this._ah,r=0|this._bh,i=0|this._ch,o=0|this._dh,a=0|this._eh,u=0|this._fh,v=0|this._gh,m=0|this._hh,b=0|this._al,_=0|this._bl,k=0|this._cl,S=0|this._dl,A=0|this._el,E=0|this._fl,x=0|this._gl,P=0|this._hl,O=0;O<32;O+=2)e[O]=t.readInt32BE(4*O),e[O+1]=t.readInt32BE(4*O+4);for(;O<160;O+=2){var T=e[O-30],R=e[O-30+1],I=d(T,R),L=p(R,T),B=g(T=e[O-4],R=e[O-4+1]),C=y(R,T),M=e[O-14],F=e[O-14+1],j=e[O-32],W=e[O-32+1],U=L+F|0,D=I+M+w(U,L)|0;D=(D=D+B+w(U=U+C|0,C)|0)+j+w(U=U+W|0,W)|0,e[O]=D,e[O+1]=U}for(var N=0;N<160;N+=2){D=e[N],U=e[N+1];var q=h(n,r,i),K=h(b,_,k),Y=f(n,b),X=f(b,n),H=l(a,A),V=l(A,a),J=s[N],$=s[N+1],z=c(a,u,v),G=c(A,E,x),Q=P+V|0,Z=m+H+w(Q,P)|0;Z=(Z=(Z=Z+z+w(Q=Q+G|0,G)|0)+J+w(Q=Q+$|0,$)|0)+D+w(Q=Q+U|0,U)|0;var tt=X+K|0,et=Y+q+w(tt,X)|0;m=v,P=x,v=u,x=E,u=a,E=A,a=o+Z+w(A=S+Q|0,S)|0,o=i,S=k,i=r,k=_,r=n,_=b,n=Z+et+w(b=Q+tt|0,Q)|0}this._al=this._al+b|0,this._bl=this._bl+_|0,this._cl=this._cl+k|0,this._dl=this._dl+S|0,this._el=this._el+A|0,this._fl=this._fl+E|0,this._gl=this._gl+x|0,this._hl=this._hl+P|0,this._ah=this._ah+n+w(this._al,b)|0,this._bh=this._bh+r+w(this._bl,_)|0,this._ch=this._ch+i+w(this._cl,k)|0,this._dh=this._dh+o+w(this._dl,S)|0,this._eh=this._eh+a+w(this._el,A)|0,this._fh=this._fh+u+w(this._fl,E)|0,this._gh=this._gh+v+w(this._gl,x)|0,this._hh=this._hh+m+w(this._hl,P)|0},u.prototype._hash=function(){var t=o.allocUnsafe(64);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),e(this._gh,this._gl,48),e(this._hh,this._hl,56),t},t.exports=u},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){var r=n(123),i=n(124),o=n(125);t.exports=function(t){return r(t)||i(t)||o()}},function(t,e,n){var r=n(126),i=n(127),o=n(128);t.exports=function(t,e){return r(t)||i(t,e)||o()}},function(t,e,n){var r=n(129),i=n(130);t.exports=function(t){if(r.crypto&&r.crypto.getRandomValues)return r.crypto.getRandomValues(t);if("object"==typeof r.msCrypto&&"function"==typeof r.msCrypto.getRandomValues)return r.msCrypto.getRandomValues(t);if(i.randomBytes){if(!(t instanceof Uint8Array))throw new TypeError("expected Uint8Array");if(t.length>65536){var e=new Error;throw e.code=22,e.message="Failed to execute 'getRandomValues' on 'Crypto': The ArrayBufferView's byte length ("+t.length+") exceeds the number of bytes of entropy available via this API (65536).",e.name="QuotaExceededError",e}var n=i.randomBytes(t.length);return t.set(n),t}throw new Error("No secure random number generator available.")}},function(t,e,n){"use strict";var r=n(21),i=n(131),o=n(132),s=n(133),a=n(138);function u(t){a.call(this,"digest"),this._hash=t}r(u,a),u.prototype._update=function(t){this._hash.update(t)},u.prototype._final=function(){return this._hash.digest()},t.exports=function(t){return"md5"===(t=t.toLowerCase())?new i:"rmd160"===t||"ripemd160"===t?new o:new u(s(t))}},function(t,e,n){(function(e){var n=null;"undefined"!=typeof WebSocket?n=WebSocket:"undefined"!=typeof MozWebSocket?n=MozWebSocket:void 0!==e?n=e.WebSocket||e.MozWebSocket:"undefined"!=typeof window?n=window.WebSocket||window.MozWebSocket:"undefined"!=typeof self&&(n=self.WebSocket||self.MozWebSocket),t.exports=n}).call(this,n(6))},function(t,e,n){
/**
 *
 * @revision    $Id: index.js 2012-03-24 16:21:10 Aleksey $
 * @created     2016-09-24 16:21:10
 * @category    Express Helpers
 * @package     device-uuid
 * @version     1.0.2
 * @copyright   Copyright (c) 2016-2017 - All rights reserved.
 * @license     MIT License
 * @author      Alexey Gordeyev IK <aleksej@gordejev.lv>
 * @link        http://www.gordejev.lv
 *
 */
t.exports=n(139)},,,,,function(t,e){t.exports=function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}},function(t,e){t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(t,e,n){(function(e){var n;n="undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{},t.exports=n}).call(this,n(6))},function(t,e){},function(t,e,n){"use strict";var r=n(21),i=n(78),o=n(25).Buffer,s=new Array(16);function a(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function u(t,e){return t<<e|t>>>32-e}function c(t,e,n,r,i,o,s){return u(t+(e&n|~e&r)+i+o|0,s)+e|0}function h(t,e,n,r,i,o,s){return u(t+(e&r|n&~r)+i+o|0,s)+e|0}function f(t,e,n,r,i,o,s){return u(t+(e^n^r)+i+o|0,s)+e|0}function l(t,e,n,r,i,o,s){return u(t+(n^(e|~r))+i+o|0,s)+e|0}r(a,i),a.prototype._update=function(){for(var t=s,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);var n=this._a,r=this._b,i=this._c,o=this._d;n=c(n,r,i,o,t[0],3614090360,7),o=c(o,n,r,i,t[1],3905402710,12),i=c(i,o,n,r,t[2],606105819,17),r=c(r,i,o,n,t[3],3250441966,22),n=c(n,r,i,o,t[4],4118548399,7),o=c(o,n,r,i,t[5],1200080426,12),i=c(i,o,n,r,t[6],2821735955,17),r=c(r,i,o,n,t[7],4249261313,22),n=c(n,r,i,o,t[8],1770035416,7),o=c(o,n,r,i,t[9],2336552879,12),i=c(i,o,n,r,t[10],4294925233,17),r=c(r,i,o,n,t[11],2304563134,22),n=c(n,r,i,o,t[12],1804603682,7),o=c(o,n,r,i,t[13],4254626195,12),i=c(i,o,n,r,t[14],2792965006,17),n=h(n,r=c(r,i,o,n,t[15],1236535329,22),i,o,t[1],4129170786,5),o=h(o,n,r,i,t[6],3225465664,9),i=h(i,o,n,r,t[11],643717713,14),r=h(r,i,o,n,t[0],3921069994,20),n=h(n,r,i,o,t[5],3593408605,5),o=h(o,n,r,i,t[10],38016083,9),i=h(i,o,n,r,t[15],3634488961,14),r=h(r,i,o,n,t[4],3889429448,20),n=h(n,r,i,o,t[9],568446438,5),o=h(o,n,r,i,t[14],3275163606,9),i=h(i,o,n,r,t[3],4107603335,14),r=h(r,i,o,n,t[8],1163531501,20),n=h(n,r,i,o,t[13],2850285829,5),o=h(o,n,r,i,t[2],4243563512,9),i=h(i,o,n,r,t[7],1735328473,14),n=f(n,r=h(r,i,o,n,t[12],2368359562,20),i,o,t[5],4294588738,4),o=f(o,n,r,i,t[8],2272392833,11),i=f(i,o,n,r,t[11],1839030562,16),r=f(r,i,o,n,t[14],4259657740,23),n=f(n,r,i,o,t[1],2763975236,4),o=f(o,n,r,i,t[4],1272893353,11),i=f(i,o,n,r,t[7],4139469664,16),r=f(r,i,o,n,t[10],3200236656,23),n=f(n,r,i,o,t[13],681279174,4),o=f(o,n,r,i,t[0],3936430074,11),i=f(i,o,n,r,t[3],3572445317,16),r=f(r,i,o,n,t[6],76029189,23),n=f(n,r,i,o,t[9],3654602809,4),o=f(o,n,r,i,t[12],3873151461,11),i=f(i,o,n,r,t[15],530742520,16),n=l(n,r=f(r,i,o,n,t[2],3299628645,23),i,o,t[0],4096336452,6),o=l(o,n,r,i,t[7],1126891415,10),i=l(i,o,n,r,t[14],2878612391,15),r=l(r,i,o,n,t[5],4237533241,21),n=l(n,r,i,o,t[12],1700485571,6),o=l(o,n,r,i,t[3],2399980690,10),i=l(i,o,n,r,t[10],4293915773,15),r=l(r,i,o,n,t[1],2240044497,21),n=l(n,r,i,o,t[8],1873313359,6),o=l(o,n,r,i,t[15],4264355552,10),i=l(i,o,n,r,t[6],2734768916,15),r=l(r,i,o,n,t[13],1309151649,21),n=l(n,r,i,o,t[4],4149444226,6),o=l(o,n,r,i,t[11],3174756917,10),i=l(i,o,n,r,t[2],718787259,15),r=l(r,i,o,n,t[9],3951481745,21),this._a=this._a+n|0,this._b=this._b+r|0,this._c=this._c+i|0,this._d=this._d+o|0},a.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=o.allocUnsafe(16);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t},t.exports=a},function(t,e,n){"use strict";var r=n(12).Buffer,i=n(21),o=n(78),s=new Array(16),a=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],u=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],c=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],h=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],f=[0,1518500249,1859775393,2400959708,2840853838],l=[1352829926,1548603684,1836072691,2053994217,0];function d(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(t,e){return t<<e|t>>>32-e}function g(t,e,n,r,i,o,s,a){return p(t+(e^n^r)+o+s|0,a)+i|0}function y(t,e,n,r,i,o,s,a){return p(t+(e&n|~e&r)+o+s|0,a)+i|0}function w(t,e,n,r,i,o,s,a){return p(t+((e|~n)^r)+o+s|0,a)+i|0}function v(t,e,n,r,i,o,s,a){return p(t+(e&r|n&~r)+o+s|0,a)+i|0}function m(t,e,n,r,i,o,s,a){return p(t+(e^(n|~r))+o+s|0,a)+i|0}i(d,o),d.prototype._update=function(){for(var t=s,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);for(var n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,d=0|this._e,b=0|this._a,_=0|this._b,k=0|this._c,S=0|this._d,A=0|this._e,E=0;E<80;E+=1){var x,P;E<16?(x=g(n,r,i,o,d,t[a[E]],f[0],c[E]),P=m(b,_,k,S,A,t[u[E]],l[0],h[E])):E<32?(x=y(n,r,i,o,d,t[a[E]],f[1],c[E]),P=v(b,_,k,S,A,t[u[E]],l[1],h[E])):E<48?(x=w(n,r,i,o,d,t[a[E]],f[2],c[E]),P=w(b,_,k,S,A,t[u[E]],l[2],h[E])):E<64?(x=v(n,r,i,o,d,t[a[E]],f[3],c[E]),P=y(b,_,k,S,A,t[u[E]],l[3],h[E])):(x=m(n,r,i,o,d,t[a[E]],f[4],c[E]),P=g(b,_,k,S,A,t[u[E]],l[4],h[E])),n=d,d=o,o=p(i,10),i=r,r=x,b=A,A=S,S=p(k,10),k=_,_=P}var O=this._b+i+S|0;this._b=this._c+o+A|0,this._c=this._d+d+b|0,this._d=this._e+n+_|0,this._e=this._a+r+k|0,this._a=O},d.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=r.alloc?r.alloc(20):new r(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=d},function(t,e,n){(e=t.exports=function(t){t=t.toLowerCase();var n=e[t];if(!n)throw new Error(t+" is not supported (we accept pull requests)");return new n}).sha=n(134),e.sha1=n(135),e.sha224=n(136),e.sha256=n(79),e.sha384=n(137),e.sha512=n(80)},function(t,e,n){var r=n(21),i=n(37),o=n(25).Buffer,s=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function u(){this.init(),this._w=a,i.call(this,64,56)}function c(t){return t<<30|t>>>2}function h(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(u,i),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var e,n=this._w,r=0|this._a,i=0|this._b,o=0|this._c,a=0|this._d,u=0|this._e,f=0;f<16;++f)n[f]=t.readInt32BE(4*f);for(;f<80;++f)n[f]=n[f-3]^n[f-8]^n[f-14]^n[f-16];for(var l=0;l<80;++l){var d=~~(l/20),p=0|((e=r)<<5|e>>>27)+h(d,i,o,a)+u+n[l]+s[d];u=a,a=o,o=c(i),i=r,r=p}this._a=r+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=a+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},function(t,e,n){var r=n(21),i=n(37),o=n(25).Buffer,s=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function u(){this.init(),this._w=a,i.call(this,64,56)}function c(t){return t<<5|t>>>27}function h(t){return t<<30|t>>>2}function f(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(u,i),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var e,n=this._w,r=0|this._a,i=0|this._b,o=0|this._c,a=0|this._d,u=0|this._e,l=0;l<16;++l)n[l]=t.readInt32BE(4*l);for(;l<80;++l)n[l]=(e=n[l-3]^n[l-8]^n[l-14]^n[l-16])<<1|e>>>31;for(var d=0;d<80;++d){var p=~~(d/20),g=c(r)+f(p,i,o,a)+u+n[d]+s[p]|0;u=a,a=o,o=h(i),i=r,r=g}this._a=r+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=a+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},function(t,e,n){var r=n(21),i=n(79),o=n(37),s=n(25).Buffer,a=new Array(64);function u(){this.init(),this._w=a,o.call(this,64,56)}r(u,i),u.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},u.prototype._hash=function(){var t=s.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=u},function(t,e,n){var r=n(21),i=n(80),o=n(37),s=n(25).Buffer,a=new Array(160);function u(){this.init(),this._w=a,o.call(this,128,112)}r(u,i),u.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},u.prototype._hash=function(){var t=s.allocUnsafe(48);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),t},t.exports=u},function(t,e,n){var r=n(25).Buffer,i=n(30).Transform,o=n(34).StringDecoder;function s(t){i.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}n(21)(s,i),s.prototype.update=function(t,e,n){"string"==typeof t&&(t=r.from(t,e));var i=this._update(t);return this.hashMode?this:(n&&(i=this._toString(i,n)),i)},s.prototype.setAutoPadding=function(){},s.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},s.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},s.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},s.prototype._transform=function(t,e,n){var r;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){r=t}finally{n(r)}},s.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},s.prototype._finalOrDigest=function(t){var e=this.__final()||r.alloc(0);return t&&(e=this._toString(e,t,!0)),e},s.prototype._toString=function(t,e,n){if(this._decoder||(this._decoder=new o(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var r=this._decoder.write(t);return n&&(r+=this._decoder.end()),r},t.exports=s},function(t,e){
/*!
 * device-uuid.js v1.0.4 (https://github.com/biggora/device-uuid/)
 * Copyright 2016-2017 Alexey Gordeyev
 * Licensed under MIT (https://github.com/biggora/device-uuid/blob/master/LICENSE)
 */
!function(t){"use strict";var e=new RegExp("^.*("+["\\+https:\\/\\/developers.google.com\\/\\+\\/web\\/snippet\\/","googlebot","baiduspider","gurujibot","yandexbot","slurp","msnbot","bingbot","facebookexternalhit","linkedinbot","twitterbot","slackbot","telegrambot","applebot","pingdom","tumblr ","Embedly","spbot"].join("|")+").*$"),n=function(t){t=t||{};var r={version:!1,language:!1,platform:!0,os:!0,pixelDepth:!0,colorDepth:!0,resolution:!1,isAuthoritative:!0,silkAccelerated:!0,isKindleFire:!0,isDesktop:!0,isMobile:!0,isTablet:!0,isWindows:!0,isLinux:!0,isLinux64:!0,isChromeOS:!0,isMac:!0,isiPad:!0,isiPhone:!0,isiPod:!0,isAndroid:!0,isSamsung:!0,isSmartTV:!0,isRaspberry:!0,isBlackberry:!0,isTouchScreen:!0,isOpera:!1,isIE:!1,isEdge:!1,isIECompatibilityMode:!1,isSafari:!1,isFirefox:!1,isWebkit:!1,isChrome:!1,isKonqueror:!1,isOmniWeb:!1,isSeaMonkey:!1,isFlock:!1,isAmaya:!1,isPhantomJS:!1,isEpiphany:!1,source:!1,cpuCores:!1};for(var i in t)t.hasOwnProperty(i)&&void 0!==r[i]&&(r[i]=t[i]);return this.options=r,this.version="1.0.0",this._Versions={Edge:/Edge\/([\d\w\.\-]+)/i,Firefox:/firefox\/([\d\w\.\-]+)/i,IE:/msie\s([\d\.]+[\d])|trident\/\d+\.\d+;.*[rv:]+(\d+\.\d)/i,Chrome:/chrome\/([\d\w\.\-]+)/i,Chromium:/(?:chromium|crios)\/([\d\w\.\-]+)/i,Safari:/version\/([\d\w\.\-]+)/i,Opera:/version\/([\d\w\.\-]+)|OPR\/([\d\w\.\-]+)/i,Ps3:/([\d\w\.\-]+)\)\s*$/i,Psp:/([\d\w\.\-]+)\)?\s*$/i,Amaya:/amaya\/([\d\w\.\-]+)/i,SeaMonkey:/seamonkey\/([\d\w\.\-]+)/i,OmniWeb:/omniweb\/v([\d\w\.\-]+)/i,Flock:/flock\/([\d\w\.\-]+)/i,Epiphany:/epiphany\/([\d\w\.\-]+)/i,WinJs:/msapphost\/([\d\w\.\-]+)/i,PhantomJS:/phantomjs\/([\d\w\.\-]+)/i,UC:/UCBrowser\/([\d\w\.]+)/i},this._Browsers={Edge:/edge/i,Amaya:/amaya/i,Konqueror:/konqueror/i,Epiphany:/epiphany/i,SeaMonkey:/seamonkey/i,Flock:/flock/i,OmniWeb:/omniweb/i,Chromium:/chromium|crios/i,Chrome:/chrome/i,Safari:/safari/i,IE:/msie|trident/i,Opera:/opera|OPR/i,PS3:/playstation 3/i,PSP:/playstation portable/i,Firefox:/firefox/i,WinJs:/msapphost/i,PhantomJS:/phantomjs/i,UC:/UCBrowser/i},this._OS={Windows10:/windows nt 10\.0/i,Windows81:/windows nt 6\.3/i,Windows8:/windows nt 6\.2/i,Windows7:/windows nt 6\.1/i,UnknownWindows:/windows nt 6\.\d+/i,WindowsVista:/windows nt 6\.0/i,Windows2003:/windows nt 5\.2/i,WindowsXP:/windows nt 5\.1/i,Windows2000:/windows nt 5\.0/i,WindowsPhone8:/windows phone 8\./,OSXCheetah:/os x 10[._]0/i,OSXPuma:/os x 10[._]1(\D|$)/i,OSXJaguar:/os x 10[._]2/i,OSXPanther:/os x 10[._]3/i,OSXTiger:/os x 10[._]4/i,OSXLeopard:/os x 10[._]5/i,OSXSnowLeopard:/os x 10[._]6/i,OSXLion:/os x 10[._]7/i,OSXMountainLion:/os x 10[._]8/i,OSXMavericks:/os x 10[._]9/i,OSXYosemite:/os x 10[._]10/i,OSXElCapitan:/os x 10[._]11/i,OSXSierra:/os x 10[._]12/i,Mac:/os x/i,Linux:/linux/i,Linux64:/linux x86_64/i,ChromeOS:/cros/i,Wii:/wii/i,PS3:/playstation 3/i,PSP:/playstation portable/i,iPad:/\(iPad.*os (\d+)[._](\d+)/i,iPhone:/\(iPhone.*os (\d+)[._](\d+)/i,Bada:/Bada\/(\d+)\.(\d+)/i,Curl:/curl\/(\d+)\.(\d+)\.(\d+)/i},this._Platform={Windows:/windows nt/i,WindowsPhone:/windows phone/i,Mac:/macintosh/i,Linux:/linux/i,Wii:/wii/i,Playstation:/playstation/i,iPad:/ipad/i,iPod:/ipod/i,iPhone:/iphone/i,Android:/android/i,Blackberry:/blackberry/i,Samsung:/samsung/i,Curl:/curl/i},this.DefaultAgent={isAuthoritative:!0,isMobile:!1,isTablet:!1,isiPad:!1,isiPod:!1,isiPhone:!1,isAndroid:!1,isBlackberry:!1,isOpera:!1,isIE:!1,isEdge:!1,isIECompatibilityMode:!1,isSafari:!1,isFirefox:!1,isWebkit:!1,isChrome:!1,isKonqueror:!1,isOmniWeb:!1,isSeaMonkey:!1,isFlock:!1,isAmaya:!1,isPhantomJS:!1,isEpiphany:!1,isDesktop:!1,isWindows:!1,isLinux:!1,isLinux64:!1,isMac:!1,isChromeOS:!1,isBada:!1,isSamsung:!1,isRaspberry:!1,isBot:!1,isCurl:!1,isAndroidTablet:!1,isWinJs:!1,isKindleFire:!1,isSilk:!1,isCaptive:!1,isSmartTV:!1,isUC:!1,isTouchScreen:!1,silkAccelerated:!1,colorDepth:-1,pixelDepth:-1,resolution:[],cpuCores:-1,language:"unknown",browser:"unknown",version:"unknown",os:"unknown",platform:"unknown",geoIp:{},source:"",hashInt:function(t){var e,n,r=0;if(0===t.length)return r;for(e=0,n=t.length;e<n;e++)r=(r<<5)-r+t.charCodeAt(e),r|=0;return r},hashMD5:function(t){function e(t,e){return t<<e|t>>>32-e}function n(t,e){var n,r,i,o,s;return i=2147483648&t,o=2147483648&e,s=(1073741823&t)+(1073741823&e),(n=1073741824&t)&(r=1073741824&e)?2147483648^s^i^o:n|r?1073741824&s?3221225472^s^i^o:1073741824^s^i^o:s^i^o}function r(t,r,i,o,s,a,u){return t=n(t,n(n(function(t,e,n){return t&e|~t&n}(r,i,o),s),u)),n(e(t,a),r)}function i(t,r,i,o,s,a,u){return t=n(t,n(n(function(t,e,n){return t&n|e&~n}(r,i,o),s),u)),n(e(t,a),r)}function o(t,r,i,o,s,a,u){return t=n(t,n(n(function(t,e,n){return t^e^n}(r,i,o),s),u)),n(e(t,a),r)}function s(t,r,i,o,s,a,u){return t=n(t,n(n(function(t,e,n){return e^(t|~n)}(r,i,o),s),u)),n(e(t,a),r)}function a(t){var e,n="",r="";for(e=0;e<=3;e++)n+=(r="0"+(t>>>8*e&255).toString(16)).substr(r.length-2,2);return n}var u,c,h,f,l,d,p,g,y,w;for(u=function(t){for(var e,n=t.length,r=n+8,i=16*((r-r%64)/64+1),o=new Array(i-1),s=0,a=0;a<n;)s=a%4*8,o[e=(a-a%4)/4]=o[e]|t.charCodeAt(a)<<s,a++;return s=a%4*8,o[e=(a-a%4)/4]=o[e]|128<<s,o[i-2]=n<<3,o[i-1]=n>>>29,o}(t=function(t){t=t.replace(/\r\n/g,"\n");for(var e="",n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e+=String.fromCharCode(r):r>127&&r<2048?(e+=String.fromCharCode(r>>6|192),e+=String.fromCharCode(63&r|128)):(e+=String.fromCharCode(r>>12|224),e+=String.fromCharCode(r>>6&63|128),e+=String.fromCharCode(63&r|128))}return e}(t)),p=1732584193,g=4023233417,y=2562383102,w=271733878,c=0;c<u.length;c+=16)h=p,f=g,l=y,d=w,p=r(p,g,y,w,u[c+0],7,3614090360),w=r(w,p,g,y,u[c+1],12,3905402710),y=r(y,w,p,g,u[c+2],17,606105819),g=r(g,y,w,p,u[c+3],22,3250441966),p=r(p,g,y,w,u[c+4],7,4118548399),w=r(w,p,g,y,u[c+5],12,1200080426),y=r(y,w,p,g,u[c+6],17,2821735955),g=r(g,y,w,p,u[c+7],22,4249261313),p=r(p,g,y,w,u[c+8],7,1770035416),w=r(w,p,g,y,u[c+9],12,2336552879),y=r(y,w,p,g,u[c+10],17,4294925233),g=r(g,y,w,p,u[c+11],22,2304563134),p=r(p,g,y,w,u[c+12],7,1804603682),w=r(w,p,g,y,u[c+13],12,4254626195),y=r(y,w,p,g,u[c+14],17,2792965006),p=i(p,g=r(g,y,w,p,u[c+15],22,1236535329),y,w,u[c+1],5,4129170786),w=i(w,p,g,y,u[c+6],9,3225465664),y=i(y,w,p,g,u[c+11],14,643717713),g=i(g,y,w,p,u[c+0],20,3921069994),p=i(p,g,y,w,u[c+5],5,3593408605),w=i(w,p,g,y,u[c+10],9,38016083),y=i(y,w,p,g,u[c+15],14,3634488961),g=i(g,y,w,p,u[c+4],20,3889429448),p=i(p,g,y,w,u[c+9],5,568446438),w=i(w,p,g,y,u[c+14],9,3275163606),y=i(y,w,p,g,u[c+3],14,4107603335),g=i(g,y,w,p,u[c+8],20,1163531501),p=i(p,g,y,w,u[c+13],5,2850285829),w=i(w,p,g,y,u[c+2],9,4243563512),y=i(y,w,p,g,u[c+7],14,1735328473),p=o(p,g=i(g,y,w,p,u[c+12],20,2368359562),y,w,u[c+5],4,4294588738),w=o(w,p,g,y,u[c+8],11,2272392833),y=o(y,w,p,g,u[c+11],16,1839030562),g=o(g,y,w,p,u[c+14],23,4259657740),p=o(p,g,y,w,u[c+1],4,2763975236),w=o(w,p,g,y,u[c+4],11,1272893353),y=o(y,w,p,g,u[c+7],16,4139469664),g=o(g,y,w,p,u[c+10],23,3200236656),p=o(p,g,y,w,u[c+13],4,681279174),w=o(w,p,g,y,u[c+0],11,3936430074),y=o(y,w,p,g,u[c+3],16,3572445317),g=o(g,y,w,p,u[c+6],23,76029189),p=o(p,g,y,w,u[c+9],4,3654602809),w=o(w,p,g,y,u[c+12],11,3873151461),y=o(y,w,p,g,u[c+15],16,530742520),p=s(p,g=o(g,y,w,p,u[c+2],23,3299628645),y,w,u[c+0],6,4096336452),w=s(w,p,g,y,u[c+7],10,1126891415),y=s(y,w,p,g,u[c+14],15,2878612391),g=s(g,y,w,p,u[c+5],21,4237533241),p=s(p,g,y,w,u[c+12],6,1700485571),w=s(w,p,g,y,u[c+3],10,2399980690),y=s(y,w,p,g,u[c+10],15,4293915773),g=s(g,y,w,p,u[c+1],21,2240044497),p=s(p,g,y,w,u[c+8],6,1873313359),w=s(w,p,g,y,u[c+15],10,4264355552),y=s(y,w,p,g,u[c+6],15,2734768916),g=s(g,y,w,p,u[c+13],21,1309151649),p=s(p,g,y,w,u[c+4],6,4149444226),w=s(w,p,g,y,u[c+11],10,3174756917),y=s(y,w,p,g,u[c+2],15,718787259),g=s(g,y,w,p,u[c+9],21,3951481745),p=n(p,h),g=n(g,f),y=n(y,l),w=n(w,d);return(a(p)+a(g)+a(y)+a(w)).toLowerCase()}},this.Agent={},this.getBrowser=function(t){switch(!0){case this._Browsers.Edge.test(t):return this.Agent.isEdge=!0,"Edge";case this._Browsers.PhantomJS.test(t):return this.Agent.isPhantomJS=!0,"PhantomJS";case this._Browsers.Konqueror.test(t):return this.Agent.isKonqueror=!0,"Konqueror";case this._Browsers.Amaya.test(t):return this.Agent.isAmaya=!0,"Amaya";case this._Browsers.Epiphany.test(t):return this.Agent.isEpiphany=!0,"Epiphany";case this._Browsers.SeaMonkey.test(t):return this.Agent.isSeaMonkey=!0,"SeaMonkey";case this._Browsers.Flock.test(t):return this.Agent.isFlock=!0,"Flock";case this._Browsers.OmniWeb.test(t):return this.Agent.isOmniWeb=!0,"OmniWeb";case this._Browsers.Opera.test(t):return this.Agent.isOpera=!0,"Opera";case this._Browsers.Chromium.test(t):return this.Agent.isChrome=!0,"Chromium";case this._Browsers.Chrome.test(t):return this.Agent.isChrome=!0,"Chrome";case this._Browsers.Safari.test(t):return this.Agent.isSafari=!0,"Safari";case this._Browsers.WinJs.test(t):return this.Agent.isWinJs=!0,"WinJs";case this._Browsers.IE.test(t):return this.Agent.isIE=!0,"IE";case this._Browsers.PS3.test(t):return"ps3";case this._Browsers.PSP.test(t):return"psp";case this._Browsers.Firefox.test(t):return this.Agent.isFirefox=!0,"Firefox";case this._Browsers.UC.test(t):return this.Agent.isUC=!0,"UCBrowser";default:return 0!==t.indexOf("Mozilla")&&/^([\d\w\-\.]+)\/[\d\w\.\-]+/i.test(t)?(this.Agent.isAuthoritative=!1,RegExp.$1):"unknown"}},this.getBrowserVersion=function(t){switch(this.Agent.browser){case"Edge":if(this._Versions.Edge.test(t))return RegExp.$1;break;case"PhantomJS":if(this._Versions.PhantomJS.test(t))return RegExp.$1;break;case"Chrome":if(this._Versions.Chrome.test(t))return RegExp.$1;break;case"Chromium":if(this._Versions.Chromium.test(t))return RegExp.$1;break;case"Safari":if(this._Versions.Safari.test(t))return RegExp.$1;break;case"Opera":if(this._Versions.Opera.test(t))return RegExp.$1?RegExp.$1:RegExp.$2;break;case"Firefox":if(this._Versions.Firefox.test(t))return RegExp.$1;break;case"WinJs":if(this._Versions.WinJs.test(t))return RegExp.$1;break;case"IE":if(this._Versions.IE.test(t))return RegExp.$2?RegExp.$2:RegExp.$1;break;case"ps3":if(this._Versions.Ps3.test(t))return RegExp.$1;break;case"psp":if(this._Versions.Psp.test(t))return RegExp.$1;break;case"Amaya":if(this._Versions.Amaya.test(t))return RegExp.$1;break;case"Epiphany":if(this._Versions.Epiphany.test(t))return RegExp.$1;break;case"SeaMonkey":if(this._Versions.SeaMonkey.test(t))return RegExp.$1;break;case"Flock":if(this._Versions.Flock.test(t))return RegExp.$1;break;case"OmniWeb":if(this._Versions.OmniWeb.test(t))return RegExp.$1;break;case"UCBrowser":if(this._Versions.UC.test(t))return RegExp.$1;break;default:if("unknown"!==this.Agent.browser&&new RegExp(this.Agent.browser+"[\\/ ]([\\d\\w\\.\\-]+)","i").test(t))return RegExp.$1}},this.getOS=function(t){switch(!0){case this._OS.WindowsVista.test(t):return this.Agent.isWindows=!0,"Windows Vista";case this._OS.Windows7.test(t):return this.Agent.isWindows=!0,"Windows 7";case this._OS.Windows8.test(t):return this.Agent.isWindows=!0,"Windows 8";case this._OS.Windows81.test(t):return this.Agent.isWindows=!0,"Windows 8.1";case this._OS.Windows10.test(t):return this.Agent.isWindows=!0,"Windows 10.0";case this._OS.Windows2003.test(t):return this.Agent.isWindows=!0,"Windows 2003";case this._OS.WindowsXP.test(t):return this.Agent.isWindows=!0,"Windows XP";case this._OS.Windows2000.test(t):return this.Agent.isWindows=!0,"Windows 2000";case this._OS.WindowsPhone8.test(t):return"Windows Phone 8";case this._OS.Linux64.test(t):return this.Agent.isLinux=!0,this.Agent.isLinux64=!0,"Linux 64";case this._OS.Linux.test(t):return this.Agent.isLinux=!0,"Linux";case this._OS.ChromeOS.test(t):return this.Agent.isChromeOS=!0,"Chrome OS";case this._OS.Wii.test(t):return"Wii";case this._OS.PS3.test(t):case this._OS.PSP.test(t):return"Playstation";case this._OS.OSXCheetah.test(t):return this.Agent.isMac=!0,"OS X Cheetah";case this._OS.OSXPuma.test(t):return this.Agent.isMac=!0,"OS X Puma";case this._OS.OSXJaguar.test(t):return this.Agent.isMac=!0,"OS X Jaguar";case this._OS.OSXPanther.test(t):return this.Agent.isMac=!0,"OS X Panther";case this._OS.OSXTiger.test(t):return this.Agent.isMac=!0,"OS X Tiger";case this._OS.OSXLeopard.test(t):return this.Agent.isMac=!0,"OS X Leopard";case this._OS.OSXSnowLeopard.test(t):return this.Agent.isMac=!0,"OS X Snow Leopard";case this._OS.OSXLion.test(t):return this.Agent.isMac=!0,"OS X Lion";case this._OS.OSXMountainLion.test(t):return this.Agent.isMac=!0,"OS X Mountain Lion";case this._OS.OSXMavericks.test(t):return this.Agent.isMac=!0,"OS X Mavericks";case this._OS.OSXYosemite.test(t):return this.Agent.isMac=!0,"OS X Yosemite";case this._OS.OSXElCapitan.test(t):return this.Agent.isMac=!0,"OS X El Capitan";case this._OS.OSXSierra.test(t):return this.Agent.isMac=!0,"macOS Sierra";case this._OS.Mac.test(t):return this.Agent.isMac=!0,"OS X";case this._OS.iPad.test(t):return this.Agent.isiPad=!0,t.match(this._OS.iPad)[0].replace("_",".");case this._OS.iPhone.test(t):return this.Agent.isiPhone=!0,t.match(this._OS.iPhone)[0].replace("_",".");case this._OS.Bada.test(t):return this.Agent.isBada=!0,"Bada";case this._OS.Curl.test(t):return this.Agent.isCurl=!0,"Curl";default:return"unknown"}},this.getPlatform=function(t){switch(!0){case this._Platform.Windows.test(t):return"Microsoft Windows";case this._Platform.WindowsPhone.test(t):return this.Agent.isWindowsPhone=!0,"Microsoft Windows Phone";case this._Platform.Mac.test(t):return"Apple Mac";case this._Platform.Curl.test(t):return"Curl";case this._Platform.Android.test(t):return this.Agent.isAndroid=!0,"Android";case this._Platform.Blackberry.test(t):return this.Agent.isBlackberry=!0,"Blackberry";case this._Platform.Linux.test(t):return"Linux";case this._Platform.Wii.test(t):return"Wii";case this._Platform.Playstation.test(t):return"Playstation";case this._Platform.iPad.test(t):return this.Agent.isiPad=!0,"iPad";case this._Platform.iPod.test(t):return this.Agent.isiPod=!0,"iPod";case this._Platform.iPhone.test(t):return this.Agent.isiPhone=!0,"iPhone";case this._Platform.Samsung.test(t):return this.Agent.isiSamsung=!0,"Samsung";default:return"unknown"}},this.testCompatibilityMode=function(){var t=this;if(this.Agent.isIE&&/Trident\/(\d)\.0/i.test(t.Agent.source)){var e=parseInt(RegExp.$1,10),n=parseInt(t.Agent.version,10);7===n&&7===e&&(t.Agent.isIECompatibilityMode=!0,t.Agent.version=11),7===n&&6===e&&(t.Agent.isIECompatibilityMode=!0,t.Agent.version=10),7===n&&5===e&&(t.Agent.isIECompatibilityMode=!0,t.Agent.version=9),7===n&&4===e&&(t.Agent.isIECompatibilityMode=!0,t.Agent.version=8)}},this.testSilk=function(){switch(!0){case new RegExp("silk","gi").test(this.Agent.source):this.Agent.isSilk=!0}return/Silk-Accelerated=true/gi.test(this.Agent.source)&&(this.Agent.SilkAccelerated=!0),!!this.Agent.isSilk&&"Silk"},this.testKindleFire=function(){var t=this;switch(!0){case/KFOT/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire";case/KFTT/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HD";case/KFJWI/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HD 8.9";case/KFJWA/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HD 8.9 4G";case/KFSOWI/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HD 7";case/KFTHWI/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HDX 7";case/KFTHWA/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HDX 7 4G";case/KFAPWI/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HDX 8.9";case/KFAPWA/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HDX 8.9 4G";default:return!1}},this.testCaptiveNetwork=function(){switch(!0){case/CaptiveNetwork/gi.test(this.Agent.source):return this.Agent.isCaptive=!0,this.Agent.isMac=!0,this.Agent.platform="Apple Mac","CaptiveNetwork";default:return!1}},this.testMobile=function(){var t=this;switch(!0){case t.Agent.isWindows:case t.Agent.isLinux:case t.Agent.isMac:case t.Agent.isChromeOS:t.Agent.isDesktop=!0;break;case t.Agent.isAndroid:case t.Agent.isSamsung:t.Agent.isMobile=!0,t.Agent.isDesktop=!1}switch(!0){case t.Agent.isiPad:case t.Agent.isiPod:case t.Agent.isiPhone:case t.Agent.isBada:case t.Agent.isBlackberry:case t.Agent.isAndroid:case t.Agent.isWindowsPhone:t.Agent.isMobile=!0,t.Agent.isDesktop=!1}/mobile/i.test(t.Agent.source)&&(t.Agent.isMobile=!0,t.Agent.isDesktop=!1)},this.testTablet=function(){var t=this;switch(!0){case t.Agent.isiPad:case t.Agent.isAndroidTablet:case t.Agent.isKindleFire:t.Agent.isTablet=!0}/tablet/i.test(t.Agent.source)&&(t.Agent.isTablet=!0)},this.testNginxGeoIP=function(t){var e=this;Object.keys(t).forEach(function(n){/^GEOIP/i.test(n)&&(e.Agent.geoIp[n]=t[n])})},this.testBot=function(){var t=this,n=e.exec(t.Agent.source.toLowerCase());n?t.Agent.isBot=n[1]:t.Agent.isAuthoritative||(t.Agent.isBot=/bot/i.test(t.Agent.source))},this.testSmartTV=function(){var t=new RegExp("smart-tv|smarttv|googletv|appletv|hbbtv|pov_tv|netcast.tv","gi").exec(this.Agent.source.toLowerCase());t&&(this.Agent.isSmartTV=t[1])},this.testAndroidTablet=function(){this.Agent.isAndroid&&!/mobile/i.test(this.Agent.source)&&(this.Agent.isAndroidTablet=!0)},this.testTouchSupport=function(){this.Agent.isTouchScreen="ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0},this.getLaguage=function(){this.Agent.language=(navigator.language||navigator.userLanguage||navigator.browserLanguage||navigator.systemLanguage||"").toLowerCase()},this.getColorDepth=function(){this.Agent.colorDepth=screen.colorDepth||-1},this.getScreenResolution=function(){this.Agent.resolution=[screen.availWidth,screen.availHeight]},this.getPixelDepth=function(){this.Agent.pixelDepth=screen.pixelDepth||-1},this.getCPU=function(){this.Agent.cpuCores=navigator.hardwareConcurrency||-1},this.reset=function(){var t=this;for(var e in t.DefaultAgent)t.DefaultAgent.hasOwnProperty(e)&&(t.Agent[e]=t.DefaultAgent[e]);return t},this.parse=function(t){t=t||navigator.userAgent;var e=new n;return e.Agent.source=t.replace(/^\s*/,"").replace(/\s*$/,""),e.Agent.os=e.getOS(e.Agent.source),e.Agent.platform=e.getPlatform(e.Agent.source),e.Agent.browser=e.getBrowser(e.Agent.source),e.Agent.version=e.getBrowserVersion(e.Agent.source),e.testBot(),e.testSmartTV(),e.testMobile(),e.testAndroidTablet(),e.testTablet(),e.testCompatibilityMode(),e.testSilk(),e.testKindleFire(),e.testCaptiveNetwork(),e.testTouchSupport(),e.getLaguage(),e.getColorDepth(),e.getPixelDepth(),e.getScreenResolution(),e.getCPU(),e.Agent},this.get=function(t){var e=this.parse(),n=[];for(var r in this.options)this.options.hasOwnProperty(r)&&!0===this.options[r]&&n.push(e[r]);t&&n.push(t),!this.options.resolution&&e.isMobile&&n.push(e.resolution);var i=e.hashMD5(n.join(":"));return[i.slice(0,8),i.slice(8,12),"4"+i.slice(12,15),"b"+i.slice(15,18),i.slice(20)].join("-")},this.Agent=this.DefaultAgent,this};t.DeviceUUID=n,new n(navigator.userAgent)}(this)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"BLOCKCHAIN_SUPPORT",function(){return d}),n.d(r,"WALLET_SUPPORT",function(){return p});var i,o=n(0),s=n.n(o),a=n(2),u=n.n(a),c=n(4),h=n.n(c),f=n(5),l=n.n(f),d="blockchain_support",p="wallet_support",g=new(function(){function t(){h()(this,t),this.plugins=[]}return l()(t,[{key:"loadPlugin",value:function(t){this.plugin(t.name)||this.plugins.push(t)}},{key:"wallets",value:function(){return this.plugins.filter(function(t){return t.type===p})}},{key:"signatureProviders",value:function(){return this.plugins.filter(function(t){return t.type===d})}},{key:"supportedBlockchains",value:function(){return this.signatureProviders().map(function(){return name})}},{key:"plugin",value:function(t){return this.plugins.find(function(e){return e.name===t})}},{key:"endorsedNetworks",value:function(){var t=u()(s.a.mark(function t(){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all(this.signatureProviders().map(function(){var t=u()(s.a.mark(function t(e){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.getEndorsedNetwork();case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()));case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}]),t}()),y=n(113),w=n.n(y),v=n(19),m=n.n(v),b=n(114),_=n.n(b),k={},S=function(){return"undefined"==typeof window?{localStorage:{setItem:function(t,e){return k[t]=e},getItem:function(t){return k[t]||null},removeItem:function(t){return delete k[t]}}}:window},A=function(){function t(){h()(this,t)}return l()(t,null,[{key:"setAppKey",value:function(t){S().localStorage.setItem("appkey",t)}},{key:"getAppKey",value:function(){return S().localStorage.getItem("appkey")}},{key:"removeAppKey",value:function(){return S().localStorage.removeItem("appkey")}},{key:"setNonce",value:function(t){S().localStorage.setItem("nonce",t)}},{key:"getNonce",value:function(){return S().localStorage.getItem("nonce")}},{key:"removeNonce",value:function(){return S().localStorage.removeItem("nonce")}}]),t}(),E=n(115),x=n.n(E),P=n(116),O=n.n(P),T=n(117),R=n.n(T),I=n(53),L="/socket.io/?EIO=3&transport=websocket",B=function(t){return O()("sha256").update(t).digest("hex")},C=function(){var t=new Uint8Array(24);return x()(t),t.join("")},M=function(){function t(e,n){h()(this,t),this.plugin=e,this.timeout=n,this.uuid=null,this.socket=null,this.connected=!1,this.paired=!1,this.openRequests=[],this.pairingPromise=null,this.eventHandlers={},this.appkey=A.getAppKey(),this.appkey||(this.appkey="appkey:"+C())}return l()(t,[{key:"addEventHandler",value:function(t,e){e||(e="app"),this.eventHandlers[e]=t}},{key:"removeEventHandler",value:function(t){t||(t="app"),delete this.eventHandlers[t]}},{key:"link",value:function(){var t=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;return this.uuid=e,Promise.race([new Promise(function(e){return setTimeout(function(){t.connected||(e(!1),t.socket&&(t.socket.close(),t.socket=null))},t.timeout)}),new Promise(function(){var e=u()(s.a.mark(function e(r){var i,o,a,c,h,f;return s.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i=function(){t.socket.onmessage=function(o){if(-1===o.data.indexOf("42/scatter"))return!1;var s=JSON.parse(o.data.replace("42/scatter,","")),a=_()(s,2),u=a[0],c=a[1];return"pong"!==u?"ping"===u?t.socket.send('42/scatter,["pong"]'):"paired"===u?e(c):"rekey"===u?n():"api"===u?r(c):"event"===u?i(c):void 0:void 0};var e=function(e){if(t.paired=e,t.paired){var n=A.getAppKey(),r=-1<t.appkey.indexOf("appkey:")?B(t.appkey):t.appkey;n&&n===r||(A.setAppKey(r),t.appkey=A.getAppKey())}t.pairingPromise.resolve(e)},n=function(){t.appkey="appkey:"+C(),t.send("rekeyed",{data:{appkey:t.appkey,origin:t.getOrigin()},plugin:t.plugin})},r=function(e){var n=t.openRequests.find(function(t){return t.id===e.id});n&&(t.openRequests=t.openRequests.filter(function(t){return t.id!==e.id}),"object"===m()(e.result)&&null!==e.result&&e.result.hasOwnProperty("isError")?n.reject(e.result):n.resolve(e.result))},i=function(e){var n=e.event,r=e.payload;Object.keys(t.eventHandlers).length&&Object.keys(t.eventHandlers).map(function(e){t.eventHandlers[e](n,r)})}},o=function(t,e){return n||(e?"local.get-scatter.com:".concat(t):"127.0.0.1:".concat(t))},e.next=4,u()(s.a.mark(function t(){var e,r,i;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!n){t.next=2;break}return t.abrupt("return",[50006]);case 2:e=function(t,e){return fetch(t).then(function(t){return t.text()}).then(function(t){return e("scatter"===t)}).catch(function(){return e(!1)})},50005,r=[],w()([,,,,,].keys()).map(function(t){var n=50005+1500*t;return Promise.all([e("https://"+o(n+1,!0),function(t){return t?r.push(n+1):null}),e("http://"+o(n,!1),function(t){return t?r.push(n):null})])}),i=0;case 7:if(!(50>i)){t.next=15;break}if(!r.length){t.next=10;break}return t.abrupt("break",15);case 10:return t.next=12,new Promise(function(t){return setTimeout(function(){return t(!0)},2)});case 12:i++,t.next=7;break;case 15:return t.abrupt("return",r.length?r.sort(function(t,e){return e%2?t%2?0:-1:1}):[50006,50005]);case 16:case"end":return t.stop()}},t)}))();case 4:a=e.sent,c=function(t){var e,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;n||(e=new Promise(function(t){return n=t}));var r=!(t%2),i=o(t,r),s=r?"wss://":"ws://",a="".concat(s).concat(i).concat(L),u=new R.a(a);return u.onerror=function(){return n(!1)},u.onopen=function(){return n(u)},e},h=0;case 7:if(!(h<a.length)){e.next=21;break}return e.next=10,c(a[h]);case 10:if(!(f=e.sent)){e.next=18;break}return t.socket=f,t.send(),t.connected=!0,t.pair(!0).then(function(){return r(!0)}),i(),e.abrupt("break",21);case 18:h++,e.next=7;break;case 21:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}())])}},{key:"isConnected",value:function(){return this.connected}},{key:"isPaired",value:function(){return this.paired}},{key:"disconnect",value:function(){return console.log("disconnect"),this.socket&&this.socket.close(),!0}},{key:"sendApiRequest",value:function(t){var e=this;return new Promise(function(n,r){return"identityFromPermissions"!==t.type||e.paired?void e.pair().then(function(){if(!e.paired)return r({code:"not_paired",message:"The user did not allow this app to connect to their Scatter"});t.id=C(),t.appkey=e.appkey,t.nonce=A.getNonce()||0;var i=C();t.nextNonce=B(i),A.setNonce(i),t.hasOwnProperty("payload")&&!t.payload.hasOwnProperty("origin")&&(t.payload.origin=e.getOrigin()),e.openRequests.push(Object.assign(t,{resolve:n,reject:r})),e.send("api",{data:t,plugin:e.plugin})}):n(!1)})}},{key:"pair",value:function(){var t=this,e=!!(0<arguments.length&&void 0!==arguments[0])&&arguments[0];return new Promise(function(n,r){t.pairingPromise={resolve:n,reject:r},t.send("pair",{data:{appkey:t.appkey,origin:t.getOrigin(),passthrough:e},plugin:t.plugin})})}},{key:"send",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;null===t&&null===e?this.socket.send("40/scatter"):this.socket.send("42/scatter,"+JSON.stringify([t,Object.assign(e,{device:I.a,uuid:this.uuid})]))}},{key:"getOrigin",value:function(){return t.getOriginOrPlugin(this.plugin)}}],[{key:"getOriginOrPlugin",value:function(t){var e;return"www."===(e="undefined"==typeof location?t:location.hasOwnProperty("hostname")&&location.hostname.length&&"localhost"!==location.hostname?location.hostname:t).substr(0,4)&&(e=e.replace("www.","")),e}}]),t}(),F=function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"";h()(this,t),this.name=e,this.type=n}return l()(t,[{key:"isSignatureProvider",value:function(){return this.type===d}},{key:"isValid",value:function(){return Object.keys(r).map(function(t){return r[t]}).includes(this.type)}}],[{key:"placeholder",value:function(){return new t}},{key:"fromJson",value:function(e){return Object.assign(t.placeholder(),e)}}]),t}(),j={EOS:"eos",ETH:"eth",TRX:"trx"},W=(Object.keys(j).map(function(t){return{key:t,value:j[t]}}),function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:j.EOS,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null;h()(this,t),this.blockchain=e,this.contract=n,this.symbol=r,this.name=i||r,this.decimals=o}return l()(t,null,[{key:"placeholder",value:function(){return new t}},{key:"fromJson",value:function(t){return Object.assign(this.placeholder(),t)}}]),t}()),U=function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"https",r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:j.EOS,s=5<arguments.length&&void 0!==arguments[5]?arguments[5]:"";h()(this,t),this.name=e,this.protocol=n,this.host=r,this.port=i,this.blockchain=o,this.chainId=s.toString(),this.token=null}return l()(t,[{key:"fullhost",value:function(){return"".concat(this.protocol,"://").concat(this.host).concat(this.port?":":"").concat(this.port)}},{key:"unique",value:function(){return("".concat(this.blockchain,":")+(this.chainId.length?"chain:".concat(this.chainId):"".concat(this.host,":").concat(this.port))).toLowerCase()}}],[{key:"placeholder",value:function(){return new t}},{key:"fromJson",value:function(e){var n=Object.assign(t.placeholder(),e);return n.chainId=n.chainId?n.chainId.toString():"",n.token=e.hasOwnProperty("token")&&e.token?W.fromJson(e.token):null,n}}]),t}(),D=n(3),N=n.n(D),q={disconnect:"disconnect",isConnected:"isConnected",isPaired:"isPaired",addEventHandler:"addEventHandler",removeEventHandler:"removeEventHandler",listen:"listen",getVersion:"getVersion",getIdentity:"getIdentity",getAllAccountsFor:"getAllAccountsFor",getIdentityFromPermissions:"getIdentityFromPermissions",forgetIdentity:"forgetIdentity",updateIdentity:"updateIdentity",authenticate:"authenticate",getArbitrarySignature:"getArbitrarySignature",getPublicKey:"getPublicKey",linkAccount:"linkAccount",hasAccountFor:"hasAccountFor",suggestNetwork:"suggestNetwork",requestTransfer:"requestTransfer",getAvatar:"getAvatar",requestSignature:"requestSignature",createTransaction:"createTransaction",addToken:"addToken"},K=(i={},N()(i,q.getIdentity,"login"),N()(i,q.getAllAccountsFor,"loginAll"),N()(i,q.forgetIdentity,"logout"),N()(i,q.getIdentityFromPermissions,"checkLogin"),i),Y=function(){function t(e,n,r){h()(this,t);var i=function(t){return function(){throw console.error("".concat(e," does not support the ").concat(t," method.")),new Error("".concat(e," does not support the ").concat(t," method."))}};Object.keys(q).map(function(t){return function(t,e){void 0===r[e]&&(r[e]=t||i(e)),K[e]&&void 0===r[K[e]]&&(r[K[e]]=r[e]?r[e]:i(e))}(n[t],t)})}return l()(t,null,[{key:"bindBasics",value:function(t){t.account=function(e){return t.identity&&t.identity.accounts?t.identity.accounts.find(function(t){return t.blockchain===e}):void 0}}}]),t}(),X=n(7),H=n.n(X),V=n(8),J=n.n(V),$=n(9),z=n.n($),G=function(t){function e(t,n){var r;return h()(this,e),(r=H()(this,J()(e).call(this,"LocalSocket",p))).name="LocalSocket",r.context=t,r.holderFns=n,r}return z()(e,t),l()(e,[{key:"connect",value:function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return new Promise(function(r){if(!t||!t.length)throw new Error("You must specify a name for this connection");n=Object.assign({initTimeout:1e3,linkTimeout:3e3},n),e.socketService=new M(t,n.linkTimeout),e.socketService.link().then(function(){var t=u()(s.a.mark(function t(n){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt("return",r(!1));case 2:return e.holderFns.get().isExtension=!1,e.holderFns.get().wallet||(e.holderFns.get().wallet=e.name),t.abrupt("return",r(e.socketService));case 5:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}())})}},{key:"runAfterInterfacing",value:function(){var t=u()(s.a.mark(function t(){var e=this;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.holderFns.get().addEventHandler(function(t,n){return e.eventHandler(t,n)},"internal"),t.next=3,this.holderFns.get().getIdentityFromPermissions();case 3:return this.holderFns.get().identity=t.sent,t.abrupt("return",!0);case 5:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){return e.getMethods(this)}},{key:"eventHandler",value:function(){var t=u()(s.a.mark(function t(e){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=e,t.next=t.t0===rt.Disconnected?3:t.t0===rt.LoggedOut?5:9;break;case 3:return this.holderFns.get().identity=null,t.abrupt("break",9);case 5:return t.next=7,this.holderFns.get().getIdentityFromPermissions();case 7:return this.holderFns.get().identity=t.sent,t.abrupt("break",9);case 9:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}],[{key:"getMethods",value:function(t){var e,n=function(e,n){return(e||n)&&(t.holderFns.get().identity=e),n||e};return e={},N()(e,q.disconnect,function(){return t.socketService.disconnect()}),N()(e,q.isConnected,function(){return t.socketService.isConnected()}),N()(e,q.isPaired,function(){return t.socketService.isPaired()}),N()(e,q.addEventHandler,function(e){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;return t.socketService.addEventHandler(e,n)}),N()(e,q.removeEventHandler,function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return t.socketService.removeEventHandler(e)}),N()(e,q.listen,function(e){return t.socketService.addEventHandler(e)}),N()(e,q.getVersion,function(){return t.socketService.sendApiRequest({type:"getVersion",payload:{}})}),N()(e,q.getIdentity,function(e){return t.socketService.sendApiRequest({type:"getOrRequestIdentity",payload:{fields:e||{accounts:[t.holderFns.get().network]}}}).then(n)}),N()(e,q.getAllAccountsFor,function(e){return t.socketService.sendApiRequest({type:"getAllAccountsFor",payload:{fields:e}}).then(n)}),N()(e,q.getIdentityFromPermissions,function(){return t.socketService.sendApiRequest({type:"identityFromPermissions",payload:{}}).then(n)}),N()(e,q.forgetIdentity,function(){return t.socketService.sendApiRequest({type:"forgetIdentity",payload:{}}).then(function(t){return n(null,t)})}),N()(e,q.updateIdentity,function(e){var r=e.name,i=e.kyc;return t.socketService.sendApiRequest({type:"updateIdentity",payload:{name:r,kyc:i}}).then(function(t){return t?n(t):null})}),N()(e,q.authenticate,function(e){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return t.socketService.sendApiRequest({type:"authenticate",payload:{nonce:e,data:n,publicKey:r}})}),N()(e,q.getArbitrarySignature,function(e,n){return t.socketService.sendApiRequest({type:"requestArbitrarySignature",payload:{publicKey:e,data:n}})}),N()(e,q.getPublicKey,function(e){return t.socketService.sendApiRequest({type:"getPublicKey",payload:{blockchain:e}})}),N()(e,q.linkAccount,function(e,n){return t.socketService.sendApiRequest({type:"linkAccount",payload:{account:e,network:n||t.holderFns.get().network}})}),N()(e,q.hasAccountFor,function(e){return t.socketService.sendApiRequest({type:"hasAccountFor",payload:{network:e||t.holderFns.get().network}})}),N()(e,q.suggestNetwork,function(e){return t.socketService.sendApiRequest({type:"requestAddNetwork",payload:{network:e||t.holderFns.get().network}})}),N()(e,q.requestTransfer,function(e,n,r){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{};return t.socketService.sendApiRequest({type:"requestTransfer",payload:{network:e||t.holderFns.get().network,to:n,amount:r,options:i}})}),N()(e,q.getAvatar,function(){return t.socketService.sendApiRequest({type:"getAvatar",payload:{}})}),N()(e,q.requestSignature,function(e){return t.socketService.sendApiRequest({type:"requestSignature",payload:e})}),N()(e,q.createTransaction,function(e,n,r,i){return t.socketService.sendApiRequest({type:"createTransaction",payload:{blockchain:e,actions:n,account:r,network:i||t.holderFns.get().network}})}),N()(e,q.addToken,function(e,n){return t.socketService.sendApiRequest({type:"addToken",payload:{token:e,network:n||t.holderFns.get().network}})}),e}}]),e}(F),Q="https://relay.get-scatter.com:443",Z=function(t){function e(t,n){var r;return h()(this,e),(r=H()(this,J()(e).call(this,"RelaySocket",p))).name="RelaySocket",r.context=t,r.holderFns=n,r}return z()(e,t),l()(e,[{key:"connect",value:function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return new Promise(function(){var r=u()(s.a.mark(function r(i){var o;return s.a.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:if(t&&t.length){r.next=2;break}throw new Error("You must specify a name for this connection");case 2:return n=Object.assign({initTimeout:1e3,linkTimeout:3e3},n),r.next=5,fetch("".concat(Q,"/app/connect/").concat(I.a)).then(function(t){return t.json()});case 5:if(o=r.sent){r.next=8;break}return r.abrupt("return",i(!1));case 8:e.socketService=new M(t,n.linkTimeout),e.socketService.link(o,"relaysock.get-scatter.com:443").then(function(){var t=u()(s.a.mark(function t(n){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt("return",i(!1));case 2:return e.holderFns.get().isExtension=!1,e.holderFns.get().wallet||(e.holderFns.get().wallet=e.name),t.abrupt("return",i(e.socketService));case 5:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}());case 10:case"end":return r.stop()}},r)}));return function(){return r.apply(this,arguments)}}())}},{key:"runAfterInterfacing",value:function(){var t=u()(s.a.mark(function t(){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.holderFns.get().getIdentityFromPermissions();case 2:return this.holderFns.get().identity=t.sent,t.abrupt("return",!0);case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){return G.getMethods(this)}},{key:"eventHandler",value:function(){var t=u()(s.a.mark(function t(e){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=e,t.next=t.t0===rt.Disconnected?3:t.t0===rt.LoggedOut?5:9;break;case 3:return this.holderFns.get().identity=null,t.abrupt("break",9);case 5:return t.next=7,this.holderFns.get().getIdentityFromPermissions();case 7:return this.holderFns.get().identity=t.sent,t.abrupt("break",9);case 9:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}]),e}(F),tt=!1;"undefined"!=typeof window&&"undefined"!=typeof document&&(void 0===window.scatter?document.addEventListener("scatterLoaded",function(){return tt=!0}):tt=!0);var et=function(){var t=u()(s.a.mark(function t(){var e,n,r=arguments;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=0<r.length&&void 0!==r[0]?r[0]:null,n=1<r.length&&void 0!==r[1]?r[1]:0,t.abrupt("return",new Promise(function(t){return e||(e=t),tt?e(!0):5<n?e(!1):void setTimeout(function(){return et(e,n+1)},100)}));case 3:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}(),nt=function(t){function e(t,n){var r;return h()(this,e),(r=H()(this,J()(e).call(this,"InjectedWallet",p))).name="InjectedWallet",r.context=t,r.holderFns=n,r}return z()(e,t),l()(e,[{key:"connect",value:function(){var t=u()(s.a.mark(function t(){var e=this;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise(function(){var t=u()(s.a.mark(function t(n){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,et();case 2:t.sent&&(e.holderFns&&!e.holderFns.get().wallet&&(e.holderFns.get().wallet=e.name),n("injection"));case 4:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()));case 1:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()},{key:"runBeforeInterfacing",value:function(){var t=u()(s.a.mark(function t(){var e,n,r,i,o=this;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return(e=this.context.network)&&(n=window.scatter.getIdentity.bind(window.scatter),r=window.scatter.useIdentity.bind(window.scatter),window.scatter.getIdentity=function(t){return n(t||{accounts:[e]}).then(function(t){return o.holderFns.get().identity=t,r(t),t})},i=window.scatter.suggestNetwork.bind(window.scatter),window.scatter.suggestNetwork=function(t){return i(t||e)}),this.holderFns.get().wallet===this.name&&(window.scatter.wallet=this.name),this.holderFns.set(window.scatter),this.context=this.holderFns.get(),t.abrupt("return",!0);case 6:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"runAfterInterfacing",value:function(){var t=u()(s.a.mark(function t(){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.context.isExtension=!0,this.context.connect=this.connect,t.abrupt("return",!0);case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){return{}}}]),e}(F);n.d(e,"EVENTS",function(){return rt}),n.d(e,"Plugin",function(){return F}),n.d(e,"PluginTypes",function(){return r}),n.d(e,"Blockchains",function(){return j}),n.d(e,"Network",function(){return U}),n.d(e,"SocketService",function(){return M}),n.d(e,"WalletInterface",function(){return Y}),n.d(e,"WALLET_METHODS",function(){return q});var rt={Disconnected:"dced",LoggedOut:"logout"},it=[],ot={},st=function(){function t(){h()(this,t),this.identity=null,this.network=null,g.loadPlugin(new G(this,ot)),g.loadPlugin(new nt(this,ot))}return l()(t,[{key:"useRelay",value:function(){console.log("Using relay"),g.loadPlugin(new Z(this,ot))}},{key:"loadPlugin",value:function(t){if(!t.isValid())throw new Error("".concat(t.name," doesn't seem to be a valid ScatterJS plugin."));g.loadPlugin(t),t.type===d&&(this[t.name]=t.signatureProvider(function(){if(!ot.get().identity)throw new Error("No Identity")},function(){return ot.get().identity}),this[t.name+"Hook"]=t.hookProvider,it.push(t.setSocketService)),t.type===p&&t.init(this,ot,it)}},{key:"connect",value:function(){var t=u()(s.a.mark(function t(e,n){var r;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n||(n={}),this.network=n.hasOwnProperty("network")?n.network:null,r=g.wallets(),t.next=5,Promise.race(r.map(function(t){return t.connect(e,n).then(function(){var e=u()(s.a.mark(function e(n){return s.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!n){e.next=11;break}if("injection"!==n&&it.map(function(t){return t(n)}),"function"!=typeof t.runBeforeInterfacing){e.next=5;break}return e.next=5,t.runBeforeInterfacing();case 5:if(new Y(t.name,t.methods(),ot.get()),"function"!=typeof t.runAfterInterfacing){e.next=9;break}return e.next=9,t.runAfterInterfacing();case 9:return Y.bindBasics(ot.get()),e.abrupt("return",!0);case 11:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}())}).concat(new Promise(function(t){return setTimeout(function(){return t(!1)},n.initTimeout||5e3)})));case 5:return t.abrupt("return",t.sent);case 6:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}]),t}(),at=new Proxy(new(function(){function t(e){h()(this,t),this.scatter=e}return l()(t,[{key:"plugins",value:function(){var t=this;if(!this.scatter.isExtension){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];n.map(function(e){return t.scatter.loadPlugin(e)})}}},{key:"connect",value:function(){var t;return(t=this.scatter).connect.apply(t,arguments)}},{key:"catchAll",value:function(){}}]),t}())(new st),{get:function(t,e){return void 0===t[e]?t.scatter[e]:t[e]}});ot.set=function(t){return at.scatter=t},ot.get=function(){return at.scatter},"undefined"!=typeof window&&(window.ScatterJS=at),at.Plugin=F,at.PluginTypes=r,at.Blockchains=j,at.Network=U,at.Token=W,at.SocketService=M,at.EVENTS=rt,at.WalletInterface=Y,at.WALLET_METHODS=q;e.default=at}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZ19kZWNvZGVyL2xpYi9zdHJpbmdfZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9zaGEuanMvaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9EZXZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9kdXBsZXgtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL2hhc2gtYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGE1MTIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9nZXQtcmFuZG9tLXZhbHVlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtd3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9kZXZpY2UtdXVpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL2dsb2JhbC93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvbWQ1LmpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL3JpcGVtZDE2MC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9zaGEuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYS5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMS5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjI0LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEzODQuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvZGV2aWNlLXV1aWQvbGliL2RldmljZS11dWlkLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvc3JjL3BsdWdpbnMvUGx1Z2luVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvcGx1Z2lucy9QbHVnaW5SZXBvc2l0b3J5LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvc3JjL3NlcnZpY2VzL1N0b3JhZ2VTZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvc3JjL3NlcnZpY2VzL1NvY2tldFNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvcGx1Z2lucy9QbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvbW9kZWxzL0Jsb2NrY2hhaW5zLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvc3JjL21vZGVscy9Ub2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL3NyYy9tb2RlbHMvTmV0d29yay5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL3NyYy9tb2RlbHMvV2FsbGV0SW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvc3JjL3dhbGxldHMvTG9jYWxTb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvd2FsbGV0cy9SZWxheVNvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL3NyYy93YWxsZXRzL0luamVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlc29sdmUiLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImFyZyIsImluZm8iLCJlcnJvciIsImRvbmUiLCJQcm9taXNlIiwidGhlbiIsImZuIiwic2VsZiIsInRoaXMiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImciLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJfdHlwZW9mIiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiZ2xvYmFsIiwiYmFzZTY0IiwiaWVlZTc1NCIsImlzQXJyYXkiLCJrTWF4TGVuZ3RoIiwiQnVmZmVyIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsImVuY29kaW5nT3JPZmZzZXQiLCJFcnJvciIsImFsbG9jVW5zYWZlIiwiZnJvbSIsIkFycmF5QnVmZmVyIiwiYXJyYXkiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsInNsaWNlIiwiZnJvbVN0cmluZyIsImlzQnVmZmVyIiwibGVuIiwiY2hlY2tlZCIsImNvcHkiLCJidWZmZXIiLCJ2YWwiLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwic2l6ZSIsInRvU3RyaW5nIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiZW5kIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsIlN0cmluZyIsInJlYWQiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwicHVzaCIsImNoYXJDb2RlQXQiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJTbG93QnVmZmVyIiwiYWxsb2MiLCJJTlNQRUNUX01BWF9CWVRFUyIsImZvbyIsInN1YmFycmF5IiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsImZpbGwiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsIngiLCJ5IiwiY29uY2F0IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJtYXRjaCIsImpvaW4iLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIkFycmF5IiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsInNldCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInJlcGxhY2UiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJwbmEiLCJvYmplY3RLZXlzIiwia2V5cyIsIkR1cGxleCIsInV0aWwiLCJpbmhlcml0cyIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJ2IiwibWV0aG9kIiwib3B0aW9ucyIsInJlYWRhYmxlIiwiYWxsb3dIYWxmT3BlbiIsIm9uY2UiLCJvbmVuZCIsIl93cml0YWJsZVN0YXRlIiwiZW5kZWQiLCJuZXh0VGljayIsIm9uRW5kTlQiLCJoaWdoV2F0ZXJNYXJrIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJfZGVzdHJveSIsImNiIiwiUmVmbGVjdE93bktleXMiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsInJlY2VpdmVyIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJOdW1iZXJJc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCIkZ2V0TWF4TGlzdGVuZXJzIiwiX2FkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsIndhcm5lZCIsInciLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIl9vbmNlV3JhcCIsInN0YXRlIiwiZmlyZWQiLCJ3cmFwRm4iLCJ3cmFwcGVkIiwicmVtb3ZlTGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50Iiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVyIiwibWVzc2FnZSIsImNvbnRleHQiLCJoYW5kbGVyIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJvbiIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsImluZGV4IiwicG9wIiwic3BsaWNlT25lIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIl90eXBlb2YyIiwiaXRlcmF0b3IiLCJvYmplY3RUb1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1JlZ0V4cCIsInJlIiwiaXNPYmplY3QiLCJpc0RhdGUiLCJpc0Vycm9yIiwiaXNGdW5jdGlvbiIsImlzUHJpbWl0aXZlIiwiUmVmZXJlbmNlRXJyb3IiLCJfc2V0UHJvdG90eXBlT2YiLCJjb3B5UHJvcHMiLCJTYWZlQnVmZmVyIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJBc3luY0l0ZXJhdG9yIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJyZXN1bHQiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJyZXZlcnNlIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsImNhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiU3RyZWFtIiwiRUUiLCJUcmFuc2Zvcm0iLCJQYXNzVGhyb3VnaCIsInBpcGUiLCJkZXN0Iiwic291cmNlIiwib25kYXRhIiwiY2h1bmsiLCJwYXVzZSIsIm9uZHJhaW4iLCJyZXN1bWUiLCJfaXNTdGRpbyIsIm9uY2xvc2UiLCJkaWRPbkVuZCIsImRlc3Ryb3kiLCJvbmVycm9yIiwiY2xlYW51cCIsInNldEltbWVkaWF0ZSIsIkNvcmtlZFJlcXVlc3QiLCJfdGhpcyIsImNvcmtSZXEiLCJjYWxsYmFjayIsInBlbmRpbmdjYiIsImNvcmtlZFJlcXVlc3RzRnJlZSIsIm9uQ29ya2VkRmluaXNoIiwiYXN5bmNXcml0ZSIsIldyaXRhYmxlU3RhdGUiLCJpbnRlcm5hbFV0aWwiLCJkZXByZWNhdGUiLCJPdXJVaW50OEFycmF5IiwicmVhbEhhc0luc3RhbmNlIiwiZGVzdHJveUltcGwiLCJub3AiLCJzdHJlYW0iLCJpc0R1cGxleCIsIm9iamVjdE1vZGUiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJod20iLCJ3cml0YWJsZUh3bSIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJmaW5hbENhbGxlZCIsIm5lZWREcmFpbiIsImVuZGluZyIsImZpbmlzaGVkIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwiZGVmYXVsdEVuY29kaW5nIiwid3JpdGluZyIsImNvcmtlZCIsInN5bmMiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlY2IiLCJ3cml0ZWxlbiIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsImZpbmlzaE1heWJlIiwiZXJyb3JFbWl0dGVkIiwib253cml0ZUVycm9yIiwibmVlZEZpbmlzaCIsImJ1ZmZlcmVkUmVxdWVzdCIsImNsZWFyQnVmZmVyIiwiYWZ0ZXJXcml0ZSIsImxhc3RCdWZmZXJlZFJlcXVlc3QiLCJwcmVmaW5pc2hlZCIsImJ1ZmZlcmVkUmVxdWVzdENvdW50IiwiX3dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsImZpbmFsIiwiX2ZpbmFsIiwiZG9Xcml0ZSIsIm9ud3JpdGVEcmFpbiIsImhvbGRlciIsImFsbEJ1ZmZlcnMiLCJpc0J1ZiIsImNhbGxGaW5hbCIsIm5lZWQiLCJwcmVmaW5pc2giLCJnZXRCdWZmZXIiLCJjdXJyZW50IiwiXyIsImhhc0luc3RhbmNlIiwiX3VpbnQ4QXJyYXlUb0J1ZmZlciIsIndyaXRlQWZ0ZXJFbmQiLCJ2YWxpZCIsInZhbGlkQ2h1bmsiLCJuZXdDaHVuayIsImRlY29kZUNodW5rIiwibGFzdCIsIndyaXRlT3JCdWZmZXIiLCJjb3JrIiwidW5jb3JrIiwic2V0RGVmYXVsdEVuY29kaW5nIiwiZW5kV3JpdGFibGUiLCJfdW5kZXN0cm95IiwidW5kZXN0cm95IiwiU3RyaW5nRGVjb2RlciIsIm5iIiwiZW5jIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInRleHQiLCJ1dGYxNlRleHQiLCJ1dGYxNkVuZCIsImZpbGxMYXN0IiwidXRmOEZpbGxMYXN0IiwiYmFzZTY0VGV4dCIsImJhc2U2NEVuZCIsInNpbXBsZVdyaXRlIiwic2ltcGxlRW5kIiwibGFzdE5lZWQiLCJsYXN0VG90YWwiLCJsYXN0Q2hhciIsInV0ZjhDaGVja0J5dGUiLCJieXRlIiwidXRmOENoZWNrRXh0cmFCeXRlcyIsInRvdGFsIiwidXRmOENoZWNrSW5jb21wbGV0ZSIsIkhhc2giLCJibG9ja1NpemUiLCJmaW5hbFNpemUiLCJfYmxvY2siLCJfZmluYWxTaXplIiwiX2Jsb2NrU2l6ZSIsIl9sZW4iLCJ1cGRhdGUiLCJibG9jayIsImFjY3VtIiwiYXNzaWduZWQiLCJyZW1haW5kZXIiLCJfdXBkYXRlIiwiZGlnZXN0IiwicmVtIiwiYml0cyIsImxvd0JpdHMiLCJoaWdoQml0cyIsImhhc2giLCJfaGFzaCIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0bXAiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsIm51bSIsIm91dHB1dCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJhYnMiLCJsb2ciLCJMTjIiLCJSZWFkYWJsZVN0YXRlIiwiRUVsaXN0ZW5lckNvdW50IiwiZGVidWdVdGlsIiwiZGVidWciLCJkZWJ1Z2xvZyIsIkJ1ZmZlckxpc3QiLCJrUHJveHlFdmVudHMiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsInBpcGVzIiwicGlwZXNDb3VudCIsImZsb3dpbmciLCJlbmRFbWl0dGVkIiwicmVhZGluZyIsIm5lZWRSZWFkYWJsZSIsImVtaXR0ZWRSZWFkYWJsZSIsInJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lU2NoZWR1bGVkIiwiYXdhaXREcmFpbiIsInJlYWRpbmdNb3JlIiwiZGVjb2RlciIsIl9yZWFkIiwicmVhZGFibGVBZGRDaHVuayIsImFkZFRvRnJvbnQiLCJza2lwQ2h1bmtDaGVjayIsImVtaXRSZWFkYWJsZSIsIm9uRW9mQ2h1bmsiLCJjaHVua0ludmFsaWQiLCJhZGRDaHVuayIsIm1heWJlUmVhZE1vcmUiLCJuZWVkTW9yZURhdGEiLCJpc1BhdXNlZCIsInNldEVuY29kaW5nIiwiTUFYX0hXTSIsImhvd011Y2hUb1JlYWQiLCJoZWFkIiwiY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsiLCJlbWl0UmVhZGFibGVfIiwiZmxvdyIsIm1heWJlUmVhZE1vcmVfIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImNsZWFyIiwiaGFzU3RyaW5ncyIsInRhaWwiLCJjb3B5RnJvbUJ1ZmZlclN0cmluZyIsImNvcHlGcm9tQnVmZmVyIiwiZnJvbUxpc3RQYXJ0aWFsIiwiZW5kUmVhZGFibGUiLCJlbmRSZWFkYWJsZU5UIiwieHMiLCJuT3JpZyIsImRvUmVhZCIsInBpcGVPcHRzIiwiZW5kRm4iLCJzdGRvdXQiLCJzdGRlcnIiLCJ1bnBpcGUiLCJvbnVucGlwZSIsInVucGlwZUluZm8iLCJoYXNVbnBpcGVkIiwib25maW5pc2giLCJjbGVhbmVkVXAiLCJwaXBlT25EcmFpbiIsImluY3JlYXNlZEF3YWl0RHJhaW4iLCJldmVudCIsImRlc3RzIiwic3BsaWNlIiwiZXYiLCJwYXVzZWQiLCJfZnJvbUxpc3QiLCJlbWl0RXJyb3JOVCIsInJlYWRhYmxlRGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJhZnRlclRyYW5zZm9ybSIsInRzIiwiX3RyYW5zZm9ybVN0YXRlIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJ0cmFuc2Zvcm0iLCJfdHJhbnNmb3JtIiwiZmx1c2giLCJfZmx1c2giLCJfdGhpczIiLCJlcnIyIiwic2NvcGUiLCJUaW1lb3V0IiwiaWQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwiaXRlbSIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsImRldmljZV91dWlkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJuYXZpZ2F0b3IiLCJzY3JlZW4iLCJkdSIsIkRldmljZVVVSUQiLCJwYXJzZSIsImR1YSIsImxhbmd1YWdlIiwicGxhdGZvcm0iLCJvcyIsImNwdUNvcmVzIiwiY29sb3JEZXB0aCIsImRldmljZSIsImhhc2hNRDUiLCJfY2xhc3NDYWxsQ2hlY2siLCJjdXN0b20iLCJyZWdpc3RlckltbWVkaWF0ZSIsImh0bWwiLCJjaGFubmVsIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiZG9jdW1lbnQiLCJhdHRhY2hUbyIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImNyZWF0ZUVsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwicmFuZG9tIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwidGFzayIsImNvbmZpZyIsImxvY2FsU3RvcmFnZSIsIm1zZyIsInRyYWNlIiwiSGFzaEJhc2UiLCJfYmxvY2tPZmZzZXQiLCJfbGVuZ3RoIiwiX2ZpbmFsaXplZCIsInByZWZpeCIsInRocm93SWZOb3RTdHJpbmdPckJ1ZmZlciIsImNhcnJ5IiwiX2RpZ2VzdCIsIksiLCJXIiwiU2hhMjU2IiwiX3ciLCJjaCIsInoiLCJtYWoiLCJzaWdtYTAiLCJzaWdtYTEiLCJnYW1tYTAiLCJfYSIsIl9iIiwiX2MiLCJfZCIsIl9lIiwiX2YiLCJfZyIsIl9oIiwiTSIsImYiLCJoIiwiVDEiLCJUMiIsIkgiLCJTaGE1MTIiLCJDaCIsInhsIiwiR2FtbWEwIiwiR2FtbWEwbCIsIkdhbW1hMSIsIkdhbW1hMWwiLCJnZXRDYXJyeSIsIl9haCIsIl9iaCIsIl9jaCIsIl9kaCIsIl9laCIsIl9maCIsIl9naCIsIl9oaCIsIl9hbCIsIl9ibCIsIl9jbCIsIl9kbCIsIl9lbCIsIl9mbCIsIl9nbCIsIl9obCIsImFoIiwiYmgiLCJkaCIsImVoIiwiZmgiLCJnaCIsImhoIiwiYWwiLCJibCIsImNsIiwiZGwiLCJlbCIsImZsIiwiZ2wiLCJobCIsInhoIiwiZ2FtbWEwbCIsImdhbW1hMSIsImdhbW1hMWwiLCJXaTdoIiwiV2k3bCIsIldpMTZoIiwiV2kxNmwiLCJXaWwiLCJXaWgiLCJtYWpoIiwibWFqbCIsInNpZ21hMGgiLCJzaWdtYTBsIiwic2lnbWExaCIsInNpZ21hMWwiLCJLaWgiLCJLaWwiLCJjaGgiLCJjaGwiLCJ0MWwiLCJ0MWgiLCJ0MmwiLCJ0MmgiLCJ3cml0ZUludDY0QkUiLCJhcnJheVdpdGhvdXRIb2xlcyIsIml0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwiYXJyYXlXaXRoSG9sZXMiLCJpdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm5vbkl0ZXJhYmxlUmVzdCIsIm5vZGVDcnlwdG8iLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJtc0NyeXB0byIsInJhbmRvbUJ5dGVzIiwiTUQ1IiwiUklQRU1EMTYwIiwic2hhIiwiQmFzZSIsImFsZyIsIndzIiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0IiwiYXJyMiIsIl9uIiwiX3MiLCJfaSIsIndpbiIsIkFSUkFZMTYiLCJyb3RsIiwiZm5GIiwiayIsImZuRyIsImZuSCIsImZuSSIsInpsIiwienIiLCJzbCIsInNyIiwiaHIiLCJmbjEiLCJmbjIiLCJmbjMiLCJmbjQiLCJmbjUiLCJ3b3JkcyIsImFyIiwiYnIiLCJjciIsImRyIiwidGwiLCJ0ciIsImFsZ29yaXRobSIsIkFsZ29yaXRobSIsInNoYTEiLCJzaGEyMjQiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJTaGEiLCJyb3RsMzAiLCJmdCIsIlNoYTEiLCJyb3RsNSIsIlNoYTIyNCIsIlNIQTUxMiIsIlNoYTM4NCIsIkNpcGhlckJhc2UiLCJoYXNoTW9kZSIsIl9maW5hbE9yRGlnZXN0IiwiX19maW5hbCIsIl9kZWNvZGVyIiwiX2VuY29kaW5nIiwiaW5wdXRFbmMiLCJvdXRwdXRFbmMiLCJvdXREYXRhIiwiX3RvU3RyaW5nIiwic2V0QXV0b1BhZGRpbmciLCJnZXRBdXRoVGFnIiwic2V0QXV0aFRhZyIsInNldEFBRCIsImZpbiIsIklTX0JPVF9SRUdFWFAiLCJSZWdFeHAiLCJkZWZPcHRpb25zIiwicGl4ZWxEZXB0aCIsInJlc29sdXRpb24iLCJpc0F1dGhvcml0YXRpdmUiLCJzaWxrQWNjZWxlcmF0ZWQiLCJpc0tpbmRsZUZpcmUiLCJpc0Rlc2t0b3AiLCJpc01vYmlsZSIsImlzVGFibGV0IiwiaXNXaW5kb3dzIiwiaXNMaW51eCIsImlzTGludXg2NCIsImlzQ2hyb21lT1MiLCJpc01hYyIsImlzaVBhZCIsImlzaVBob25lIiwiaXNpUG9kIiwiaXNBbmRyb2lkIiwiaXNTYW1zdW5nIiwiaXNTbWFydFRWIiwiaXNSYXNwYmVycnkiLCJpc0JsYWNrYmVycnkiLCJpc1RvdWNoU2NyZWVuIiwiaXNPcGVyYSIsImlzSUUiLCJpc0VkZ2UiLCJpc0lFQ29tcGF0aWJpbGl0eU1vZGUiLCJpc1NhZmFyaSIsImlzRmlyZWZveCIsImlzV2Via2l0IiwiaXNDaHJvbWUiLCJpc0tvbnF1ZXJvciIsImlzT21uaVdlYiIsImlzU2VhTW9ua2V5IiwiaXNGbG9jayIsImlzQW1heWEiLCJpc1BoYW50b21KUyIsImlzRXBpcGhhbnkiLCJfVmVyc2lvbnMiLCJFZGdlIiwiRmlyZWZveCIsIklFIiwiQ2hyb21lIiwiQ2hyb21pdW0iLCJTYWZhcmkiLCJPcGVyYSIsIlBzMyIsIlBzcCIsIkFtYXlhIiwiU2VhTW9ua2V5IiwiT21uaVdlYiIsIkZsb2NrIiwiRXBpcGhhbnkiLCJXaW5KcyIsIlBoYW50b21KUyIsIlVDIiwiX0Jyb3dzZXJzIiwiS29ucXVlcm9yIiwiUFMzIiwiUFNQIiwiX09TIiwiV2luZG93czEwIiwiV2luZG93czgxIiwiV2luZG93czgiLCJXaW5kb3dzNyIsIlVua25vd25XaW5kb3dzIiwiV2luZG93c1Zpc3RhIiwiV2luZG93czIwMDMiLCJXaW5kb3dzWFAiLCJXaW5kb3dzMjAwMCIsIldpbmRvd3NQaG9uZTgiLCJPU1hDaGVldGFoIiwiT1NYUHVtYSIsIk9TWEphZ3VhciIsIk9TWFBhbnRoZXIiLCJPU1hUaWdlciIsIk9TWExlb3BhcmQiLCJPU1hTbm93TGVvcGFyZCIsIk9TWExpb24iLCJPU1hNb3VudGFpbkxpb24iLCJPU1hNYXZlcmlja3MiLCJPU1hZb3NlbWl0ZSIsIk9TWEVsQ2FwaXRhbiIsIk9TWFNpZXJyYSIsIk1hYyIsIkxpbnV4IiwiTGludXg2NCIsIkNocm9tZU9TIiwiV2lpIiwiaVBhZCIsImlQaG9uZSIsIkJhZGEiLCJDdXJsIiwiX1BsYXRmb3JtIiwiV2luZG93cyIsIldpbmRvd3NQaG9uZSIsIlBsYXlzdGF0aW9uIiwiaVBvZCIsIkFuZHJvaWQiLCJCbGFja2JlcnJ5IiwiU2Ftc3VuZyIsIkRlZmF1bHRBZ2VudCIsImlzQmFkYSIsImlzQm90IiwiaXNDdXJsIiwiaXNBbmRyb2lkVGFibGV0IiwiaXNXaW5KcyIsImlzU2lsayIsImlzQ2FwdGl2ZSIsImlzVUMiLCJnZW9JcCIsImhhc2hJbnQiLCJyb3RhdGVMZWZ0IiwibFZhbHVlIiwiaVNoaWZ0Qml0cyIsImFkZFVuc2lnbmVkIiwibFgiLCJsWSIsImxYNCIsImxZNCIsImxYOCIsImxZOCIsImxSZXN1bHQiLCJnRkYiLCJhYyIsImdGIiwiZ0dHIiwiZ0ciLCJnSEgiLCJnSCIsImdJSSIsImdJIiwid29yZFRvSGV4IiwibENvdW50Iiwid29yZFRvSGV4VmFsdWUiLCJ3b3JkVG9IZXhWYWx1ZVRlbXAiLCJBQSIsIkJCIiwiQ0MiLCJERCIsImxXb3JkQ291bnQiLCJsTWVzc2FnZUxlbmd0aCIsImxOdW1iZXJPZldvcmRzVGVtcDEiLCJsTnVtYmVyT2ZXb3JkcyIsImxXb3JkQXJyYXkiLCJsQnl0ZVBvc2l0aW9uIiwibEJ5dGVDb3VudCIsImNvbnZlcnRUb1dvcmRBcnJheSIsInV0ZnRleHQiLCJ1dGY4RW5jb2RlIiwiQWdlbnQiLCJnZXRCcm93c2VyIiwidGVzdCIsIiQxIiwiZ2V0QnJvd3NlclZlcnNpb24iLCIkMiIsImdldE9TIiwiZ2V0UGxhdGZvcm0iLCJpc1dpbmRvd3NQaG9uZSIsImlzaVNhbXN1bmciLCJ0ZXN0Q29tcGF0aWJpbGl0eU1vZGUiLCJ1YSIsInRyaWRlbnRWZXJzaW9uIiwidGVzdFNpbGsiLCJTaWxrQWNjZWxlcmF0ZWQiLCJ0ZXN0S2luZGxlRmlyZSIsInRlc3RDYXB0aXZlTmV0d29yayIsInRlc3RNb2JpbGUiLCJ0ZXN0VGFibGV0IiwidGVzdE5naW54R2VvSVAiLCJoZWFkZXJzIiwidGVzdEJvdCIsImV4ZWMiLCJ0ZXN0U21hcnRUViIsInRlc3RBbmRyb2lkVGFibGV0IiwidGVzdFRvdWNoU3VwcG9ydCIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsImdldExhZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJicm93c2VyTGFuZ3VhZ2UiLCJzeXN0ZW1MYW5ndWFnZSIsImdldENvbG9yRGVwdGgiLCJnZXRTY3JlZW5SZXNvbHV0aW9uIiwiYXZhaWxXaWR0aCIsImF2YWlsSGVpZ2h0IiwiZ2V0UGl4ZWxEZXB0aCIsImdldENQVSIsImhhcmR3YXJlQ29uY3VycmVuY3kiLCJ1c2VyQWdlbnQiLCJjdXN0b21EYXRhIiwidG1wVXVpZCIsIkJMT0NLQ0hBSU5fU1VQUE9SVCIsIldBTExFVF9TVVBQT1JUIiwiUGx1Z2luUmVwb3NpdG9yeSIsImNsYXNzQ2FsbENoZWNrX2RlZmF1bHQiLCJwbHVnaW5zIiwicGx1Z2luIiwiZmlsdGVyIiwiUGx1Z2luVHlwZXMiLCJzaWduYXR1cmVQcm92aWRlcnMiLCJtYXAiLCJmaW5kIiwiYWxsIiwiYXN5bmNUb0dlbmVyYXRvcl9kZWZhdWx0IiwicmVnZW5lcmF0b3JfZGVmYXVsdCIsImdldEVuZG9yc2VkTmV0d29yayIsInN0b3JhZ2UiLCJnZXRXaW5kb3ciLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJTdG9yYWdlU2VydmljZSIsImFwcGtleSIsIm5vbmNlIiwic3VmZml4IiwiY3JlYXRlSGFzaCIsIlNvY2tldFNlcnZpY2UiLCJfcGx1Z2luIiwiX3RpbWVvdXQiLCJ1dWlkIiwic29ja2V0IiwiY29ubmVjdGVkIiwicGFpcmVkIiwib3BlblJlcXVlc3RzIiwicGFpcmluZ1Byb21pc2UiLCJldmVudEhhbmRsZXJzIiwiZ2V0QXBwS2V5IiwiX3V1aWQiLCJzb2NrZXRIb3N0IiwicmFjZSIsInNldHVwU29ja2V0IiwiSlNPTiIsInNsaWNlZFRvQXJyYXlfZGVmYXVsdCIsInNlbmQiLCJtc2dfcGFpcmVkIiwibXNnX3Jla2V5IiwibXNnX2FwaSIsImV2ZW50X2FwaSIsInNhdmVkS2V5IiwiaGFzaGVkIiwic2V0QXBwS2V5Iiwib3JpZ2luIiwiZ2V0T3JpZ2luIiwicmVzcG9uc2UiLCJvcGVuUmVxdWVzdCIsInR5cGVvZl9kZWZhdWx0IiwicGF5bG9hZCIsImdldEhvc3RuYW1lIiwicG9ydCIsInNzbCIsImNoZWNrUG9ydCIsImhvc3QiLCJmZXRjaCIsImF2YWlsYWJsZVBvcnRzIiwidG9Db25zdW1hYmxlQXJyYXlfZGVmYXVsdCIsIl9wb3J0IiwidHJpZXMiLCJzb3J0IiwicG9ydHMiLCJ0cnlTb2NrZXQiLCJwcm9taXNlIiwicmVzb2x2ZXIiLCJob3N0bmFtZSIsInByb3RvY29sIiwib25vcGVuIiwicGFpciIsInJlcXVlc3QiLCJnZXROb25jZSIsIm5leHROb25jZSIsInNldE5vbmNlIiwiYXNzaWduIiwicGFzc3Rocm91Z2giLCJzdHJpbmdpZnkiLCJnZXRPcmlnaW5PclBsdWdpbiIsImxvY2F0aW9uIiwiUGx1Z2luIiwiX25hbWUiLCJfdHlwZSIsImpzb24iLCJwbGFjZWhvbGRlciIsIkJsb2NrY2hhaW5zIiwiRU9TIiwiRVRIIiwiVFJYIiwiVG9rZW4iLCJibG9ja2NoYWluIiwiY29udHJhY3QiLCJzeW1ib2wiLCJkZWNpbWFscyIsIk5ldHdvcmsiLCJfcHJvdG9jb2wiLCJfaG9zdCIsImNoYWluSWQiLCJ0b2tlbiIsImZyb21Kc29uIiwiV0FMTEVUX01FVEhPRFMiLCJkaXNjb25uZWN0IiwiaXNDb25uZWN0ZWQiLCJpc1BhaXJlZCIsImFkZEV2ZW50SGFuZGxlciIsInJlbW92ZUV2ZW50SGFuZGxlciIsImxpc3RlbiIsImdldFZlcnNpb24iLCJnZXRJZGVudGl0eSIsImdldEFsbEFjY291bnRzRm9yIiwiZ2V0SWRlbnRpdHlGcm9tUGVybWlzc2lvbnMiLCJmb3JnZXRJZGVudGl0eSIsInVwZGF0ZUlkZW50aXR5IiwiYXV0aGVudGljYXRlIiwiZ2V0QXJiaXRyYXJ5U2lnbmF0dXJlIiwiZ2V0UHVibGljS2V5IiwibGlua0FjY291bnQiLCJoYXNBY2NvdW50Rm9yIiwic3VnZ2VzdE5ldHdvcmsiLCJyZXF1ZXN0VHJhbnNmZXIiLCJnZXRBdmF0YXIiLCJyZXF1ZXN0U2lnbmF0dXJlIiwiY3JlYXRlVHJhbnNhY3Rpb24iLCJhZGRUb2tlbiIsIkFMVEVSTkFURVMiLCJfQUxURVJOQVRFUyIsImRlZmluZVByb3BlcnR5X2RlZmF1bHQiLCJXYWxsZXRJbnRlcmZhY2UiLCJpZGVudGlmaWVyIiwibWV0aG9kcyIsInVuYXZhaWxhYmxlIiwiYmluZFRvQ29udGV4dCIsImFjY291bnQiLCJpZGVudGl0eSIsImFjY291bnRzIiwiTG9jYWxTb2NrZXQiLCJob2xkZXJGbnMiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuX2RlZmF1bHQiLCJnZXRQcm90b3R5cGVPZl9kZWZhdWx0IiwicGx1Z2luTmFtZSIsImluaXRUaW1lb3V0IiwibGlua1RpbWVvdXQiLCJzb2NrZXRTZXJ2aWNlIiwibGluayIsImF1dGhlbnRpY2F0ZWQiLCJpc0V4dGVuc2lvbiIsIndhbGxldCIsImV2ZW50SGFuZGxlciIsImdldE1ldGhvZHMiLCJFVkVOVFMiLCJEaXNjb25uZWN0ZWQiLCJMb2dnZWRPdXQiLCJzZXRBbmRSZXR1cm5JZCIsImZvcmdldCIsInNlbmRBcGlSZXF1ZXN0IiwicmVxdWlyZWRGaWVsZHMiLCJmaWVsZHMiLCJuZXR3b3JrIiwia3ljIiwicHVibGljS2V5IiwidG8iLCJhbW91bnQiLCJhY3Rpb25zIiwiV0VCX0hPU1QiLCJSZWxheVNvY2tldCIsImlzQXZhaWxhYmxlIiwic2NhdHRlciIsInBvbGxFeGlzdGVuY2UiLCJJbmplY3Rpb24iLCJnZXRJZCIsInVzZUlkZW50aXR5Iiwic3VnZ2VzdCIsIm5ldCIsImNvbm5lY3QiLCJzb2NrZXRTZXR0ZXJzIiwiSW5kZXgiLCJsb2FkUGx1Z2luIiwiaXNWYWxpZCIsInNpZ25hdHVyZVByb3ZpZGVyIiwiaG9va1Byb3ZpZGVyIiwic2V0U29ja2V0U2VydmljZSIsIndhbGxldHMiLCJydW5CZWZvcmVJbnRlcmZhY2luZyIsInJ1bkFmdGVySW50ZXJmYWNpbmciLCJiaW5kQmFzaWNzIiwiUHJveHkiLCJfc2NhdHRlciIsIlNjYXR0ZXJKUyJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFB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QUNxQjEvQixNQUFBMUYsR0FBQS9ILEVBQUEsRUFBQUEsRUFBQStILEVBQUEvSCxJQURyQm10QyxFQUNxQm50QyxHQUFBMEMsVUFBQTFDLEdBQzlCbXRDLEVBQVFLLElBQUksU0FBQUosR0FBTSxPQUFJaGhDLEVBQUtxckMsUUFBUVUsV0FBVy9LLHdDQUk5QixJQUFBaGhDLEVBQ2QsT0FBT0EsRUFBQTVKLEtBQUtpMUMsU0FBUU8sUUFBYnIxQyxNQUFBeUosRUFBQTFKLHdEQVNXLENBQVcsSUFBSXcxQyxJQUFVLENBQy9DMzNDLElBRCtDLFNBQzNDOEMsRUFBT3BELEdBQU0sWUFDVyxJQUFqQm9ELEVBQU9wRCxHQUNWb0QsRUFBT28wQyxRQUFReDNDLEdBRHlCb0QsRUFBT3BELE1BSXhEMDFDLEdBQVV2a0MsSUFBTSxTQUFBM1AsR0FBQyxPQUFJa2tCLEdBQU84eEIsUUFBVWgyQyxHQUN0Q2swQyxHQUFVcDFDLElBQU0sa0JBQU1vbEIsR0FBTzh4QixTQUNSLG9CQUFYM3pDLFNBQXdCQSxPQUFPZzFDLFVBQVluekIsSUFHckRBLEdBQU93c0IsT0FBU0EsRUFDaEJ4c0IsR0FBTzJuQixZQUFjQSxFQUNyQjNuQixHQUFPNnNCLFlBQWNBLEVBQ3JCN3NCLEdBQU9zdEIsUUFBVUEsRUFDakJ0dEIsR0FBT2l0QixNQUFRQSxFQUNmanRCLEdBQU82b0IsY0FBZ0JBLEVBQ3ZCN29CLEdBQU82d0IsT0FBU0EsR0FDaEI3d0IsR0FBT3V2QixnQkFBa0JBLEVBQ3pCdnZCLEdBQU80dEIsZUFBaUJBLEVBRVQ1dEIiLCJmaWxlIjoic2NhdHRlcmpzLWNvcmUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDI3MCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FzeW5jVG9HZW5lcmF0b3I7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47IiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mOyIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzOyIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gYXZvaWQgc2NvcGUgY3JlZXAsIHRoZSBrZXlzIGFycmF5IGNhbiB0aGVuIGJlIGNvbGxlY3RlZFxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgdGhpcy5lbmQoKTtcblxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiAkZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiAkZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIFJlZmxlY3RBcHBseSh0aGlzLmxpc3RlbmVyLCB0aGlzLnRhcmdldCwgYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsImZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuIiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fFxuICAgICFwcm9jZXNzLnZlcnNpb24gfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjAuJykgPT09IDAgfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuJykgPT09IDAgJiYgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLjguJykgIT09IDApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7IG5leHRUaWNrOiBuZXh0VGljayB9O1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzLCBpO1xuICBzd2l0Y2ggKGxlbikge1xuICBjYXNlIDA6XG4gIGNhc2UgMTpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gIGNhc2UgMjpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tPbmUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEpO1xuICAgIH0pO1xuICBjYXNlIDM6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVHdvKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyKTtcbiAgICB9KTtcbiAgY2FzZSA0OlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1RocmVlKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9KTtcbiAgZGVmYXVsdDpcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrKCkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSk7XG4gIH1cbn1cblxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHBuYS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcG5hLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cbiAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBjb3JrUmVxO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5lbmQoKTtcbiAgY2IoZXJyKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbi8vIHByb3RvdHlwZSBjbGFzcyBmb3IgaGFzaCBmdW5jdGlvbnNcbmZ1bmN0aW9uIEhhc2ggKGJsb2NrU2l6ZSwgZmluYWxTaXplKSB7XG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jKGJsb2NrU2l6ZSlcbiAgdGhpcy5fZmluYWxTaXplID0gZmluYWxTaXplXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9sZW4gPSAwXG59XG5cbkhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKVxuICB9XG5cbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuX2Jsb2NrU2l6ZVxuICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGhcbiAgdmFyIGFjY3VtID0gdGhpcy5fbGVuXG5cbiAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbGVuZ3RoOykge1xuICAgIHZhciBhc3NpZ25lZCA9IGFjY3VtICUgYmxvY2tTaXplXG4gICAgdmFyIHJlbWFpbmRlciA9IE1hdGgubWluKGxlbmd0aCAtIG9mZnNldCwgYmxvY2tTaXplIC0gYXNzaWduZWQpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbWFpbmRlcjsgaSsrKSB7XG4gICAgICBibG9ja1thc3NpZ25lZCArIGldID0gZGF0YVtvZmZzZXQgKyBpXVxuICAgIH1cblxuICAgIGFjY3VtICs9IHJlbWFpbmRlclxuICAgIG9mZnNldCArPSByZW1haW5kZXJcblxuICAgIGlmICgoYWNjdW0gJSBibG9ja1NpemUpID09PSAwKSB7XG4gICAgICB0aGlzLl91cGRhdGUoYmxvY2spXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fbGVuICs9IGxlbmd0aFxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHZhciByZW0gPSB0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemVcblxuICB0aGlzLl9ibG9ja1tyZW1dID0gMHg4MFxuXG4gIC8vIHplcm8gKHJlbSArIDEpIHRyYWlsaW5nIGJpdHMsIHdoZXJlIChyZW0gKyAxKSBpcyB0aGUgc21hbGxlc3RcbiAgLy8gbm9uLW5lZ2F0aXZlIHNvbHV0aW9uIHRvIHRoZSBlcXVhdGlvbiAobGVuZ3RoICsgMSArIChyZW0gKyAxKSkgPT09IGZpbmFsU2l6ZSBtb2QgYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgcmVtICsgMSlcblxuICBpZiAocmVtID49IHRoaXMuX2ZpbmFsU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgICB0aGlzLl9ibG9jay5maWxsKDApXG4gIH1cblxuICB2YXIgYml0cyA9IHRoaXMuX2xlbiAqIDhcblxuICAvLyB1aW50MzJcbiAgaWYgKGJpdHMgPD0gMHhmZmZmZmZmZikge1xuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoYml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcblxuICAvLyB1aW50NjRcbiAgfSBlbHNlIHtcbiAgICB2YXIgbG93Qml0cyA9IChiaXRzICYgMHhmZmZmZmZmZikgPj4+IDBcbiAgICB2YXIgaGlnaEJpdHMgPSAoYml0cyAtIGxvd0JpdHMpIC8gMHgxMDAwMDAwMDBcblxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoaGlnaEJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDgpXG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShsb3dCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2goKVxuXG4gIHJldHVybiBlbmMgPyBoYXNoLnRvU3RyaW5nKGVuYykgOiBoYXNoXG59XG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoXG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwbmEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHBuYS5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm07XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICAgIF90aGlzMi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcblxuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCJpbXBvcnQge0RldmljZVVVSUR9IGZyb20gJ2RldmljZS11dWlkJztcclxuXHJcbmlmKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBnbG9iYWwubmF2aWdhdG9yID09PSAndW5kZWZpbmVkJykgZ2xvYmFsLm5hdmlnYXRvciA9IHt9O1xyXG5pZih0eXBlb2Ygc2NyZWVuID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZ2xvYmFsLnNjcmVlbiA9PT0gJ3VuZGVmaW5lZCcpIGdsb2JhbC5zY3JlZW4gPSB7fTtcclxuXHJcbmNvbnN0IGR1ID0gbmV3IERldmljZVVVSUQoKS5wYXJzZSgpO1xyXG5jb25zdCBkdWEgPSBbXHJcblx0ZHUubGFuZ3VhZ2UsXHJcblx0ZHUucGxhdGZvcm0sXHJcblx0ZHUub3MsXHJcblx0ZHUuY3B1Q29yZXMsXHJcblx0ZHUuY29sb3JEZXB0aCxcclxuXTtcclxuY29uc3QgZGV2aWNlID0gZHUuaGFzaE1ENShkdWEuam9pbignOicpKTtcclxuZXhwb3J0IGRlZmF1bHQgZGV2aWNlOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuUGFzc1Rocm91Z2hcbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlciAodmFsLCBwcmVmaXgpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodmFsKSAmJiB0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocHJlZml4ICsgJyBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYnVmZmVyJylcbiAgfVxufVxuXG5mdW5jdGlvbiBIYXNoQmFzZSAoYmxvY2tTaXplKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tTaXplKVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIHRoaXMuX2xlbmd0aCA9IFswLCAwLCAwLCAwXVxuXG4gIHRoaXMuX2ZpbmFsaXplZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKEhhc2hCYXNlLCBUcmFuc2Zvcm0pXG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMudXBkYXRlKGNodW5rLCBlbmNvZGluZylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5kaWdlc3QoKSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nKSB7XG4gIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlcihkYXRhLCAnRGF0YScpXG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZylcblxuICAvLyBjb25zdW1lIGRhdGFcbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIG9mZnNldCA9IDBcbiAgd2hpbGUgKHRoaXMuX2Jsb2NrT2Zmc2V0ICsgZGF0YS5sZW5ndGggLSBvZmZzZXQgPj0gdGhpcy5fYmxvY2tTaXplKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuX2Jsb2NrT2Zmc2V0OyBpIDwgdGhpcy5fYmxvY2tTaXplOykgYmxvY2tbaSsrXSA9IGRhdGFbb2Zmc2V0KytdXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuICB3aGlsZSAob2Zmc2V0IDwgZGF0YS5sZW5ndGgpIGJsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gZGF0YVtvZmZzZXQrK11cblxuICAvLyB1cGRhdGUgbGVuZ3RoXG4gIGZvciAodmFyIGogPSAwLCBjYXJyeSA9IGRhdGEubGVuZ3RoICogODsgY2FycnkgPiAwOyArK2opIHtcbiAgICB0aGlzLl9sZW5ndGhbal0gKz0gY2FycnlcbiAgICBjYXJyeSA9ICh0aGlzLl9sZW5ndGhbal0gLyAweDAxMDAwMDAwMDApIHwgMFxuICAgIGlmIChjYXJyeSA+IDApIHRoaXMuX2xlbmd0aFtqXSAtPSAweDAxMDAwMDAwMDAgKiBjYXJyeVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgdGhpcy5fZmluYWxpemVkID0gdHJ1ZVxuXG4gIHZhciBkaWdlc3QgPSB0aGlzLl9kaWdlc3QoKVxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgZGlnZXN0ID0gZGlnZXN0LnRvU3RyaW5nKGVuY29kaW5nKVxuXG4gIC8vIHJlc2V0IHN0YXRlXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB0aGlzLl9sZW5ndGhbaV0gPSAwXG5cbiAgcmV0dXJuIGRpZ2VzdFxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfZGlnZXN0IGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaEJhc2VcbiIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4QTJGOTgsIDB4NzEzNzQ0OTEsIDB4QjVDMEZCQ0YsIDB4RTlCNURCQTUsXG4gIDB4Mzk1NkMyNUIsIDB4NTlGMTExRjEsIDB4OTIzRjgyQTQsIDB4QUIxQzVFRDUsXG4gIDB4RDgwN0FBOTgsIDB4MTI4MzVCMDEsIDB4MjQzMTg1QkUsIDB4NTUwQzdEQzMsXG4gIDB4NzJCRTVENzQsIDB4ODBERUIxRkUsIDB4OUJEQzA2QTcsIDB4QzE5QkYxNzQsXG4gIDB4RTQ5QjY5QzEsIDB4RUZCRTQ3ODYsIDB4MEZDMTlEQzYsIDB4MjQwQ0ExQ0MsXG4gIDB4MkRFOTJDNkYsIDB4NEE3NDg0QUEsIDB4NUNCMEE5REMsIDB4NzZGOTg4REEsXG4gIDB4OTgzRTUxNTIsIDB4QTgzMUM2NkQsIDB4QjAwMzI3QzgsIDB4QkY1OTdGQzcsXG4gIDB4QzZFMDBCRjMsIDB4RDVBNzkxNDcsIDB4MDZDQTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdCNzBBODUsIDB4MkUxQjIxMzgsIDB4NEQyQzZERkMsIDB4NTMzODBEMTMsXG4gIDB4NjUwQTczNTQsIDB4NzY2QTBBQkIsIDB4ODFDMkM5MkUsIDB4OTI3MjJDODUsXG4gIDB4QTJCRkU4QTEsIDB4QTgxQTY2NEIsIDB4QzI0QjhCNzAsIDB4Qzc2QzUxQTMsXG4gIDB4RDE5MkU4MTksIDB4RDY5OTA2MjQsIDB4RjQwRTM1ODUsIDB4MTA2QUEwNzAsXG4gIDB4MTlBNEMxMTYsIDB4MUUzNzZDMDgsIDB4Mjc0ODc3NEMsIDB4MzRCMEJDQjUsXG4gIDB4MzkxQzBDQjMsIDB4NEVEOEFBNEEsIDB4NUI5Q0NBNEYsIDB4NjgyRTZGRjMsXG4gIDB4NzQ4RjgyRUUsIDB4NzhBNTYzNkYsIDB4ODRDODc4MTQsIDB4OENDNzAyMDgsXG4gIDB4OTBCRUZGRkEsIDB4QTQ1MDZDRUIsIDB4QkVGOUEzRjcsIDB4QzY3MTc4RjJcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTI1NiAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTI1NiwgSGFzaClcblxuU2hhMjU2LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iID0gMHhiYjY3YWU4NVxuICB0aGlzLl9jID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kID0gMHhhNTRmZjUzYVxuICB0aGlzLl9lID0gMHg1MTBlNTI3ZlxuICB0aGlzLl9mID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9nID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oID0gMHg1YmUwY2QxOVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGNoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDIgfCB4IDw8IDMwKSBeICh4ID4+PiAxMyB8IHggPDwgMTkpIF4gKHggPj4+IDIyIHwgeCA8PCAxMClcbn1cblxuZnVuY3Rpb24gc2lnbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNiB8IHggPDwgMjYpIF4gKHggPj4+IDExIHwgeCA8PCAyMSkgXiAoeCA+Pj4gMjUgfCB4IDw8IDcpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDcgfCB4IDw8IDI1KSBeICh4ID4+PiAxOCB8IHggPDwgMTQpIF4gKHggPj4+IDMpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDE3IHwgeCA8PCAxNSkgXiAoeCA+Pj4gMTkgfCB4IDw8IDEzKSBeICh4ID4+PiAxMClcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG4gIHZhciBmID0gdGhpcy5fZiB8IDBcbiAgdmFyIGcgPSB0aGlzLl9nIHwgMFxuICB2YXIgaCA9IHRoaXMuX2ggfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA2NDsgKytpKSBXW2ldID0gKGdhbW1hMShXW2kgLSAyXSkgKyBXW2kgLSA3XSArIGdhbW1hMChXW2kgLSAxNV0pICsgV1tpIC0gMTZdKSB8IDBcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDY0OyArK2opIHtcbiAgICB2YXIgVDEgPSAoaCArIHNpZ21hMShlKSArIGNoKGUsIGYsIGcpICsgS1tqXSArIFdbal0pIHwgMFxuICAgIHZhciBUMiA9IChzaWdtYTAoYSkgKyBtYWooYSwgYiwgYykpIHwgMFxuXG4gICAgaCA9IGdcbiAgICBnID0gZlxuICAgIGYgPSBlXG4gICAgZSA9IChkICsgVDEpIHwgMFxuICAgIGQgPSBjXG4gICAgYyA9IGJcbiAgICBiID0gYVxuICAgIGEgPSAoVDEgKyBUMikgfCAwXG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG4gIHRoaXMuX2YgPSAoZiArIHRoaXMuX2YpIHwgMFxuICB0aGlzLl9nID0gKGcgKyB0aGlzLl9nKSB8IDBcbiAgdGhpcy5faCA9IChoICsgdGhpcy5faCkgfCAwXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDMyKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9oLCAyOClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTI1NlxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhNTEyICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTUxMiwgSGFzaClcblxuU2hhNTEyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYmggPSAweGJiNjdhZTg1XG4gIHRoaXMuX2NoID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kaCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZWggPSAweDUxMGU1MjdmXG4gIHRoaXMuX2ZoID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9naCA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faGggPSAweDViZTBjZDE5XG5cbiAgdGhpcy5fYWwgPSAweGYzYmNjOTA4XG4gIHRoaXMuX2JsID0gMHg4NGNhYTczYlxuICB0aGlzLl9jbCA9IDB4ZmU5NGY4MmJcbiAgdGhpcy5fZGwgPSAweDVmMWQzNmYxXG4gIHRoaXMuX2VsID0gMHhhZGU2ODJkMVxuICB0aGlzLl9mbCA9IDB4MmIzZTZjMWZcbiAgdGhpcy5fZ2wgPSAweGZiNDFiZDZiXG4gIHRoaXMuX2hsID0gMHgxMzdlMjE3OVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAyOCB8IHhsIDw8IDQpIF4gKHhsID4+PiAyIHwgeCA8PCAzMCkgXiAoeGwgPj4+IDcgfCB4IDw8IDI1KVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTQgfCB4bCA8PCAxOCkgXiAoeCA+Pj4gMTggfCB4bCA8PCAxNCkgXiAoeGwgPj4+IDkgfCB4IDw8IDIzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMGwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcgfCB4bCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gR2FtbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNilcbn1cblxuZnVuY3Rpb24gR2FtbWExbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYgfCB4bCA8PCAyNilcbn1cblxuZnVuY3Rpb24gZ2V0Q2FycnkgKGEsIGIpIHtcbiAgcmV0dXJuIChhID4+PiAwKSA8IChiID4+PiAwKSA/IDEgOiAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhaCA9IHRoaXMuX2FoIHwgMFxuICB2YXIgYmggPSB0aGlzLl9iaCB8IDBcbiAgdmFyIGNoID0gdGhpcy5fY2ggfCAwXG4gIHZhciBkaCA9IHRoaXMuX2RoIHwgMFxuICB2YXIgZWggPSB0aGlzLl9laCB8IDBcbiAgdmFyIGZoID0gdGhpcy5fZmggfCAwXG4gIHZhciBnaCA9IHRoaXMuX2doIHwgMFxuICB2YXIgaGggPSB0aGlzLl9oaCB8IDBcblxuICB2YXIgYWwgPSB0aGlzLl9hbCB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYmwgfCAwXG4gIHZhciBjbCA9IHRoaXMuX2NsIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kbCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZWwgfCAwXG4gIHZhciBmbCA9IHRoaXMuX2ZsIHwgMFxuICB2YXIgZ2wgPSB0aGlzLl9nbCB8IDBcbiAgdmFyIGhsID0gdGhpcy5faGwgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSArPSAyKSB7XG4gICAgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gICAgV1tpICsgMV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0ICsgNClcbiAgfVxuICBmb3IgKDsgaSA8IDE2MDsgaSArPSAyKSB7XG4gICAgdmFyIHhoID0gV1tpIC0gMTUgKiAyXVxuICAgIHZhciB4bCA9IFdbaSAtIDE1ICogMiArIDFdXG4gICAgdmFyIGdhbW1hMCA9IEdhbW1hMCh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMGwgPSBHYW1tYTBsKHhsLCB4aClcblxuICAgIHhoID0gV1tpIC0gMiAqIDJdXG4gICAgeGwgPSBXW2kgLSAyICogMiArIDFdXG4gICAgdmFyIGdhbW1hMSA9IEdhbW1hMSh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMWwgPSBHYW1tYTFsKHhsLCB4aClcblxuICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuICAgIHZhciBXaTdoID0gV1tpIC0gNyAqIDJdXG4gICAgdmFyIFdpN2wgPSBXW2kgLSA3ICogMiArIDFdXG5cbiAgICB2YXIgV2kxNmggPSBXW2kgLSAxNiAqIDJdXG4gICAgdmFyIFdpMTZsID0gV1tpIC0gMTYgKiAyICsgMV1cblxuICAgIHZhciBXaWwgPSAoZ2FtbWEwbCArIFdpN2wpIHwgMFxuICAgIHZhciBXaWggPSAoZ2FtbWEwICsgV2k3aCArIGdldENhcnJ5KFdpbCwgZ2FtbWEwbCkpIHwgMFxuICAgIFdpbCA9IChXaWwgKyBnYW1tYTFsKSB8IDBcbiAgICBXaWggPSAoV2loICsgZ2FtbWExICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTFsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIFdpMTZsKSB8IDBcbiAgICBXaWggPSAoV2loICsgV2kxNmggKyBnZXRDYXJyeShXaWwsIFdpMTZsKSkgfCAwXG5cbiAgICBXW2ldID0gV2loXG4gICAgV1tpICsgMV0gPSBXaWxcbiAgfVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTYwOyBqICs9IDIpIHtcbiAgICBXaWggPSBXW2pdXG4gICAgV2lsID0gV1tqICsgMV1cblxuICAgIHZhciBtYWpoID0gbWFqKGFoLCBiaCwgY2gpXG4gICAgdmFyIG1hamwgPSBtYWooYWwsIGJsLCBjbClcblxuICAgIHZhciBzaWdtYTBoID0gc2lnbWEwKGFoLCBhbClcbiAgICB2YXIgc2lnbWEwbCA9IHNpZ21hMChhbCwgYWgpXG4gICAgdmFyIHNpZ21hMWggPSBzaWdtYTEoZWgsIGVsKVxuICAgIHZhciBzaWdtYTFsID0gc2lnbWExKGVsLCBlaClcblxuICAgIC8vIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tqXSArIFdbal1cbiAgICB2YXIgS2loID0gS1tqXVxuICAgIHZhciBLaWwgPSBLW2ogKyAxXVxuXG4gICAgdmFyIGNoaCA9IENoKGVoLCBmaCwgZ2gpXG4gICAgdmFyIGNobCA9IENoKGVsLCBmbCwgZ2wpXG5cbiAgICB2YXIgdDFsID0gKGhsICsgc2lnbWExbCkgfCAwXG4gICAgdmFyIHQxaCA9IChoaCArIHNpZ21hMWggKyBnZXRDYXJyeSh0MWwsIGhsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIGNobCkgfCAwXG4gICAgdDFoID0gKHQxaCArIGNoaCArIGdldENhcnJ5KHQxbCwgY2hsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIEtpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIEtpaCArIGdldENhcnJ5KHQxbCwgS2lsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIFdpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIFdpaCArIGdldENhcnJ5KHQxbCwgV2lsKSkgfCAwXG5cbiAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuICAgIHZhciB0MmwgPSAoc2lnbWEwbCArIG1hamwpIHwgMFxuICAgIHZhciB0MmggPSAoc2lnbWEwaCArIG1hamggKyBnZXRDYXJyeSh0MmwsIHNpZ21hMGwpKSB8IDBcblxuICAgIGhoID0gZ2hcbiAgICBobCA9IGdsXG4gICAgZ2ggPSBmaFxuICAgIGdsID0gZmxcbiAgICBmaCA9IGVoXG4gICAgZmwgPSBlbFxuICAgIGVsID0gKGRsICsgdDFsKSB8IDBcbiAgICBlaCA9IChkaCArIHQxaCArIGdldENhcnJ5KGVsLCBkbCkpIHwgMFxuICAgIGRoID0gY2hcbiAgICBkbCA9IGNsXG4gICAgY2ggPSBiaFxuICAgIGNsID0gYmxcbiAgICBiaCA9IGFoXG4gICAgYmwgPSBhbFxuICAgIGFsID0gKHQxbCArIHQybCkgfCAwXG4gICAgYWggPSAodDFoICsgdDJoICsgZ2V0Q2FycnkoYWwsIHQxbCkpIHwgMFxuICB9XG5cbiAgdGhpcy5fYWwgPSAodGhpcy5fYWwgKyBhbCkgfCAwXG4gIHRoaXMuX2JsID0gKHRoaXMuX2JsICsgYmwpIHwgMFxuICB0aGlzLl9jbCA9ICh0aGlzLl9jbCArIGNsKSB8IDBcbiAgdGhpcy5fZGwgPSAodGhpcy5fZGwgKyBkbCkgfCAwXG4gIHRoaXMuX2VsID0gKHRoaXMuX2VsICsgZWwpIHwgMFxuICB0aGlzLl9mbCA9ICh0aGlzLl9mbCArIGZsKSB8IDBcbiAgdGhpcy5fZ2wgPSAodGhpcy5fZ2wgKyBnbCkgfCAwXG4gIHRoaXMuX2hsID0gKHRoaXMuX2hsICsgaGwpIHwgMFxuXG4gIHRoaXMuX2FoID0gKHRoaXMuX2FoICsgYWggKyBnZXRDYXJyeSh0aGlzLl9hbCwgYWwpKSB8IDBcbiAgdGhpcy5fYmggPSAodGhpcy5fYmggKyBiaCArIGdldENhcnJ5KHRoaXMuX2JsLCBibCkpIHwgMFxuICB0aGlzLl9jaCA9ICh0aGlzLl9jaCArIGNoICsgZ2V0Q2FycnkodGhpcy5fY2wsIGNsKSkgfCAwXG4gIHRoaXMuX2RoID0gKHRoaXMuX2RoICsgZGggKyBnZXRDYXJyeSh0aGlzLl9kbCwgZGwpKSB8IDBcbiAgdGhpcy5fZWggPSAodGhpcy5fZWggKyBlaCArIGdldENhcnJ5KHRoaXMuX2VsLCBlbCkpIHwgMFxuICB0aGlzLl9maCA9ICh0aGlzLl9maCArIGZoICsgZ2V0Q2FycnkodGhpcy5fZmwsIGZsKSkgfCAwXG4gIHRoaXMuX2doID0gKHRoaXMuX2doICsgZ2ggKyBnZXRDYXJyeSh0aGlzLl9nbCwgZ2wpKSB8IDBcbiAgdGhpcy5faGggPSAodGhpcy5faGggKyBoaCArIGdldENhcnJ5KHRoaXMuX2hsLCBobCkpIHwgMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg2NClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9naCwgdGhpcy5fZ2wsIDQ4KVxuICB3cml0ZUludDY0QkUodGhpcy5faGgsIHRoaXMuX2hsLCA1NilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTUxMlxuIiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdFwiKTtcblxudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdFwiKTtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXk7IiwidmFyIHdpbmRvdyA9IHJlcXVpcmUoJ2dsb2JhbC93aW5kb3cnKTtcbnZhciBub2RlQ3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbmZ1bmN0aW9uIGdldFJhbmRvbVZhbHVlcyhidWYpIHtcbiAgaWYgKHdpbmRvdy5jcnlwdG8gJiYgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICByZXR1cm4gd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnVmKTtcbiAgfVxuICBpZiAodHlwZW9mIHdpbmRvdy5tc0NyeXB0byA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhidWYpO1xuICB9XG4gIGlmIChub2RlQ3J5cHRvLnJhbmRvbUJ5dGVzKSB7XG4gICAgaWYgKCEoYnVmIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4cGVjdGVkIFVpbnQ4QXJyYXknKTtcbiAgICB9XG4gICAgaWYgKGJ1Zi5sZW5ndGggPiA2NTUzNikge1xuICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoKTtcbiAgICAgIGUuY29kZSA9IDIyO1xuICAgICAgZS5tZXNzYWdlID0gJ0ZhaWxlZCB0byBleGVjdXRlIFxcJ2dldFJhbmRvbVZhbHVlc1xcJyBvbiBcXCdDcnlwdG9cXCc6IFRoZSAnICtcbiAgICAgICAgJ0FycmF5QnVmZmVyVmlld1xcJ3MgYnl0ZSBsZW5ndGggKCcgKyBidWYubGVuZ3RoICsgJykgZXhjZWVkcyB0aGUgJyArXG4gICAgICAgICdudW1iZXIgb2YgYnl0ZXMgb2YgZW50cm9weSBhdmFpbGFibGUgdmlhIHRoaXMgQVBJICg2NTUzNikuJztcbiAgICAgIGUubmFtZSA9ICdRdW90YUV4Y2VlZGVkRXJyb3InO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgdmFyIGJ5dGVzID0gbm9kZUNyeXB0by5yYW5kb21CeXRlcyhidWYubGVuZ3RoKTtcbiAgICBidWYuc2V0KGJ5dGVzKTtcbiAgICByZXR1cm4gYnVmO1xuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gc2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGF2YWlsYWJsZS4nKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhbmRvbVZhbHVlcztcbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbmZ1bmN0aW9uIEhhc2ggKGhhc2gpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBoYXNoXG59XG5cbmluaGVyaXRzKEhhc2gsIEJhc2UpXG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IYXNoLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9oYXNoLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSGFzaCAoYWxnKSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChhbGcgPT09ICdtZDUnKSByZXR1cm4gbmV3IE1ENSgpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHJldHVybiBuZXcgUklQRU1EMTYwKClcblxuICByZXR1cm4gbmV3IEhhc2goc2hhKGFsZykpXG59XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbWF4b2dkZW4vd2Vic29ja2V0LXN0cmVhbS9ibG9iLzQ4ZGMzZGRmOTQzZTVhZGE2NjhjMzFjY2Q5NGU5MTg2ZjAyZmFmYmQvd3MtZmFsbGJhY2suanNcblxudmFyIHdzID0gbnVsbFxuXG5pZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIE1veldlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBNb3pXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBnbG9iYWwuV2ViU29ja2V0IHx8IGdsb2JhbC5Nb3pXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSB3aW5kb3cuV2ViU29ja2V0IHx8IHdpbmRvdy5Nb3pXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdzID0gc2VsZi5XZWJTb2NrZXQgfHwgc2VsZi5Nb3pXZWJTb2NrZXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3c1xuIiwiLyoqXG4gKlxuICogQHJldmlzaW9uICAgICRJZDogaW5kZXguanMgMjAxMi0wMy0yNCAxNjoyMToxMCBBbGVrc2V5ICRcbiAqIEBjcmVhdGVkICAgICAyMDE2LTA5LTI0IDE2OjIxOjEwXG4gKiBAY2F0ZWdvcnkgICAgRXhwcmVzcyBIZWxwZXJzXG4gKiBAcGFja2FnZSAgICAgZGV2aWNlLXV1aWRcbiAqIEB2ZXJzaW9uICAgICAxLjAuMlxuICogQGNvcHlyaWdodCAgIENvcHlyaWdodCAoYykgMjAxNi0yMDE3IC0gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlICAgICBNSVQgTGljZW5zZVxuICogQGF1dGhvciAgICAgIEFsZXhleSBHb3JkZXlldiBJSyA8YWxla3NlakBnb3JkZWpldi5sdj5cbiAqIEBsaW5rICAgICAgICBodHRwOi8vd3d3LmdvcmRlamV2Lmx2XG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2RldmljZS11dWlkJyk7IiwiZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7IiwiZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhIb2xlczsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5TGltaXQ7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlUmVzdDsiLCJ2YXIgd2luO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgIHdpbiA9IHNlbGY7XG59IGVsc2Uge1xuICAgIHdpbiA9IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpbjtcbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgQVJSQVkxNiA9IG5ldyBBcnJheSgxNilcblxuZnVuY3Rpb24gTUQ1ICgpIHtcbiAgSGFzaEJhc2UuY2FsbCh0aGlzLCA2NClcblxuICAvLyBzdGF0ZVxuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxufVxuXG5pbmhlcml0cyhNRDUsIEhhc2hCYXNlKVxuXG5NRDUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBNID0gQVJSQVkxNlxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIE1baV0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShpICogNClcblxuICB2YXIgYSA9IHRoaXMuX2FcbiAgdmFyIGIgPSB0aGlzLl9iXG4gIHZhciBjID0gdGhpcy5fY1xuICB2YXIgZCA9IHRoaXMuX2RcblxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZDc2YWE0NzgsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxXSwgMHhlOGM3Yjc1NiwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsyXSwgMHgyNDIwNzBkYiwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVszXSwgMHhjMWJkY2VlZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs0XSwgMHhmNTdjMGZhZiwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzVdLCAweDQ3ODdjNjJhLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzZdLCAweGE4MzA0NjEzLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzddLCAweGZkNDY5NTAxLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzhdLCAweDY5ODA5OGQ4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bOV0sIDB4OGI0NGY3YWYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZmY1YmIxLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzExXSwgMHg4OTVjZDdiZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVsxMl0sIDB4NmI5MDExMjIsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxM10sIDB4ZmQ5ODcxOTMsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTRdLCAweGE2Nzk0MzhlLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzE1XSwgMHg0OWI0MDgyMSwgMjIpXG5cbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzFdLCAweGY2MWUyNTYyLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bNl0sIDB4YzA0MGIzNDAsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxMV0sIDB4MjY1ZTVhNTEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bMF0sIDB4ZTliNmM3YWEsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZDYyZjEwNWQsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxMF0sIDB4MDI0NDE0NTMsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxNV0sIDB4ZDhhMWU2ODEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bNF0sIDB4ZTdkM2ZiYzgsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bOV0sIDB4MjFlMWNkZTYsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxNF0sIDB4YzMzNzA3ZDYsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVszXSwgMHhmNGQ1MGQ4NywgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVs4XSwgMHg0NTVhMTRlZCwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxM10sIDB4YTllM2U5MDUsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsyXSwgMHhmY2VmYTNmOCwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzddLCAweDY3NmYwMmQ5LCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzEyXSwgMHg4ZDJhNGM4YSwgMjApXG5cbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzVdLCAweGZmZmEzOTQyLCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bOF0sIDB4ODc3MWY2ODEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTFdLCAweDZkOWQ2MTIyLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzE0XSwgMHhmZGU1MzgwYywgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxXSwgMHhhNGJlZWE0NCwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzRdLCAweDRiZGVjZmE5LCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzddLCAweGY2YmI0YjYwLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzEwXSwgMHhiZWJmYmM3MCwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxM10sIDB4Mjg5YjdlYzYsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVswXSwgMHhlYWExMjdmYSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVszXSwgMHhkNGVmMzA4NSwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVs2XSwgMHgwNDg4MWQwNSwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs5XSwgMHhkOWQ0ZDAzOSwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzEyXSwgMHhlNmRiOTllNSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxNV0sIDB4MWZhMjdjZjgsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMl0sIDB4YzRhYzU2NjUsIDIzKVxuXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVswXSwgMHhmNDI5MjI0NCwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzddLCAweDQzMmFmZjk3LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzE0XSwgMHhhYjk0MjNhNywgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs1XSwgMHhmYzkzYTAzOSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVsxMl0sIDB4NjU1YjU5YzMsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVszXSwgMHg4ZjBjY2M5MiwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZlZmY0N2QsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMV0sIDB4ODU4NDVkZDEsIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bOF0sIDB4NmZhODdlNGYsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxNV0sIDB4ZmUyY2U2ZTAsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTMwMTQzMTQsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMTNdLCAweDRlMDgxMWExLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzRdLCAweGY3NTM3ZTgyLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTFdLCAweGJkM2FmMjM1LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzJdLCAweDJhZDdkMmJiLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzldLCAweGViODZkMzkxLCAyMSlcblxuICB0aGlzLl9hID0gKHRoaXMuX2EgKyBhKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9iICsgYikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fYyArIGMpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2QgKyBkKSB8IDBcbn1cblxuTUQ1LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuRiAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5HIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkggKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkkgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChjIF4gKGIgfCAofmQpKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNRDVcbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbnZhciB6bCA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXVxuXG52YXIgenIgPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl1cblxudmFyIHNsID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXVxuXG52YXIgc3IgPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dXG5cbnZhciBobCA9IFsweDAwMDAwMDAwLCAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGE5NTNmZDRlXVxudmFyIGhyID0gWzB4NTBhMjhiZTYsIDB4NWM0ZGQxMjQsIDB4NmQ3MDNlZjMsIDB4N2E2ZDc2ZTksIDB4MDAwMDAwMDBdXG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcbn1cblxuaW5oZXJpdHMoUklQRU1EMTYwLCBIYXNoQmFzZSlcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgd29yZHMgPSBBUlJBWTE2XG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikgd29yZHNbal0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShqICogNClcblxuICB2YXIgYWwgPSB0aGlzLl9hIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9iIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lIHwgMFxuXG4gIHZhciBhciA9IHRoaXMuX2EgfCAwXG4gIHZhciBiciA9IHRoaXMuX2IgfCAwXG4gIHZhciBjciA9IHRoaXMuX2MgfCAwXG4gIHZhciBkciA9IHRoaXMuX2QgfCAwXG4gIHZhciBlciA9IHRoaXMuX2UgfCAwXG5cbiAgLy8gY29tcHV0YXRpb25cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG4gICAgdmFyIHRsXG4gICAgdmFyIHRyXG4gICAgaWYgKGkgPCAxNikge1xuICAgICAgdGwgPSBmbjEoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzBdLCBzbFtpXSlcbiAgICAgIHRyID0gZm41KGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclswXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgMzIpIHtcbiAgICAgIHRsID0gZm4yKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsxXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNChhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMV0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICB0bCA9IGZuMyhhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMl0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjMoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzJdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xuICAgICAgdGwgPSBmbjQoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzNdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4yKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclszXSwgc3JbaV0pXG4gICAgfSBlbHNlIHsgLy8gaWYgKGk8ODApIHtcbiAgICAgIHRsID0gZm41KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFs0XSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbNF0sIHNyW2ldKVxuICAgIH1cblxuICAgIGFsID0gZWxcbiAgICBlbCA9IGRsXG4gICAgZGwgPSByb3RsKGNsLCAxMClcbiAgICBjbCA9IGJsXG4gICAgYmwgPSB0bFxuXG4gICAgYXIgPSBlclxuICAgIGVyID0gZHJcbiAgICBkciA9IHJvdGwoY3IsIDEwKVxuICAgIGNyID0gYnJcbiAgICBiciA9IHRyXG4gIH1cblxuICAvLyB1cGRhdGUgc3RhdGVcbiAgdmFyIHQgPSAodGhpcy5fYiArIGNsICsgZHIpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2MgKyBkbCArIGVyKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9kICsgZWwgKyBhcikgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZSArIGFsICsgYnIpIHwgMFxuICB0aGlzLl9lID0gKHRoaXMuX2EgKyBibCArIGNyKSB8IDBcbiAgdGhpcy5fYSA9IHRcbn1cblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MgPyBCdWZmZXIuYWxsb2MoMjApIDogbmV3IEJ1ZmZlcigyMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9hLCAwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2IsIDQpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYywgOClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9kLCAxMilcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9lLCAxNilcbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiByb3RsICh4LCBuKSB7XG4gIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSlcbn1cblxuZnVuY3Rpb24gZm4xIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4yIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGMpIHwgKCh+YikgJiBkKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjMgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiIHwgKH5jKSkgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNCAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm41IChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gKGMgfCAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJJUEVNRDE2MFxuIiwidmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNIQSAoYWxnb3JpdGhtKSB7XG4gIGFsZ29yaXRobSA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIEFsZ29yaXRobSA9IGV4cG9ydHNbYWxnb3JpdGhtXVxuICBpZiAoIUFsZ29yaXRobSkgdGhyb3cgbmV3IEVycm9yKGFsZ29yaXRobSArICcgaXMgbm90IHN1cHBvcnRlZCAod2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMpJylcblxuICByZXR1cm4gbmV3IEFsZ29yaXRobSgpXG59XG5cbmV4cG9ydHMuc2hhID0gcmVxdWlyZSgnLi9zaGEnKVxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGExJylcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEyMjQnKVxuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhMzg0JylcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMCwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgZGVyaXZlZCBmcm9tIHNoYTEuanMgb2YgdGhlIHNhbWUgcmVwb3NpdG9yeS5cbiAqIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gU0hBLTAgYW5kIFNIQS0xIGlzIGp1c3QgYSBiaXR3aXNlIHJvdGF0ZSBsZWZ0XG4gKiBvcGVyYXRpb24gd2FzIGFkZGVkLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYSwgSGFzaClcblxuU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGw1IChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgNSkgfCAobnVtID4+PiAyNylcbn1cblxuZnVuY3Rpb24gcm90bDMwIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMzApIHwgKG51bSA+Pj4gMilcbn1cblxuZnVuY3Rpb24gZnQgKHMsIGIsIGMsIGQpIHtcbiAgaWYgKHMgPT09IDApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKVxuICBpZiAocyA9PT0gMikgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKVxuICByZXR1cm4gYiBeIGMgXiBkXG59XG5cblNoYS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYTEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTEsIEhhc2gpXG5cblNoYTEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDEgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAxKSB8IChudW0gPj4+IDMxKVxufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gcm90bDEoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSlcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGExLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYiA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fYyA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZSA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZiA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTdcbiAgdGhpcy5faCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEyMjQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyOClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTIyNFxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTM4NCAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGEzODQsIFNIQTUxMilcblxuU2hhMzg0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4Y2JiYjlkNWRcbiAgdGhpcy5fYmggPSAweDYyOWEyOTJhXG4gIHRoaXMuX2NoID0gMHg5MTU5MDE1YVxuICB0aGlzLl9kaCA9IDB4MTUyZmVjZDhcbiAgdGhpcy5fZWggPSAweDY3MzMyNjY3XG4gIHRoaXMuX2ZoID0gMHg4ZWI0NGE4N1xuICB0aGlzLl9naCA9IDB4ZGIwYzJlMGRcbiAgdGhpcy5faGggPSAweDQ3YjU0ODFkXG5cbiAgdGhpcy5fYWwgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2JsID0gMHgzNjdjZDUwN1xuICB0aGlzLl9jbCA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZGwgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2VsID0gMHhmZmMwMGIzMVxuICB0aGlzLl9mbCA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZ2wgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2hsID0gMHhiZWZhNGZhNFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTM4NC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQ4KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTM4NFxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBDaXBoZXJCYXNlIChoYXNoTW9kZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLmhhc2hNb2RlID0gdHlwZW9mIGhhc2hNb2RlID09PSAnc3RyaW5nJ1xuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHRoaXNbaGFzaE1vZGVdID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9IGVsc2Uge1xuICAgIHRoaXMuZmluYWwgPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH1cbiAgaWYgKHRoaXMuX2ZpbmFsKSB7XG4gICAgdGhpcy5fX2ZpbmFsID0gdGhpcy5fZmluYWxcbiAgICB0aGlzLl9maW5hbCA9IG51bGxcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBpbnB1dEVuYylcbiAgfVxuXG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSByZXR1cm4gdGhpc1xuXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKVxuICB9XG5cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYWFkIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgICAgdGhpcy5fdXBkYXRlKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLl91cGRhdGUoZGF0YSkpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIG5leHQoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuX19maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9XG5cbiAgZG9uZShlcnIpXG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9fZmluYWwoKSB8fCBCdWZmZXIuYWxsb2MoMClcbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RvU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlbmMsIGZpbikge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cblxuICBpZiAodGhpcy5fZW5jb2RpbmcgIT09IGVuYykgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuXG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaXBoZXJCYXNlXG4iLCIvKiFcbiAqIGRldmljZS11dWlkLmpzIHYxLjAuNCAoaHR0cHM6Ly9naXRodWIuY29tL2JpZ2dvcmEvZGV2aWNlLXV1aWQvKVxuICogQ29weXJpZ2h0IDIwMTYtMjAxNyBBbGV4ZXkgR29yZGV5ZXZcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL2JpZ2dvcmEvZGV2aWNlLXV1aWQvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqL1xuLypnbG9iYWxcbiBzY3JlZW4sIHdpbmRvdywgbmF2aWdhdG9yXG4gKi9cbihmdW5jdGlvbiAoZXhwb3J0cykge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBCT1RTID0gW1xuICAgICAgICAnXFxcXCtodHRwczpcXFxcL1xcXFwvZGV2ZWxvcGVycy5nb29nbGUuY29tXFxcXC9cXFxcK1xcXFwvd2ViXFxcXC9zbmlwcGV0XFxcXC8nLFxuICAgICAgICAnZ29vZ2xlYm90JyxcbiAgICAgICAgJ2JhaWR1c3BpZGVyJyxcbiAgICAgICAgJ2d1cnVqaWJvdCcsXG4gICAgICAgICd5YW5kZXhib3QnLFxuICAgICAgICAnc2x1cnAnLFxuICAgICAgICAnbXNuYm90JyxcbiAgICAgICAgJ2Jpbmdib3QnLFxuICAgICAgICAnZmFjZWJvb2tleHRlcm5hbGhpdCcsXG4gICAgICAgICdsaW5rZWRpbmJvdCcsXG4gICAgICAgICd0d2l0dGVyYm90JyxcbiAgICAgICAgJ3NsYWNrYm90JyxcbiAgICAgICAgJ3RlbGVncmFtYm90JyxcbiAgICAgICAgJ2FwcGxlYm90JyxcbiAgICAgICAgJ3Bpbmdkb20nLFxuICAgICAgICAndHVtYmxyICcsXG4gICAgICAgICdFbWJlZGx5JyxcbiAgICAgICAgJ3NwYm90J1xuICAgIF07XG4gICAgdmFyIElTX0JPVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCdeLiooJyArIEJPVFMuam9pbignfCcpICsgJykuKiQnKTtcblxuICAgIHZhciBEZXZpY2VVVUlEID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBvcHRpb25zIDoge307XG4gICAgICAgIHZhciBkZWZPcHRpb25zID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogZmFsc2UsXG4gICAgICAgICAgICBsYW5ndWFnZTogZmFsc2UsXG4gICAgICAgICAgICBwbGF0Zm9ybTogdHJ1ZSxcbiAgICAgICAgICAgIG9zOiB0cnVlLFxuICAgICAgICAgICAgcGl4ZWxEZXB0aDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbG9yRGVwdGg6IHRydWUsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQXV0aG9yaXRhdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHNpbGtBY2NlbGVyYXRlZDogdHJ1ZSxcbiAgICAgICAgICAgIGlzS2luZGxlRmlyZTogdHJ1ZSxcbiAgICAgICAgICAgIGlzRGVza3RvcDogdHJ1ZSxcbiAgICAgICAgICAgIGlzTW9iaWxlOiB0cnVlLFxuICAgICAgICAgICAgaXNUYWJsZXQ6IHRydWUsXG4gICAgICAgICAgICBpc1dpbmRvd3M6IHRydWUsXG4gICAgICAgICAgICBpc0xpbnV4OiB0cnVlLFxuICAgICAgICAgICAgaXNMaW51eDY0OiB0cnVlLFxuICAgICAgICAgICAgaXNDaHJvbWVPUzogdHJ1ZSxcbiAgICAgICAgICAgIGlzTWFjOiB0cnVlLFxuICAgICAgICAgICAgaXNpUGFkOiB0cnVlLFxuICAgICAgICAgICAgaXNpUGhvbmU6IHRydWUsXG4gICAgICAgICAgICBpc2lQb2Q6IHRydWUsXG4gICAgICAgICAgICBpc0FuZHJvaWQ6IHRydWUsXG4gICAgICAgICAgICBpc1NhbXN1bmc6IHRydWUsXG4gICAgICAgICAgICBpc1NtYXJ0VFY6IHRydWUsXG4gICAgICAgICAgICBpc1Jhc3BiZXJyeTogdHJ1ZSxcbiAgICAgICAgICAgIGlzQmxhY2tiZXJyeTogdHJ1ZSxcbiAgICAgICAgICAgIGlzVG91Y2hTY3JlZW46IHRydWUsXG4gICAgICAgICAgICBpc09wZXJhOiBmYWxzZSxcbiAgICAgICAgICAgIGlzSUU6IGZhbHNlLFxuICAgICAgICAgICAgaXNFZGdlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzSUVDb21wYXRpYmlsaXR5TW9kZTogZmFsc2UsXG4gICAgICAgICAgICBpc1NhZmFyaTogZmFsc2UsXG4gICAgICAgICAgICBpc0ZpcmVmb3g6IGZhbHNlLFxuICAgICAgICAgICAgaXNXZWJraXQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNDaHJvbWU6IGZhbHNlLFxuICAgICAgICAgICAgaXNLb25xdWVyb3I6IGZhbHNlLFxuICAgICAgICAgICAgaXNPbW5pV2ViOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU2VhTW9ua2V5OiBmYWxzZSxcbiAgICAgICAgICAgIGlzRmxvY2s6IGZhbHNlLFxuICAgICAgICAgICAgaXNBbWF5YTogZmFsc2UsXG4gICAgICAgICAgICBpc1BoYW50b21KUzogZmFsc2UsXG4gICAgICAgICAgICBpc0VwaXBoYW55OiBmYWxzZSxcbiAgICAgICAgICAgIHNvdXJjZTogZmFsc2UsXG4gICAgICAgICAgICBjcHVDb3JlczogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkgJiYgdHlwZW9mIGRlZk9wdGlvbnNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBkZWZPcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVmT3B0aW9ucztcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gJzEuMC4wJztcbiAgICAgICAgdGhpcy5fVmVyc2lvbnMgPSB7XG4gICAgICAgICAgICBFZGdlOiAvRWRnZVxcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBGaXJlZm94OiAvZmlyZWZveFxcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBJRTogL21zaWVcXHMoW1xcZFxcLl0rW1xcZF0pfHRyaWRlbnRcXC9cXGQrXFwuXFxkKzsuKltydjpdKyhcXGQrXFwuXFxkKS9pLFxuICAgICAgICAgICAgQ2hyb21lOiAvY2hyb21lXFwvKFtcXGRcXHdcXC5cXC1dKykvaSxcbiAgICAgICAgICAgIENocm9taXVtOiAvKD86Y2hyb21pdW18Y3Jpb3MpXFwvKFtcXGRcXHdcXC5cXC1dKykvaSxcbiAgICAgICAgICAgIFNhZmFyaTogL3ZlcnNpb25cXC8oW1xcZFxcd1xcLlxcLV0rKS9pLFxuICAgICAgICAgICAgT3BlcmE6IC92ZXJzaW9uXFwvKFtcXGRcXHdcXC5cXC1dKyl8T1BSXFwvKFtcXGRcXHdcXC5cXC1dKykvaSxcbiAgICAgICAgICAgIFBzMzogLyhbXFxkXFx3XFwuXFwtXSspXFwpXFxzKiQvaSxcbiAgICAgICAgICAgIFBzcDogLyhbXFxkXFx3XFwuXFwtXSspXFwpP1xccyokL2ksXG4gICAgICAgICAgICBBbWF5YTogL2FtYXlhXFwvKFtcXGRcXHdcXC5cXC1dKykvaSxcbiAgICAgICAgICAgIFNlYU1vbmtleTogL3NlYW1vbmtleVxcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBPbW5pV2ViOiAvb21uaXdlYlxcL3YoW1xcZFxcd1xcLlxcLV0rKS9pLFxuICAgICAgICAgICAgRmxvY2s6IC9mbG9ja1xcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBFcGlwaGFueTogL2VwaXBoYW55XFwvKFtcXGRcXHdcXC5cXC1dKykvaSxcbiAgICAgICAgICAgIFdpbkpzOiAvbXNhcHBob3N0XFwvKFtcXGRcXHdcXC5cXC1dKykvaSxcbiAgICAgICAgICAgIFBoYW50b21KUzogL3BoYW50b21qc1xcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBVQzogL1VDQnJvd3NlclxcLyhbXFxkXFx3XFwuXSspL2lcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fQnJvd3NlcnMgPSB7XG4gICAgICAgICAgICBFZGdlOiAvZWRnZS9pLFxuICAgICAgICAgICAgQW1heWE6IC9hbWF5YS9pLFxuICAgICAgICAgICAgS29ucXVlcm9yOiAva29ucXVlcm9yL2ksXG4gICAgICAgICAgICBFcGlwaGFueTogL2VwaXBoYW55L2ksXG4gICAgICAgICAgICBTZWFNb25rZXk6IC9zZWFtb25rZXkvaSxcbiAgICAgICAgICAgIEZsb2NrOiAvZmxvY2svaSxcbiAgICAgICAgICAgIE9tbmlXZWI6IC9vbW5pd2ViL2ksXG4gICAgICAgICAgICBDaHJvbWl1bTogL2Nocm9taXVtfGNyaW9zL2ksXG4gICAgICAgICAgICBDaHJvbWU6IC9jaHJvbWUvaSxcbiAgICAgICAgICAgIFNhZmFyaTogL3NhZmFyaS9pLFxuICAgICAgICAgICAgSUU6IC9tc2llfHRyaWRlbnQvaSxcbiAgICAgICAgICAgIE9wZXJhOiAvb3BlcmF8T1BSL2ksXG4gICAgICAgICAgICBQUzM6IC9wbGF5c3RhdGlvbiAzL2ksXG4gICAgICAgICAgICBQU1A6IC9wbGF5c3RhdGlvbiBwb3J0YWJsZS9pLFxuICAgICAgICAgICAgRmlyZWZveDogL2ZpcmVmb3gvaSxcbiAgICAgICAgICAgIFdpbkpzOiAvbXNhcHBob3N0L2ksXG4gICAgICAgICAgICBQaGFudG9tSlM6IC9waGFudG9tanMvaSxcbiAgICAgICAgICAgIFVDOiAvVUNCcm93c2VyL2lcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fT1MgPSB7XG4gICAgICAgICAgICBXaW5kb3dzMTA6IC93aW5kb3dzIG50IDEwXFwuMC9pLFxuICAgICAgICAgICAgV2luZG93czgxOiAvd2luZG93cyBudCA2XFwuMy9pLFxuICAgICAgICAgICAgV2luZG93czg6IC93aW5kb3dzIG50IDZcXC4yL2ksXG4gICAgICAgICAgICBXaW5kb3dzNzogL3dpbmRvd3MgbnQgNlxcLjEvaSxcbiAgICAgICAgICAgIFVua25vd25XaW5kb3dzOiAvd2luZG93cyBudCA2XFwuXFxkKy9pLFxuICAgICAgICAgICAgV2luZG93c1Zpc3RhOiAvd2luZG93cyBudCA2XFwuMC9pLFxuICAgICAgICAgICAgV2luZG93czIwMDM6IC93aW5kb3dzIG50IDVcXC4yL2ksXG4gICAgICAgICAgICBXaW5kb3dzWFA6IC93aW5kb3dzIG50IDVcXC4xL2ksXG4gICAgICAgICAgICBXaW5kb3dzMjAwMDogL3dpbmRvd3MgbnQgNVxcLjAvaSxcbiAgICAgICAgICAgIFdpbmRvd3NQaG9uZTg6IC93aW5kb3dzIHBob25lIDhcXC4vLFxuICAgICAgICAgICAgT1NYQ2hlZXRhaDogL29zIHggMTBbLl9dMC9pLFxuICAgICAgICAgICAgT1NYUHVtYTogL29zIHggMTBbLl9dMShcXER8JCkvaSxcbiAgICAgICAgICAgIE9TWEphZ3VhcjogL29zIHggMTBbLl9dMi9pLFxuICAgICAgICAgICAgT1NYUGFudGhlcjogL29zIHggMTBbLl9dMy9pLFxuICAgICAgICAgICAgT1NYVGlnZXI6IC9vcyB4IDEwWy5fXTQvaSxcbiAgICAgICAgICAgIE9TWExlb3BhcmQ6IC9vcyB4IDEwWy5fXTUvaSxcbiAgICAgICAgICAgIE9TWFNub3dMZW9wYXJkOiAvb3MgeCAxMFsuX102L2ksXG4gICAgICAgICAgICBPU1hMaW9uOiAvb3MgeCAxMFsuX103L2ksXG4gICAgICAgICAgICBPU1hNb3VudGFpbkxpb246IC9vcyB4IDEwWy5fXTgvaSxcbiAgICAgICAgICAgIE9TWE1hdmVyaWNrczogL29zIHggMTBbLl9dOS9pLFxuICAgICAgICAgICAgT1NYWW9zZW1pdGU6IC9vcyB4IDEwWy5fXTEwL2ksXG4gICAgICAgICAgICBPU1hFbENhcGl0YW46IC9vcyB4IDEwWy5fXTExL2ksXG4gICAgICAgICAgICBPU1hTaWVycmE6IC9vcyB4IDEwWy5fXTEyL2ksXG4gICAgICAgICAgICBNYWM6IC9vcyB4L2ksXG4gICAgICAgICAgICBMaW51eDogL2xpbnV4L2ksXG4gICAgICAgICAgICBMaW51eDY0OiAvbGludXggeDg2XzY0L2ksXG4gICAgICAgICAgICBDaHJvbWVPUzogL2Nyb3MvaSxcbiAgICAgICAgICAgIFdpaTogL3dpaS9pLFxuICAgICAgICAgICAgUFMzOiAvcGxheXN0YXRpb24gMy9pLFxuICAgICAgICAgICAgUFNQOiAvcGxheXN0YXRpb24gcG9ydGFibGUvaSxcbiAgICAgICAgICAgIGlQYWQ6IC9cXChpUGFkLipvcyAoXFxkKylbLl9dKFxcZCspL2ksXG4gICAgICAgICAgICBpUGhvbmU6IC9cXChpUGhvbmUuKm9zIChcXGQrKVsuX10oXFxkKykvaSxcbiAgICAgICAgICAgIEJhZGE6IC9CYWRhXFwvKFxcZCspXFwuKFxcZCspL2ksXG4gICAgICAgICAgICBDdXJsOiAvY3VybFxcLyhcXGQrKVxcLihcXGQrKVxcLihcXGQrKS9pXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX1BsYXRmb3JtID0ge1xuICAgICAgICAgICAgV2luZG93czogL3dpbmRvd3MgbnQvaSxcbiAgICAgICAgICAgIFdpbmRvd3NQaG9uZTogL3dpbmRvd3MgcGhvbmUvaSxcbiAgICAgICAgICAgIE1hYzogL21hY2ludG9zaC9pLFxuICAgICAgICAgICAgTGludXg6IC9saW51eC9pLFxuICAgICAgICAgICAgV2lpOiAvd2lpL2ksXG4gICAgICAgICAgICBQbGF5c3RhdGlvbjogL3BsYXlzdGF0aW9uL2ksXG4gICAgICAgICAgICBpUGFkOiAvaXBhZC9pLFxuICAgICAgICAgICAgaVBvZDogL2lwb2QvaSxcbiAgICAgICAgICAgIGlQaG9uZTogL2lwaG9uZS9pLFxuICAgICAgICAgICAgQW5kcm9pZDogL2FuZHJvaWQvaSxcbiAgICAgICAgICAgIEJsYWNrYmVycnk6IC9ibGFja2JlcnJ5L2ksXG4gICAgICAgICAgICBTYW1zdW5nOiAvc2Ftc3VuZy9pLFxuICAgICAgICAgICAgQ3VybDogL2N1cmwvaVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuRGVmYXVsdEFnZW50ID0ge1xuICAgICAgICAgICAgaXNBdXRob3JpdGF0aXZlOiB0cnVlLFxuICAgICAgICAgICAgaXNNb2JpbGU6IGZhbHNlLFxuICAgICAgICAgICAgaXNUYWJsZXQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNpUGFkOiBmYWxzZSxcbiAgICAgICAgICAgIGlzaVBvZDogZmFsc2UsXG4gICAgICAgICAgICBpc2lQaG9uZTogZmFsc2UsXG4gICAgICAgICAgICBpc0FuZHJvaWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNCbGFja2JlcnJ5OiBmYWxzZSxcbiAgICAgICAgICAgIGlzT3BlcmE6IGZhbHNlLFxuICAgICAgICAgICAgaXNJRTogZmFsc2UsXG4gICAgICAgICAgICBpc0VkZ2U6IGZhbHNlLFxuICAgICAgICAgICAgaXNJRUNvbXBhdGliaWxpdHlNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU2FmYXJpOiBmYWxzZSxcbiAgICAgICAgICAgIGlzRmlyZWZveDogZmFsc2UsXG4gICAgICAgICAgICBpc1dlYmtpdDogZmFsc2UsXG4gICAgICAgICAgICBpc0Nocm9tZTogZmFsc2UsXG4gICAgICAgICAgICBpc0tvbnF1ZXJvcjogZmFsc2UsXG4gICAgICAgICAgICBpc09tbmlXZWI6IGZhbHNlLFxuICAgICAgICAgICAgaXNTZWFNb25rZXk6IGZhbHNlLFxuICAgICAgICAgICAgaXNGbG9jazogZmFsc2UsXG4gICAgICAgICAgICBpc0FtYXlhOiBmYWxzZSxcbiAgICAgICAgICAgIGlzUGhhbnRvbUpTOiBmYWxzZSxcbiAgICAgICAgICAgIGlzRXBpcGhhbnk6IGZhbHNlLFxuICAgICAgICAgICAgaXNEZXNrdG9wOiBmYWxzZSxcbiAgICAgICAgICAgIGlzV2luZG93czogZmFsc2UsXG4gICAgICAgICAgICBpc0xpbnV4OiBmYWxzZSxcbiAgICAgICAgICAgIGlzTGludXg2NDogZmFsc2UsXG4gICAgICAgICAgICBpc01hYzogZmFsc2UsXG4gICAgICAgICAgICBpc0Nocm9tZU9TOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQmFkYTogZmFsc2UsXG4gICAgICAgICAgICBpc1NhbXN1bmc6IGZhbHNlLFxuICAgICAgICAgICAgaXNSYXNwYmVycnk6IGZhbHNlLFxuICAgICAgICAgICAgaXNCb3Q6IGZhbHNlLFxuICAgICAgICAgICAgaXNDdXJsOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQW5kcm9pZFRhYmxldDogZmFsc2UsXG4gICAgICAgICAgICBpc1dpbkpzOiBmYWxzZSxcbiAgICAgICAgICAgIGlzS2luZGxlRmlyZTogZmFsc2UsXG4gICAgICAgICAgICBpc1NpbGs6IGZhbHNlLFxuICAgICAgICAgICAgaXNDYXB0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU21hcnRUVjogZmFsc2UsXG4gICAgICAgICAgICBpc1VDOiBmYWxzZSxcbiAgICAgICAgICAgIGlzVG91Y2hTY3JlZW46IGZhbHNlLFxuICAgICAgICAgICAgc2lsa0FjY2VsZXJhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbG9yRGVwdGg6IC0xLFxuICAgICAgICAgICAgcGl4ZWxEZXB0aDogLTEsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBbXSxcbiAgICAgICAgICAgIGNwdUNvcmVzOiAtMSxcbiAgICAgICAgICAgIGxhbmd1YWdlOiAndW5rbm93bicsXG4gICAgICAgICAgICBicm93c2VyOiAndW5rbm93bicsXG4gICAgICAgICAgICB2ZXJzaW9uOiAndW5rbm93bicsXG4gICAgICAgICAgICBvczogJ3Vua25vd24nLFxuICAgICAgICAgICAgcGxhdGZvcm06ICd1bmtub3duJyxcbiAgICAgICAgICAgIGdlb0lwOiB7fSxcbiAgICAgICAgICAgIHNvdXJjZTogJycsXG4gICAgICAgICAgICBoYXNoSW50OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc2ggPSAwLCBpLCBjaHIsIGxlbjtcbiAgICAgICAgICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gaGFzaDsgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjaHIgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgICAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hyO1xuICAgICAgICAgICAgICAgICAgICBoYXNoIHw9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhc2hNRDU6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByb3RhdGVMZWZ0KGxWYWx1ZSwgaVNoaWZ0Qml0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGxWYWx1ZSA8PCBpU2hpZnRCaXRzKSB8IChsVmFsdWUgPj4+ICgzMiAtIGlTaGlmdEJpdHMpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZGRVbnNpZ25lZChsWCwgbFkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxYNCwgbFk0LCBsWDgsIGxZOCwgbFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgbFg4ID0gKGxYICYgMHg4MDAwMDAwMCk7XG4gICAgICAgICAgICAgICAgICAgIGxZOCA9IChsWSAmIDB4ODAwMDAwMDApO1xuICAgICAgICAgICAgICAgICAgICBsWDQgPSAobFggJiAweDQwMDAwMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgbFk0ID0gKGxZICYgMHg0MDAwMDAwMCk7XG4gICAgICAgICAgICAgICAgICAgIGxSZXN1bHQgPSAobFggJiAweDNGRkZGRkZGKSArIChsWSAmIDB4M0ZGRkZGRkYpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChsWDQgJiBsWTQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAobFJlc3VsdCBeIDB4ODAwMDAwMDAgXiBsWDggXiBsWTgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChsWDQgfCBsWTQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsUmVzdWx0ICYgMHg0MDAwMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAobFJlc3VsdCBeIDB4QzAwMDAwMDAgXiBsWDggXiBsWTgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGxSZXN1bHQgXiAweDQwMDAwMDAwIF4gbFg4IF4gbFk4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAobFJlc3VsdCBeIGxYOCBeIGxZOCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnRih4LCB5LCB6KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoeCAmIHkpIHwgKCh+eCkgJiB6KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnRyh4LCB5LCB6KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoeCAmIHopIHwgKHkgJiAofnopKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnSCh4LCB5LCB6KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoeCBeIHkgXiB6KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnSSh4LCB5LCB6KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoeSBeICh4IHwgKH56KSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdGRihhLCBiLCBjLCBkLCB4LCBzLCBhYykge1xuICAgICAgICAgICAgICAgICAgICBhID0gYWRkVW5zaWduZWQoYSwgYWRkVW5zaWduZWQoYWRkVW5zaWduZWQoZ0YoYiwgYywgZCksIHgpLCBhYykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWRkVW5zaWduZWQocm90YXRlTGVmdChhLCBzKSwgYik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ0dHKGEsIGIsIGMsIGQsIHgsIHMsIGFjKSB7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBhZGRVbnNpZ25lZChhLCBhZGRVbnNpZ25lZChhZGRVbnNpZ25lZChnRyhiLCBjLCBkKSwgeCksIGFjKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRVbnNpZ25lZChyb3RhdGVMZWZ0KGEsIHMpLCBiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnSEgoYSwgYiwgYywgZCwgeCwgcywgYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGFkZFVuc2lnbmVkKGEsIGFkZFVuc2lnbmVkKGFkZFVuc2lnbmVkKGdIKGIsIGMsIGQpLCB4KSwgYWMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFkZFVuc2lnbmVkKHJvdGF0ZUxlZnQoYSwgcyksIGIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdJSShhLCBiLCBjLCBkLCB4LCBzLCBhYykge1xuICAgICAgICAgICAgICAgICAgICBhID0gYWRkVW5zaWduZWQoYSwgYWRkVW5zaWduZWQoYWRkVW5zaWduZWQoZ0koYiwgYywgZCksIHgpLCBhYykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWRkVW5zaWduZWQocm90YXRlTGVmdChhLCBzKSwgYik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29udmVydFRvV29yZEFycmF5KHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbFdvcmRDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxNZXNzYWdlTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxOdW1iZXJPZldvcmRzVGVtcDEgPSBsTWVzc2FnZUxlbmd0aCArIDg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsTnVtYmVyT2ZXb3Jkc1RlbXAyID0gKGxOdW1iZXJPZldvcmRzVGVtcDEgLSAobE51bWJlck9mV29yZHNUZW1wMSAlIDY0KSkgLyA2NDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxOdW1iZXJPZldvcmRzID0gKGxOdW1iZXJPZldvcmRzVGVtcDIgKyAxKSAqIDE2O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbFdvcmRBcnJheSA9IG5ldyBBcnJheShsTnVtYmVyT2ZXb3JkcyAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbEJ5dGVQb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsQnl0ZUNvdW50ID0gMDtcblxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobEJ5dGVDb3VudCA8IGxNZXNzYWdlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsV29yZENvdW50ID0gKGxCeXRlQ291bnQgLSAobEJ5dGVDb3VudCAlIDQpKSAvIDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsQnl0ZVBvc2l0aW9uID0gKGxCeXRlQ291bnQgJSA0KSAqIDg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsV29yZEFycmF5W2xXb3JkQ291bnRdID0gKGxXb3JkQXJyYXlbbFdvcmRDb3VudF0gfCAoc3RyaW5nLmNoYXJDb2RlQXQobEJ5dGVDb3VudCkgPDwgbEJ5dGVQb3NpdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbEJ5dGVDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbFdvcmRDb3VudCA9IChsQnl0ZUNvdW50IC0gKGxCeXRlQ291bnQgJSA0KSkgLyA0O1xuICAgICAgICAgICAgICAgICAgICBsQnl0ZVBvc2l0aW9uID0gKGxCeXRlQ291bnQgJSA0KSAqIDg7XG4gICAgICAgICAgICAgICAgICAgIGxXb3JkQXJyYXlbbFdvcmRDb3VudF0gPSBsV29yZEFycmF5W2xXb3JkQ291bnRdIHwgKDB4ODAgPDwgbEJ5dGVQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGxXb3JkQXJyYXlbbE51bWJlck9mV29yZHMgLSAyXSA9IGxNZXNzYWdlTGVuZ3RoIDw8IDM7XG4gICAgICAgICAgICAgICAgICAgIGxXb3JkQXJyYXlbbE51bWJlck9mV29yZHMgLSAxXSA9IGxNZXNzYWdlTGVuZ3RoID4+PiAyOTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxXb3JkQXJyYXk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gd29yZFRvSGV4KGxWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd29yZFRvSGV4VmFsdWUgPSAnJywgd29yZFRvSGV4VmFsdWVUZW1wID0gJycsIGxCeXRlLCBsQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobENvdW50ID0gMDsgbENvdW50IDw9IDM7IGxDb3VudCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsQnl0ZSA9IChsVmFsdWUgPj4+IChsQ291bnQgKiA4KSkgJiAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JkVG9IZXhWYWx1ZVRlbXAgPSAnMCcgKyBsQnl0ZS50b1N0cmluZygxNik7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JkVG9IZXhWYWx1ZSA9IHdvcmRUb0hleFZhbHVlICsgd29yZFRvSGV4VmFsdWVUZW1wLnN1YnN0cih3b3JkVG9IZXhWYWx1ZVRlbXAubGVuZ3RoIC0gMiwgMik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmRUb0hleFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHV0ZjhFbmNvZGUoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cXHJcXG4vZywgJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXRmdGV4dCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgc3RyaW5nLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChjID4gMTI3KSAmJiAoYyA8IDIwNDgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjID4+IDYpIHwgMTkyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMgJiA2MykgfCAxMjgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMgPj4gMTIpIHwgMjI0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjID4+IDYpICYgNjMpIHwgMTI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMgJiA2MykgfCAxMjgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGZ0ZXh0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB4ID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGssIEFBLCBCQiwgQ0MsIERELCBhLCBiLCBjLCBkO1xuICAgICAgICAgICAgICAgIHZhciBTMTEgPSA3LCBTMTIgPSAxMiwgUzEzID0gMTcsIFMxNCA9IDIyO1xuICAgICAgICAgICAgICAgIHZhciBTMjEgPSA1LCBTMjIgPSA5LCBTMjMgPSAxNCwgUzI0ID0gMjA7XG4gICAgICAgICAgICAgICAgdmFyIFMzMSA9IDQsIFMzMiA9IDExLCBTMzMgPSAxNiwgUzM0ID0gMjM7XG4gICAgICAgICAgICAgICAgdmFyIFM0MSA9IDYsIFM0MiA9IDEwLCBTNDMgPSAxNSwgUzQ0ID0gMjE7XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gdXRmOEVuY29kZShzdHJpbmcpO1xuICAgICAgICAgICAgICAgIHggPSBjb252ZXJ0VG9Xb3JkQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgICAgICAgICBhID0gMHg2NzQ1MjMwMTtcbiAgICAgICAgICAgICAgICBiID0gMHhFRkNEQUI4OTtcbiAgICAgICAgICAgICAgICBjID0gMHg5OEJBRENGRTtcbiAgICAgICAgICAgICAgICBkID0gMHgxMDMyNTQ3NjtcblxuICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCB4Lmxlbmd0aDsgayArPSAxNikge1xuICAgICAgICAgICAgICAgICAgICBBQSA9IGE7XG4gICAgICAgICAgICAgICAgICAgIEJCID0gYjtcbiAgICAgICAgICAgICAgICAgICAgQ0MgPSBjO1xuICAgICAgICAgICAgICAgICAgICBERCA9IGQ7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnRkYoYSwgYiwgYywgZCwgeFtrICsgMF0sIFMxMSwgMHhENzZBQTQ3OCk7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnRkYoZCwgYSwgYiwgYywgeFtrICsgMV0sIFMxMiwgMHhFOEM3Qjc1Nik7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnRkYoYywgZCwgYSwgYiwgeFtrICsgMl0sIFMxMywgMHgyNDIwNzBEQik7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnRkYoYiwgYywgZCwgYSwgeFtrICsgM10sIFMxNCwgMHhDMUJEQ0VFRSk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnRkYoYSwgYiwgYywgZCwgeFtrICsgNF0sIFMxMSwgMHhGNTdDMEZBRik7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnRkYoZCwgYSwgYiwgYywgeFtrICsgNV0sIFMxMiwgMHg0Nzg3QzYyQSk7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnRkYoYywgZCwgYSwgYiwgeFtrICsgNl0sIFMxMywgMHhBODMwNDYxMyk7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnRkYoYiwgYywgZCwgYSwgeFtrICsgN10sIFMxNCwgMHhGRDQ2OTUwMSk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnRkYoYSwgYiwgYywgZCwgeFtrICsgOF0sIFMxMSwgMHg2OTgwOThEOCk7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnRkYoZCwgYSwgYiwgYywgeFtrICsgOV0sIFMxMiwgMHg4QjQ0RjdBRik7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnRkYoYywgZCwgYSwgYiwgeFtrICsgMTBdLCBTMTMsIDB4RkZGRjVCQjEpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0ZGKGIsIGMsIGQsIGEsIHhbayArIDExXSwgUzE0LCAweDg5NUNEN0JFKTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdGRihhLCBiLCBjLCBkLCB4W2sgKyAxMl0sIFMxMSwgMHg2QjkwMTEyMik7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnRkYoZCwgYSwgYiwgYywgeFtrICsgMTNdLCBTMTIsIDB4RkQ5ODcxOTMpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0ZGKGMsIGQsIGEsIGIsIHhbayArIDE0XSwgUzEzLCAweEE2Nzk0MzhFKTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdGRihiLCBjLCBkLCBhLCB4W2sgKyAxNV0sIFMxNCwgMHg0OUI0MDgyMSk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnR0coYSwgYiwgYywgZCwgeFtrICsgMV0sIFMyMSwgMHhGNjFFMjU2Mik7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnR0coZCwgYSwgYiwgYywgeFtrICsgNl0sIFMyMiwgMHhDMDQwQjM0MCk7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnR0coYywgZCwgYSwgYiwgeFtrICsgMTFdLCBTMjMsIDB4MjY1RTVBNTEpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0dHKGIsIGMsIGQsIGEsIHhbayArIDBdLCBTMjQsIDB4RTlCNkM3QUEpO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0dHKGEsIGIsIGMsIGQsIHhbayArIDVdLCBTMjEsIDB4RDYyRjEwNUQpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0dHKGQsIGEsIGIsIGMsIHhbayArIDEwXSwgUzIyLCAweDI0NDE0NTMpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0dHKGMsIGQsIGEsIGIsIHhbayArIDE1XSwgUzIzLCAweEQ4QTFFNjgxKTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdHRyhiLCBjLCBkLCBhLCB4W2sgKyA0XSwgUzI0LCAweEU3RDNGQkM4KTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdHRyhhLCBiLCBjLCBkLCB4W2sgKyA5XSwgUzIxLCAweDIxRTFDREU2KTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGdHRyhkLCBhLCBiLCBjLCB4W2sgKyAxNF0sIFMyMiwgMHhDMzM3MDdENik7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnR0coYywgZCwgYSwgYiwgeFtrICsgM10sIFMyMywgMHhGNEQ1MEQ4Nyk7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnR0coYiwgYywgZCwgYSwgeFtrICsgOF0sIFMyNCwgMHg0NTVBMTRFRCk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnR0coYSwgYiwgYywgZCwgeFtrICsgMTNdLCBTMjEsIDB4QTlFM0U5MDUpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0dHKGQsIGEsIGIsIGMsIHhbayArIDJdLCBTMjIsIDB4RkNFRkEzRjgpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0dHKGMsIGQsIGEsIGIsIHhbayArIDddLCBTMjMsIDB4Njc2RjAyRDkpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0dHKGIsIGMsIGQsIGEsIHhbayArIDEyXSwgUzI0LCAweDhEMkE0QzhBKTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdISChhLCBiLCBjLCBkLCB4W2sgKyA1XSwgUzMxLCAweEZGRkEzOTQyKTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGdISChkLCBhLCBiLCBjLCB4W2sgKyA4XSwgUzMyLCAweDg3NzFGNjgxKTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGdISChjLCBkLCBhLCBiLCB4W2sgKyAxMV0sIFMzMywgMHg2RDlENjEyMik7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnSEgoYiwgYywgZCwgYSwgeFtrICsgMTRdLCBTMzQsIDB4RkRFNTM4MEMpO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0hIKGEsIGIsIGMsIGQsIHhbayArIDFdLCBTMzEsIDB4QTRCRUVBNDQpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0hIKGQsIGEsIGIsIGMsIHhbayArIDRdLCBTMzIsIDB4NEJERUNGQTkpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0hIKGMsIGQsIGEsIGIsIHhbayArIDddLCBTMzMsIDB4RjZCQjRCNjApO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0hIKGIsIGMsIGQsIGEsIHhbayArIDEwXSwgUzM0LCAweEJFQkZCQzcwKTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdISChhLCBiLCBjLCBkLCB4W2sgKyAxM10sIFMzMSwgMHgyODlCN0VDNik7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnSEgoZCwgYSwgYiwgYywgeFtrICsgMF0sIFMzMiwgMHhFQUExMjdGQSk7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnSEgoYywgZCwgYSwgYiwgeFtrICsgM10sIFMzMywgMHhENEVGMzA4NSk7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnSEgoYiwgYywgZCwgYSwgeFtrICsgNl0sIFMzNCwgMHg0ODgxRDA1KTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdISChhLCBiLCBjLCBkLCB4W2sgKyA5XSwgUzMxLCAweEQ5RDREMDM5KTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGdISChkLCBhLCBiLCBjLCB4W2sgKyAxMl0sIFMzMiwgMHhFNkRCOTlFNSk7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnSEgoYywgZCwgYSwgYiwgeFtrICsgMTVdLCBTMzMsIDB4MUZBMjdDRjgpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0hIKGIsIGMsIGQsIGEsIHhbayArIDJdLCBTMzQsIDB4QzRBQzU2NjUpO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0lJKGEsIGIsIGMsIGQsIHhbayArIDBdLCBTNDEsIDB4RjQyOTIyNDQpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0lJKGQsIGEsIGIsIGMsIHhbayArIDddLCBTNDIsIDB4NDMyQUZGOTcpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0lJKGMsIGQsIGEsIGIsIHhbayArIDE0XSwgUzQzLCAweEFCOTQyM0E3KTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdJSShiLCBjLCBkLCBhLCB4W2sgKyA1XSwgUzQ0LCAweEZDOTNBMDM5KTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdJSShhLCBiLCBjLCBkLCB4W2sgKyAxMl0sIFM0MSwgMHg2NTVCNTlDMyk7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnSUkoZCwgYSwgYiwgYywgeFtrICsgM10sIFM0MiwgMHg4RjBDQ0M5Mik7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnSUkoYywgZCwgYSwgYiwgeFtrICsgMTBdLCBTNDMsIDB4RkZFRkY0N0QpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0lJKGIsIGMsIGQsIGEsIHhbayArIDFdLCBTNDQsIDB4ODU4NDVERDEpO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0lJKGEsIGIsIGMsIGQsIHhbayArIDhdLCBTNDEsIDB4NkZBODdFNEYpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0lJKGQsIGEsIGIsIGMsIHhbayArIDE1XSwgUzQyLCAweEZFMkNFNkUwKTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGdJSShjLCBkLCBhLCBiLCB4W2sgKyA2XSwgUzQzLCAweEEzMDE0MzE0KTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdJSShiLCBjLCBkLCBhLCB4W2sgKyAxM10sIFM0NCwgMHg0RTA4MTFBMSk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnSUkoYSwgYiwgYywgZCwgeFtrICsgNF0sIFM0MSwgMHhGNzUzN0U4Mik7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnSUkoZCwgYSwgYiwgYywgeFtrICsgMTFdLCBTNDIsIDB4QkQzQUYyMzUpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0lJKGMsIGQsIGEsIGIsIHhbayArIDJdLCBTNDMsIDB4MkFEN0QyQkIpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0lJKGIsIGMsIGQsIGEsIHhbayArIDldLCBTNDQsIDB4RUI4NkQzOTEpO1xuICAgICAgICAgICAgICAgICAgICBhID0gYWRkVW5zaWduZWQoYSwgQUEpO1xuICAgICAgICAgICAgICAgICAgICBiID0gYWRkVW5zaWduZWQoYiwgQkIpO1xuICAgICAgICAgICAgICAgICAgICBjID0gYWRkVW5zaWduZWQoYywgQ0MpO1xuICAgICAgICAgICAgICAgICAgICBkID0gYWRkVW5zaWduZWQoZCwgREQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IHdvcmRUb0hleChhKSArIHdvcmRUb0hleChiKSArIHdvcmRUb0hleChjKSArIHdvcmRUb0hleChkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuQWdlbnQgPSB7fTtcblxuICAgICAgICB0aGlzLmdldEJyb3dzZXIgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLkVkZ2UudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzRWRnZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnRWRnZSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5QaGFudG9tSlMudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzUGhhbnRvbUpTID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdQaGFudG9tSlMnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuS29ucXVlcm9yLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0tvbnF1ZXJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnS29ucXVlcm9yJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLkFtYXlhLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0FtYXlhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdBbWF5YSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5FcGlwaGFueS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNFcGlwaGFueSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnRXBpcGhhbnknO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuU2VhTW9ua2V5LnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc1NlYU1vbmtleSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnU2VhTW9ua2V5JztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLkZsb2NrLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0Zsb2NrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdGbG9jayc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5PbW5pV2ViLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc09tbmlXZWIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09tbmlXZWInO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuT3BlcmEudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzT3BlcmEgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09wZXJhJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLkNocm9taXVtLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0Nocm9tZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ2hyb21pdW0nO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuQ2hyb21lLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0Nocm9tZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ2hyb21lJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLlNhZmFyaS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNTYWZhcmkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1NhZmFyaSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5XaW5Kcy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNXaW5KcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2luSnMnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuSUUudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzSUUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0lFJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLlBTMy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAncHMzJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLlBTUC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAncHNwJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLkZpcmVmb3gudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzRmlyZWZveCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnRmlyZWZveCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5VQy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNVQyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnVUNCcm93c2VyJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgVUEgZG9lcyBub3Qgc3RhcnQgd2l0aCBNb3ppbGxhIGd1ZXNzIHRoZSB1c2VyIGFnZW50LlxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5nLmluZGV4T2YoJ01vemlsbGEnKSAhPT0gMCAmJiAvXihbXFxkXFx3XFwtXFwuXSspXFwvW1xcZFxcd1xcLlxcLV0rL2kudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzQXV0aG9yaXRhdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3Vua25vd24nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZ2V0QnJvd3NlclZlcnNpb24gPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgcmVnZXg7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuQWdlbnQuYnJvd3Nlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VkZ2UnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fVmVyc2lvbnMuRWRnZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnUGhhbnRvbUpTJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLlBoYW50b21KUy50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQ2hyb21lJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLkNocm9tZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQ2hyb21pdW0nOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fVmVyc2lvbnMuQ2hyb21pdW0udGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1NhZmFyaSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5TYWZhcmkudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ09wZXJhJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLk9wZXJhLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMSA/IFJlZ0V4cC4kMSA6IFJlZ0V4cC4kMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdGaXJlZm94JzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLkZpcmVmb3gudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1dpbkpzJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLldpbkpzLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdJRSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5JRS50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDIgPyBSZWdFeHAuJDIgOiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncHMzJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLlBzMy50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncHNwJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLlBzcC50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQW1heWEnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fVmVyc2lvbnMuQW1heWEudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VwaXBoYW55JzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLkVwaXBoYW55LnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdTZWFNb25rZXknOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fVmVyc2lvbnMuU2VhTW9ua2V5LnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdGbG9jayc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5GbG9jay50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnT21uaVdlYic6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5PbW5pV2ViLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdVQ0Jyb3dzZXInOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fVmVyc2lvbnMuVUMudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLkFnZW50LmJyb3dzZXIgIT09ICd1bmtub3duJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKHRoaXMuQWdlbnQuYnJvd3NlciArICdbXFxcXC8gXShbXFxcXGRcXFxcd1xcXFwuXFxcXC1dKyknLCAnaScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2V4LnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldE9TID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5XaW5kb3dzVmlzdGEudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzV2luZG93cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2luZG93cyBWaXN0YSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5XaW5kb3dzNy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNXaW5kb3dzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdXaW5kb3dzIDcnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuV2luZG93czgudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzV2luZG93cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2luZG93cyA4JztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLldpbmRvd3M4MS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNXaW5kb3dzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdXaW5kb3dzIDguMSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5XaW5kb3dzMTAudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzV2luZG93cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2luZG93cyAxMC4wJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLldpbmRvd3MyMDAzLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc1dpbmRvd3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpbmRvd3MgMjAwMyc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5XaW5kb3dzWFAudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzV2luZG93cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2luZG93cyBYUCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5XaW5kb3dzMjAwMC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNXaW5kb3dzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdXaW5kb3dzIDIwMDAnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuV2luZG93c1Bob25lOC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2luZG93cyBQaG9uZSA4JztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLkxpbnV4NjQudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTGludXggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTGludXg2NCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnTGludXggNjQnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuTGludXgudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTGludXggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0xpbnV4JztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLkNocm9tZU9TLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0Nocm9tZU9TID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdDaHJvbWUgT1MnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuV2lpLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdXaWknO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuUFMzLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdQbGF5c3RhdGlvbic7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5QU1AudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1BsYXlzdGF0aW9uJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLk9TWENoZWV0YWgudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTWFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPUyBYIENoZWV0YWgnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuT1NYUHVtYS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNNYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09TIFggUHVtYSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5PU1hKYWd1YXIudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTWFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPUyBYIEphZ3Vhcic7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5PU1hQYW50aGVyLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCBQYW50aGVyJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLk9TWFRpZ2VyLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCBUaWdlcic7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5PU1hMZW9wYXJkLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCBMZW9wYXJkJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLk9TWFNub3dMZW9wYXJkLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCBTbm93IExlb3BhcmQnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuT1NYTGlvbi50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNNYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09TIFggTGlvbic7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5PU1hNb3VudGFpbkxpb24udGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTWFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPUyBYIE1vdW50YWluIExpb24nO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuT1NYTWF2ZXJpY2tzLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCBNYXZlcmlja3MnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuT1NYWW9zZW1pdGUudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTWFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPUyBYIFlvc2VtaXRlJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLk9TWEVsQ2FwaXRhbi50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNNYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09TIFggRWwgQ2FwaXRhbic7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5PU1hTaWVycmEudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTWFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtYWNPUyBTaWVycmEnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuTWFjLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5pUGFkLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc2lQYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHRoaXMuX09TLmlQYWQpWzBdLnJlcGxhY2UoJ18nLCAnLicpO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuaVBob25lLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc2lQaG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcubWF0Y2godGhpcy5fT1MuaVBob25lKVswXS5yZXBsYWNlKCdfJywgJy4nKTtcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLkJhZGEudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzQmFkYSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQmFkYSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5DdXJsLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0N1cmwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0N1cmwnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndW5rbm93bic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5nZXRQbGF0Zm9ybSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uV2luZG93cy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnTWljcm9zb2Z0IFdpbmRvd3MnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uV2luZG93c1Bob25lLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc1dpbmRvd3NQaG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnTWljcm9zb2Z0IFdpbmRvd3MgUGhvbmUnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uTWFjLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdBcHBsZSBNYWMnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uQ3VybC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ3VybCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9QbGF0Zm9ybS5BbmRyb2lkLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0FuZHJvaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0FuZHJvaWQnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uQmxhY2tiZXJyeS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNCbGFja2JlcnJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdCbGFja2JlcnJ5JztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX1BsYXRmb3JtLkxpbnV4LnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdMaW51eCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9QbGF0Zm9ybS5XaWkudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpaSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9QbGF0Zm9ybS5QbGF5c3RhdGlvbi50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnUGxheXN0YXRpb24nO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uaVBhZC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNpUGFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpUGFkJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX1BsYXRmb3JtLmlQb2QudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzaVBvZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaVBvZCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9QbGF0Zm9ybS5pUGhvbmUudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzaVBob25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpUGhvbmUnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uU2Ftc3VuZy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNpU2Ftc3VuZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnU2Ftc3VuZyc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd1bmtub3duJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRlc3RDb21wYXRpYmlsaXR5TW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodGhpcy5BZ2VudC5pc0lFKSB7XG4gICAgICAgICAgICAgICAgaWYgKC9UcmlkZW50XFwvKFxcZClcXC4wL2kudGVzdCh1YS5BZ2VudC5zb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmlkZW50VmVyc2lvbiA9IHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmVyc2lvbiA9IHBhcnNlSW50KHVhLkFnZW50LnZlcnNpb24sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnNpb24gPT09IDcgJiYgdHJpZGVudFZlcnNpb24gPT09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzSUVDb21wYXRpYmlsaXR5TW9kZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC52ZXJzaW9uID0gMTEuMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uID09PSA3ICYmIHRyaWRlbnRWZXJzaW9uID09PSA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc0lFQ29tcGF0aWJpbGl0eU1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQudmVyc2lvbiA9IDEwLjA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gNyAmJiB0cmlkZW50VmVyc2lvbiA9PT0gNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNJRUNvbXBhdGliaWxpdHlNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LnZlcnNpb24gPSA5LjA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gNyAmJiB0cmlkZW50VmVyc2lvbiA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNJRUNvbXBhdGliaWxpdHlNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LnZlcnNpb24gPSA4LjA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0U2lsayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIG5ldyBSZWdFeHAoJ3NpbGsnLCAnZ2knKS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNTaWxrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKC9TaWxrLUFjY2VsZXJhdGVkPXRydWUvZ2kudGVzdCh1YS5BZ2VudC5zb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5TaWxrQWNjZWxlcmF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQWdlbnQuaXNTaWxrID8gJ1NpbGsnIDogZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0S2luZGxlRmlyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIC9LRk9UL2dpLnRlc3QodWEuQWdlbnQuc291cmNlKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0tpbmRsZUZpcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0tpbmRsZSBGaXJlJztcbiAgICAgICAgICAgICAgICBjYXNlIC9LRlRUL2dpLnRlc3QodWEuQWdlbnQuc291cmNlKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0tpbmRsZUZpcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0tpbmRsZSBGaXJlIEhEJztcbiAgICAgICAgICAgICAgICBjYXNlIC9LRkpXSS9naS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNLaW5kbGVGaXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdLaW5kbGUgRmlyZSBIRCA4LjknO1xuICAgICAgICAgICAgICAgIGNhc2UgL0tGSldBL2dpLnRlc3QodWEuQWdlbnQuc291cmNlKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0tpbmRsZUZpcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0tpbmRsZSBGaXJlIEhEIDguOSA0Ryc7XG4gICAgICAgICAgICAgICAgY2FzZSAvS0ZTT1dJL2dpLnRlc3QodWEuQWdlbnQuc291cmNlKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0tpbmRsZUZpcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0tpbmRsZSBGaXJlIEhEIDcnO1xuICAgICAgICAgICAgICAgIGNhc2UgL0tGVEhXSS9naS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNLaW5kbGVGaXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdLaW5kbGUgRmlyZSBIRFggNyc7XG4gICAgICAgICAgICAgICAgY2FzZSAvS0ZUSFdBL2dpLnRlc3QodWEuQWdlbnQuc291cmNlKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0tpbmRsZUZpcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0tpbmRsZSBGaXJlIEhEWCA3IDRHJztcbiAgICAgICAgICAgICAgICBjYXNlIC9LRkFQV0kvZ2kudGVzdCh1YS5BZ2VudC5zb3VyY2UpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzS2luZGxlRmlyZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnS2luZGxlIEZpcmUgSERYIDguOSc7XG4gICAgICAgICAgICAgICAgY2FzZSAvS0ZBUFdBL2dpLnRlc3QodWEuQWdlbnQuc291cmNlKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0tpbmRsZUZpcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0tpbmRsZSBGaXJlIEhEWCA4LjkgNEcnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRlc3RDYXB0aXZlTmV0d29yayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIC9DYXB0aXZlTmV0d29yay9naS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzQ2FwdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzTWFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQucGxhdGZvcm0gPSAnQXBwbGUgTWFjJztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdDYXB0aXZlTmV0d29yayc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudGVzdE1vYmlsZSA9IGZ1bmN0aW9uIHRlc3RNb2JpbGUoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc1dpbmRvd3M6XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc0xpbnV4OlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNNYWM6XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc0Nocm9tZU9TOlxuICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc0Rlc2t0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHVhLkFnZW50LmlzQW5kcm9pZDpcbiAgICAgICAgICAgICAgICBjYXNlIHVhLkFnZW50LmlzU2Ftc3VuZzpcbiAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNNb2JpbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc0Rlc2t0b3AgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNpUGFkOlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNpUG9kOlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNpUGhvbmU6XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc0JhZGE6XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc0JsYWNrYmVycnk6XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc0FuZHJvaWQ6XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc1dpbmRvd3NQaG9uZTpcbiAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNNb2JpbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc0Rlc2t0b3AgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgvbW9iaWxlL2kudGVzdCh1YS5BZ2VudC5zb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNNb2JpbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzRGVza3RvcCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudGVzdFRhYmxldCA9IGZ1bmN0aW9uIHRlc3RUYWJsZXQoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc2lQYWQ6XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc0FuZHJvaWRUYWJsZXQ6XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc0tpbmRsZUZpcmU6XG4gICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzVGFibGV0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoL3RhYmxldC9pLnRlc3QodWEuQWdlbnQuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzVGFibGV0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRlc3ROZ2lueEdlb0lQID0gZnVuY3Rpb24gdGVzdE5naW54R2VvSVAoaGVhZGVycykge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIGlmICgvXkdFT0lQL2kudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHVhLkFnZW50Lmdlb0lwW2tleV0gPSBoZWFkZXJzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0Qm90ID0gZnVuY3Rpb24gdGVzdEJvdCgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgaXNCb3QgPSBJU19CT1RfUkVHRVhQLmV4ZWModWEuQWdlbnQuc291cmNlLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgaWYgKGlzQm90KSB7XG4gICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNCb3QgPSBpc0JvdFsxXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXVhLkFnZW50LmlzQXV0aG9yaXRhdGl2ZSkge1xuICAgICAgICAgICAgICAgIC8vIFRlc3QgdW5hdXRob3JpdGF0aXZlIHBhcnNlIGZvciBgYm90YCBpbiBVQSB0byBmbGFnIGZvciBib3RcbiAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc0JvdCA9IC9ib3QvaS50ZXN0KHVhLkFnZW50LnNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0U21hcnRUViA9IGZ1bmN0aW9uIHRlc3RCb3QoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGlzU21hcnRUViA9IG5ldyBSZWdFeHAoJ3NtYXJ0LXR2fHNtYXJ0dHZ8Z29vZ2xldHZ8YXBwbGV0dnxoYmJ0dnxwb3ZfdHZ8bmV0Y2FzdC50dicsICdnaScpLmV4ZWModWEuQWdlbnQuc291cmNlLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgaWYgKGlzU21hcnRUVikge1xuICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzU21hcnRUViA9IGlzU21hcnRUVlsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRlc3RBbmRyb2lkVGFibGV0ID0gZnVuY3Rpb24gdGVzdEFuZHJvaWRUYWJsZXQoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHVhLkFnZW50LmlzQW5kcm9pZCAmJiAhL21vYmlsZS9pLnRlc3QodWEuQWdlbnQuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzQW5kcm9pZFRhYmxldCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0VG91Y2hTdXBwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIHVhLkFnZW50LmlzVG91Y2hTY3JlZW4gPSAoKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgKG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApIHx8IChuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDApKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldExhZ3VhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgdWEuQWdlbnQubGFuZ3VhZ2UgPSAobmF2aWdhdG9yLmxhbmd1YWdlIHx8IG5hdmlnYXRvci51c2VyTGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZSB8fCBuYXZpZ2F0b3Iuc3lzdGVtTGFuZ3VhZ2UgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5nZXRDb2xvckRlcHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIHVhLkFnZW50LmNvbG9yRGVwdGggPSBzY3JlZW4uY29sb3JEZXB0aCB8fCAtMTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldFNjcmVlblJlc29sdXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgdWEuQWdlbnQucmVzb2x1dGlvbiA9IFtzY3JlZW4uYXZhaWxXaWR0aCwgc2NyZWVuLmF2YWlsSGVpZ2h0XTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldFBpeGVsRGVwdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgdWEuQWdlbnQucGl4ZWxEZXB0aCA9IHNjcmVlbi5waXhlbERlcHRoIHx8IC0xO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZ2V0Q1BVID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIHVhLkFnZW50LmNwdUNvcmVzID0gbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3kgfHwgLTE7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB1YS5EZWZhdWx0QWdlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodWEuRGVmYXVsdEFnZW50Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnRba2V5XSA9IHVhLkRlZmF1bHRBZ2VudFtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1YTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnBhcnNlID0gZnVuY3Rpb24gZ2V0KHNvdXJjZSkge1xuICAgICAgICAgICAgc291cmNlID0gc291cmNlIHx8IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAgICAgICB2YXIgdWEgPSBuZXcgRGV2aWNlVVVJRCgpO1xuICAgICAgICAgICAgdWEuQWdlbnQuc291cmNlID0gc291cmNlLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xuICAgICAgICAgICAgdWEuQWdlbnQub3MgPSB1YS5nZXRPUyh1YS5BZ2VudC5zb3VyY2UpO1xuICAgICAgICAgICAgdWEuQWdlbnQucGxhdGZvcm0gPSB1YS5nZXRQbGF0Zm9ybSh1YS5BZ2VudC5zb3VyY2UpO1xuICAgICAgICAgICAgdWEuQWdlbnQuYnJvd3NlciA9IHVhLmdldEJyb3dzZXIodWEuQWdlbnQuc291cmNlKTtcbiAgICAgICAgICAgIHVhLkFnZW50LnZlcnNpb24gPSB1YS5nZXRCcm93c2VyVmVyc2lvbih1YS5BZ2VudC5zb3VyY2UpO1xuICAgICAgICAgICAgdWEudGVzdEJvdCgpO1xuICAgICAgICAgICAgdWEudGVzdFNtYXJ0VFYoKTtcbiAgICAgICAgICAgIHVhLnRlc3RNb2JpbGUoKTtcbiAgICAgICAgICAgIHVhLnRlc3RBbmRyb2lkVGFibGV0KCk7XG4gICAgICAgICAgICB1YS50ZXN0VGFibGV0KCk7XG4gICAgICAgICAgICB1YS50ZXN0Q29tcGF0aWJpbGl0eU1vZGUoKTtcbiAgICAgICAgICAgIHVhLnRlc3RTaWxrKCk7XG4gICAgICAgICAgICB1YS50ZXN0S2luZGxlRmlyZSgpO1xuICAgICAgICAgICAgdWEudGVzdENhcHRpdmVOZXR3b3JrKCk7XG4gICAgICAgICAgICB1YS50ZXN0VG91Y2hTdXBwb3J0KCk7XG4gICAgICAgICAgICB1YS5nZXRMYWd1YWdlKCk7XG4gICAgICAgICAgICB1YS5nZXRDb2xvckRlcHRoKCk7XG4gICAgICAgICAgICB1YS5nZXRQaXhlbERlcHRoKCk7XG4gICAgICAgICAgICB1YS5nZXRTY3JlZW5SZXNvbHV0aW9uKCk7XG4gICAgICAgICAgICB1YS5nZXRDUFUoKTtcbiAgICAgICAgICAgIHJldHVybiB1YS5BZ2VudDtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldCA9IGZ1bmN0aW9uIChjdXN0b21EYXRhKSB7XG4gICAgICAgICAgICB2YXIgcHJlZiA9ICdhJywgZHUgPSB0aGlzLnBhcnNlKCk7XG4gICAgICAgICAgICB2YXIgZHVhID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHRoaXMub3B0aW9uc1trZXldID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGR1YS5wdXNoKGR1W2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXN0b21EYXRhKSB7XG4gICAgICAgICAgICAgICAgZHVhLnB1c2goY3VzdG9tRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5yZXNvbHV0aW9uICYmIGR1LmlzTW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgZHVhLnB1c2goZHUucmVzb2x1dGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyA4LCA5LCBhLCBiXG4gICAgICAgICAgICBwcmVmID0gJ2InO1xuICAgICAgICAgICAgdmFyIHRtcFV1aWQgPSBkdS5oYXNoTUQ1KGR1YS5qb2luKCc6JykpO1xuICAgICAgICAgICAgdmFyIHV1aWQgPSBbXG4gICAgICAgICAgICAgICAgdG1wVXVpZC5zbGljZSgwLDgpLFxuICAgICAgICAgICAgICAgIHRtcFV1aWQuc2xpY2UoOCwxMiksXG4gICAgICAgICAgICAgICAgJzQnICsgdG1wVXVpZC5zbGljZSgxMiwxNSksXG4gICAgICAgICAgICAgICAgcHJlZiArIHRtcFV1aWQuc2xpY2UoMTUsMTgpLFxuICAgICAgICAgICAgICAgIHRtcFV1aWQuc2xpY2UoMjApXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmV0dXJuIHV1aWQuam9pbignLScpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuQWdlbnQgPSB0aGlzLkRlZmF1bHRBZ2VudDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIGV4cG9ydHMuRGV2aWNlVVVJRCA9IERldmljZVVVSUQ7XG4gICAgcmV0dXJuIG5ldyBEZXZpY2VVVUlEKG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG59KSh0aGlzKTtcbiIsImV4cG9ydCBjb25zdCBCTE9DS0NIQUlOX1NVUFBPUlQgPSAnYmxvY2tjaGFpbl9zdXBwb3J0JztcclxuZXhwb3J0IGNvbnN0IFdBTExFVF9TVVBQT1JUID0gJ3dhbGxldF9zdXBwb3J0JzsiLCJpbXBvcnQgKiBhcyBQbHVnaW5UeXBlcyBmcm9tICcuL1BsdWdpblR5cGVzJztcclxuXHJcbi8qKipcclxuICogU2V0dGluZyB1cCBmb3IgcGx1Z2luIGJhc2VkIGdlbmVyYXRvcnMsXHJcbiAqIHRoaXMgd2lsbCBhZGQgbW9yZSBibG9ja2NoYWluIGNvbXBhdGliaWxpdHkgaW4gdGhlIGZ1dHVyZS5cclxuICovXHJcblxyXG5jbGFzcyBQbHVnaW5SZXBvc2l0b3J5U2luZ2xldG9uIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMucGx1Z2lucyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRQbHVnaW4ocGx1Z2luKXtcclxuXHRcdGlmKCF0aGlzLnBsdWdpbihwbHVnaW4ubmFtZSkpXHJcblx0XHRcdHRoaXMucGx1Z2lucy5wdXNoKHBsdWdpbik7XHJcblx0fVxyXG5cclxuICAgIHdhbGxldHMoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW5zLmZpbHRlcihwbHVnaW4gPT4gcGx1Z2luLnR5cGUgPT09IFBsdWdpblR5cGVzLldBTExFVF9TVVBQT1JUKTtcclxuICAgIH1cclxuXHJcbiAgICBzaWduYXR1cmVQcm92aWRlcnMoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW5zLmZpbHRlcihwbHVnaW4gPT4gcGx1Z2luLnR5cGUgPT09IFBsdWdpblR5cGVzLkJMT0NLQ0hBSU5fU1VQUE9SVCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VwcG9ydGVkQmxvY2tjaGFpbnMoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaWduYXR1cmVQcm92aWRlcnMoKS5tYXAocGx1Z2luID0+IG5hbWUpXHJcbiAgICB9XHJcblxyXG4gICAgcGx1Z2luKG5hbWUpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbnMuZmluZChwbHVnaW4gPT4gcGx1Z2luLm5hbWUgPT09IG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGVuZG9yc2VkTmV0d29ya3MoKXtcclxuICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwodGhpcy5zaWduYXR1cmVQcm92aWRlcnMoKS5tYXAoYXN5bmMgcGx1Z2luID0+IGF3YWl0IHBsdWdpbi5nZXRFbmRvcnNlZE5ldHdvcmsoKSkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBQbHVnaW5SZXBvc2l0b3J5ID0gbmV3IFBsdWdpblJlcG9zaXRvcnlTaW5nbGV0b24oKTtcclxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luUmVwb3NpdG9yeTsiLCJsZXQgc3RvcmFnZSA9IHt9O1xyXG5jb25zdCBnZXRXaW5kb3cgPSAoKSA9PiB7XHJcbiAgICBpZih0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIHdpbmRvdztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlOntcclxuICAgICAgICAgICAgc2V0SXRlbTooa2V5LCB2YWwpID0+IHN0b3JhZ2Vba2V5XSA9IHZhbCxcclxuICAgICAgICAgICAgZ2V0SXRlbTooa2V5KSA9PiBzdG9yYWdlW2tleV0gfHwgbnVsbCxcclxuICAgICAgICAgICAgcmVtb3ZlSXRlbTooa2V5KSA9PiBkZWxldGUgc3RvcmFnZVtrZXldXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9yYWdlU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXt9XHJcblxyXG4gICAgc3RhdGljIHNldEFwcEtleShhcHBrZXkpe1xyXG4gICAgICAgIGdldFdpbmRvdygpLmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhcHBrZXknLCBhcHBrZXkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdGF0aWMgZ2V0QXBwS2V5KCkge1xyXG4gICAgICAgIHJldHVybiBnZXRXaW5kb3coKS5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYXBwa2V5Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJlbW92ZUFwcEtleSgpIHtcclxuICAgICAgICByZXR1cm4gZ2V0V2luZG93KCkubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2FwcGtleScpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzZXROb25jZShub25jZSl7XHJcbiAgICAgICAgZ2V0V2luZG93KCkubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ25vbmNlJywgbm9uY2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdGF0aWMgZ2V0Tm9uY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldFdpbmRvdygpLmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdub25jZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZW1vdmVOb25jZSgpIHtcclxuICAgICAgICByZXR1cm4gZ2V0V2luZG93KCkubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ25vbmNlJyk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgU3RvcmFnZVNlcnZpY2UgZnJvbSAnLi9TdG9yYWdlU2VydmljZSdcclxuaW1wb3J0IGdldFJhbmRvbVZhbHVlcyBmcm9tICdnZXQtcmFuZG9tLXZhbHVlcyc7XHJcbmltcG9ydCBjcmVhdGVIYXNoIGZyb20gJ2NyZWF0ZS1oYXNoJztcclxuaW1wb3J0IFdlYlNvY2tldCBmcm9tICdpc29tb3JwaGljLXdzJztcclxuaW1wb3J0IGRldmljZSBmcm9tIFwiLi4vdXRpbC9EZXZpY2VcIjtcclxuXHJcbmNvbnN0IHN1ZmZpeCA9ICcvc29ja2V0LmlvLz9FSU89MyZ0cmFuc3BvcnQ9d2Vic29ja2V0JztcclxuXHJcblxyXG5jb25zdCBzaGEyNTYgPSBkYXRhID0+IGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShkYXRhKS5kaWdlc3QoJ2hleCcpO1xyXG5cclxuY29uc3QgcmFuZG9tID0gKCkgPT4ge1xyXG4gICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheSgyNCk7XHJcbiAgICBnZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xyXG4gICAgcmV0dXJuIGFycmF5LmpvaW4oJycpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ja2V0U2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoX3BsdWdpbiwgX3RpbWVvdXQpe1xyXG5cdCAgICB0aGlzLnBsdWdpbiA9IF9wbHVnaW47XHJcblx0ICAgIHRoaXMudGltZW91dCA9IF90aW1lb3V0O1xyXG5cclxuICAgICAgICB0aGlzLnV1aWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc29ja2V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGFpcmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vcGVuUmVxdWVzdHMgPSBbXTtcclxuICAgICAgICB0aGlzLnBhaXJpbmdQcm9taXNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnMgPSB7fTtcclxuXHJcblx0ICAgIHRoaXMuYXBwa2V5ID0gU3RvcmFnZVNlcnZpY2UuZ2V0QXBwS2V5KCk7XHJcblx0ICAgIGlmKCF0aGlzLmFwcGtleSkgdGhpcy5hcHBrZXkgPSAnYXBwa2V5OicrcmFuZG9tKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRXZlbnRIYW5kbGVyKGhhbmRsZXIsIGtleSl7XHJcbiAgICAgICAgaWYoIWtleSkga2V5ID0gJ2FwcCc7XHJcblx0ICAgIHRoaXMuZXZlbnRIYW5kbGVyc1trZXldID0gaGFuZGxlcjtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVFdmVudEhhbmRsZXIoa2V5KXtcclxuXHQgICAgaWYoIWtleSkga2V5ID0gJ2FwcCc7XHJcblx0ICAgIGRlbGV0ZSB0aGlzLmV2ZW50SGFuZGxlcnNba2V5XTtcclxuICAgIH1cclxuXHJcbiAgICBsaW5rKF91dWlkID0gbnVsbCwgc29ja2V0SG9zdCA9IG51bGwpe1xyXG5cdCAgICB0aGlzLnV1aWQgPSBfdXVpZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmFjZShbXHJcbiAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5jb25uZWN0ZWQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuc29ja2V0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LmNsb3NlKCk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcy50aW1lb3V0KSksXHJcbiAgICAgICAgICAgIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR1cFNvY2tldCA9ICgpID0+IHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gbXNnID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZHNoYWtpbmcvVXBncmFkaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1zZy5kYXRhLmluZGV4T2YoJzQyL3NjYXR0ZXInKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWFsIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3R5cGUsIGRhdGFdID0gSlNPTi5wYXJzZShtc2cuZGF0YS5yZXBsYWNlKCc0Mi9zY2F0dGVyLCcsICcnKSk7XHJcblxyXG5cdFx0ICAgICAgICAgICAgICAgIGlmKHR5cGUgPT09ICdwb25nJykgcmV0dXJuO1xyXG5cdFx0ICAgICAgICAgICAgICAgIGlmKHR5cGUgPT09ICdwaW5nJykgcmV0dXJuIHRoaXMuc29ja2V0LnNlbmQoYDQyL3NjYXR0ZXIsW1wicG9uZ1wiXWApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHR5cGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGFpcmVkJzogcmV0dXJuIG1zZ19wYWlyZWQoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZWtleSc6IHJldHVybiBtc2dfcmVrZXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FwaSc6IHJldHVybiBtc2dfYXBpKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXZlbnQnOiByZXR1cm4gZXZlbnRfYXBpKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1zZ19wYWlyZWQgPSByZXN1bHQgPT4ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWlyZWQgPSByZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnBhaXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2F2ZWRLZXkgPSBTdG9yYWdlU2VydmljZS5nZXRBcHBLZXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hlZCA9IHRoaXMuYXBwa2V5LmluZGV4T2YoJ2FwcGtleTonKSA+IC0xID8gc2hhMjU2KHRoaXMuYXBwa2V5KSA6IHRoaXMuYXBwa2V5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2F2ZWRLZXkgfHwgc2F2ZWRLZXkgIT09IGhhc2hlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2VTZXJ2aWNlLnNldEFwcEtleShoYXNoZWQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGtleSA9IFN0b3JhZ2VTZXJ2aWNlLmdldEFwcEtleSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWlyaW5nUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnX3Jla2V5ID0gKCkgPT4ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBrZXkgPSAnYXBwa2V5OicrcmFuZG9tKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmQoJ3Jla2V5ZWQnLCB7ZGF0YTp7IGFwcGtleTp0aGlzLmFwcGtleSwgb3JpZ2luOnRoaXMuZ2V0T3JpZ2luKCkgfSwgcGx1Z2luOnRoaXMucGx1Z2lufSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnX2FwaSA9IHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3BlblJlcXVlc3QgPSB0aGlzLm9wZW5SZXF1ZXN0cy5maW5kKHggPT4geC5pZCA9PT0gcmVzcG9uc2UuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighb3BlblJlcXVlc3QpIHJldHVybjtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5SZXF1ZXN0cyA9IHRoaXMub3BlblJlcXVlc3RzLmZpbHRlcih4ID0+IHguaWQgIT09IHJlc3BvbnNlLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRXJyb3JSZXNwb25zZSA9IHR5cGVvZiByZXNwb25zZS5yZXN1bHQgPT09ICdvYmplY3QnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiByZXNwb25zZS5yZXN1bHQgIT09IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHJlc3BvbnNlLnJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnaXNFcnJvcicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNFcnJvclJlc3BvbnNlKSBvcGVuUmVxdWVzdC5yZWplY3QocmVzcG9uc2UucmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBvcGVuUmVxdWVzdC5yZXNvbHZlKHJlc3BvbnNlLnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRfYXBpID0gKHtldmVudCwgcGF5bG9hZH0pID0+IHtcclxuXHRcdFx0XHRcdFx0aWYoT2JqZWN0LmtleXModGhpcy5ldmVudEhhbmRsZXJzKS5sZW5ndGgpIE9iamVjdC5rZXlzKHRoaXMuZXZlbnRIYW5kbGVycykubWFwKGtleSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5ldmVudEhhbmRsZXJzW2tleV0oZXZlbnQsIHBheWxvYWQpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBnZXRIb3N0bmFtZSA9IChwb3J0LCBzc2wpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZihzb2NrZXRIb3N0KSByZXR1cm4gc29ja2V0SG9zdDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3NsID8gYGxvY2FsLmdldC1zY2F0dGVyLmNvbToke3BvcnR9YCA6IGAxMjcuMC4wLjE6JHtwb3J0fWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9ydHMgPSBhd2FpdCAoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHNvY2tldEhvc3QpIHJldHVybiBbNTAwMDZdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGVja1BvcnQgPSAoaG9zdCwgY2IpID0+IGZldGNoKGhvc3QpLnRoZW4ociA9PiByLnRleHQoKSkudGhlbihyID0+IGNiKHIgPT09ICdzY2F0dGVyJykpLmNhdGNoKCgpID0+IGNiKGZhbHNlKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdGFydGluZ1BvcnQgPSA1MDAwNTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXZhaWxhYmxlUG9ydHMgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgWy4uLm5ldyBBcnJheSg1KS5rZXlzKCldLm1hcChpID0+IHtcclxuXHRcdCAgICAgICAgICAgICAgICBjb25zdCBfcG9ydCA9IHN0YXJ0aW5nUG9ydCsoaSoxNTAwKTtcclxuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xyXG5cdFx0XHQgICAgICAgICAgICAgICAgY2hlY2tQb3J0KGBodHRwczovL2ArZ2V0SG9zdG5hbWUoX3BvcnQrMSwgdHJ1ZSksIHggPT4geCA/IGF2YWlsYWJsZVBvcnRzLnB1c2goX3BvcnQrMSkgOiBudWxsKSxcclxuXHRcdFx0ICAgICAgICAgICAgICAgIGNoZWNrUG9ydChgaHR0cDovL2ArZ2V0SG9zdG5hbWUoX3BvcnQsIGZhbHNlKSwgeCA9PiB4ID8gYXZhaWxhYmxlUG9ydHMucHVzaChfcG9ydCkgOiBudWxsKVxyXG5cdFx0ICAgICAgICAgICAgICAgIF0pXHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHJpZXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKHRyaWVzIDwgNTApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoYXZhaWxhYmxlUG9ydHMubGVuZ3RoKSBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dCgoKSA9PiByKHRydWUpLDIpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRyaWVzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWF2YWlsYWJsZVBvcnRzLmxlbmd0aCA/ICAvKiBCQUNLV0FSRFMgQ09NUEFUICovIFs1MDAwNiwgNTAwMDVdIDogYXZhaWxhYmxlUG9ydHMuc29ydCgoYSxiKSA9PiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyBBbHdheXMgdHJ5IHRvIHVzZSBTU0wgZmlyc3QuXHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gIShiICUgMikgPyAxIDogIShhICUgMikgPyAtMSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cnlTb2NrZXQgPSAocG9ydCwgcmVzb2x2ZXIgPSBudWxsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXJlc29sdmVyKSBwcm9taXNlID0gbmV3IFByb21pc2UociA9PiByZXNvbHZlciA9IHIpO1xyXG5cdCAgICAgICAgICAgICAgICBjb25zdCBzc2wgPSAhKHBvcnQgJSAyKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBob3N0bmFtZSA9IGdldEhvc3RuYW1lKHBvcnQsIHNzbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvdG9jb2wgPSBzc2wgPyAnd3NzOi8vJyA6ICd3czovLyc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaG9zdCA9IGAke3Byb3RvY29sfSR7aG9zdG5hbWV9JHtzdWZmaXh9YDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IFdlYlNvY2tldChob3N0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcy5vbmVycm9yID0gKCkgPT4gcmVzb2x2ZXIoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHMub25vcGVuID0gKCkgPT4gcmVzb2x2ZXIocyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9ydHMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBhd2FpdCB0cnlTb2NrZXQocG9ydHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHMpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSBzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBhaXIodHJ1ZSkudGhlbigoKSA9PiByZXNvbHZlKHRydWUpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNldHVwU29ja2V0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF0pXHJcbiAgICB9XHJcblxyXG4gICAgaXNDb25uZWN0ZWQoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaXNQYWlyZWQoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYWlyZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzY29ubmVjdCgpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb25uZWN0JylcclxuICAgICAgICBpZih0aGlzLnNvY2tldCkgdGhpcy5zb2NrZXQuY2xvc2UoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzZW5kQXBpUmVxdWVzdChyZXF1ZXN0KXtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBpZihyZXF1ZXN0LnR5cGUgPT09ICdpZGVudGl0eUZyb21QZXJtaXNzaW9ucycgJiYgIXRoaXMucGFpcmVkKSByZXR1cm4gcmVzb2x2ZShmYWxzZSk7XHJcblxyXG5cdCAgICAgICAgdGhpcy5wYWlyKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZighdGhpcy5wYWlyZWQpIHJldHVybiByZWplY3Qoe2NvZGU6J25vdF9wYWlyZWQnLCBtZXNzYWdlOidUaGUgdXNlciBkaWQgbm90IGFsbG93IHRoaXMgYXBwIHRvIGNvbm5lY3QgdG8gdGhlaXIgU2NhdHRlcid9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZXF1ZXN0IElEIHVzZWQgZm9yIHJlc29sdmluZyBwcm9taXNlc1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5pZCA9IHJhbmRvbSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNldCBBcHBsaWNhdGlvbiBLZXlcclxuICAgICAgICAgICAgICAgIHJlcXVlc3QuYXBwa2V5ID0gdGhpcy5hcHBrZXk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTm9uY2UgdXNlZCB0byBhdXRoZW50aWNhdGUgdGhpcyByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm5vbmNlID0gU3RvcmFnZVNlcnZpY2UuZ2V0Tm9uY2UoKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgLy8gTmV4dCBub25jZSB1c2VkIHRvIGF1dGhlbnRpY2F0ZSB0aGUgbmV4dCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Tm9uY2UgPSByYW5kb20oKTtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3QubmV4dE5vbmNlID0gc2hhMjU2KG5leHROb25jZSk7XHJcbiAgICAgICAgICAgICAgICBTdG9yYWdlU2VydmljZS5zZXROb25jZShuZXh0Tm9uY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHJlcXVlc3QuaGFzT3duUHJvcGVydHkoJ3BheWxvYWQnKSAmJiAhcmVxdWVzdC5wYXlsb2FkLmhhc093blByb3BlcnR5KCdvcmlnaW4nKSlcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQub3JpZ2luID0gdGhpcy5nZXRPcmlnaW4oKTtcclxuXHJcblxyXG5cdFx0ICAgICAgICB0aGlzLm9wZW5SZXF1ZXN0cy5wdXNoKE9iamVjdC5hc3NpZ24ocmVxdWVzdCwge3Jlc29sdmUsIHJlamVjdH0pKTtcclxuXHRcdCAgICAgICAgdGhpcy5zZW5kKCdhcGknLCB7ZGF0YTpyZXF1ZXN0LCBwbHVnaW46dGhpcy5wbHVnaW59KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblx0cGFpcihwYXNzdGhyb3VnaCA9IGZhbHNlKXtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHRoaXMucGFpcmluZ1Byb21pc2UgPSB7cmVzb2x2ZSwgcmVqZWN0fTtcclxuXHRcdFx0dGhpcy5zZW5kKCdwYWlyJywge2RhdGE6eyBhcHBrZXk6dGhpcy5hcHBrZXksIG9yaWdpbjp0aGlzLmdldE9yaWdpbigpLCBwYXNzdGhyb3VnaCB9LCBwbHVnaW46dGhpcy5wbHVnaW59KVxyXG5cdFx0fSlcclxuXHR9XHJcblxyXG5cdHNlbmQodHlwZSA9IG51bGwsIGRhdGEgPSBudWxsKXtcclxuXHRcdGlmKHR5cGUgPT09IG51bGwgJiYgZGF0YSA9PT0gbnVsbCkgdGhpcy5zb2NrZXQuc2VuZCgnNDAvc2NhdHRlcicpO1xyXG5cdFx0ZWxzZSB0aGlzLnNvY2tldC5zZW5kKCc0Mi9zY2F0dGVyLCcgKyBKU09OLnN0cmluZ2lmeShbdHlwZSwgT2JqZWN0LmFzc2lnbihkYXRhLCB7ZGV2aWNlLCB1dWlkOnRoaXMudXVpZH0pXSkpO1xyXG5cdH1cclxuXHJcblxyXG5cdGdldE9yaWdpbigpe1xyXG5cdFx0cmV0dXJuIFNvY2tldFNlcnZpY2UuZ2V0T3JpZ2luT3JQbHVnaW4odGhpcy5wbHVnaW4pO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldE9yaWdpbk9yUGx1Z2luKHBsdWdpbil7XHJcblx0XHRsZXQgb3JpZ2luO1xyXG5cdFx0aWYodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJylcclxuXHRcdFx0aWYobG9jYXRpb24uaGFzT3duUHJvcGVydHkoJ2hvc3RuYW1lJykgJiYgbG9jYXRpb24uaG9zdG5hbWUubGVuZ3RoICYmIGxvY2F0aW9uLmhvc3RuYW1lICE9PSAnbG9jYWxob3N0JylcclxuXHRcdFx0XHRvcmlnaW4gPSBsb2NhdGlvbi5ob3N0bmFtZTtcclxuXHRcdFx0ZWxzZSBvcmlnaW4gPSBwbHVnaW47XHJcblx0XHRlbHNlIG9yaWdpbiA9IHBsdWdpbjtcclxuXHRcdGlmKG9yaWdpbi5zdWJzdHIoMCwgNCkgPT09ICd3d3cuJykgb3JpZ2luID0gb3JpZ2luLnJlcGxhY2UoJ3d3dy4nLCcnKTtcclxuXHRcdHJldHVybiBvcmlnaW47XHJcblx0fVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUGx1Z2luVHlwZXMgZnJvbSBcIi4vUGx1Z2luVHlwZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsdWdpbiB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoX25hbWUgPSAnJywgX3R5cGUgPSAnJyl7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gX25hbWU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gX3R5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHBsYWNlaG9sZGVyKCl7IHJldHVybiBuZXcgUGx1Z2luKCk7IH1cclxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uKXsgcmV0dXJuIE9iamVjdC5hc3NpZ24oUGx1Z2luLnBsYWNlaG9sZGVyKCksIGpzb24pOyB9XHJcblxyXG4gICAgaXNTaWduYXR1cmVQcm92aWRlcigpe1xyXG4gICAgXHRyZXR1cm4gdGhpcy50eXBlID09PSBQbHVnaW5UeXBlcy5CTE9DS0NIQUlOX1NVUFBPUlQ7XHJcblx0fVxyXG5cclxuXHRpc1ZhbGlkKCl7XHJcbiAgICBcdHJldHVybiBPYmplY3Qua2V5cyhQbHVnaW5UeXBlcykubWFwKHggPT4gUGx1Z2luVHlwZXNbeF0pLmluY2x1ZGVzKHRoaXMudHlwZSk7XHJcblx0fVxyXG5cclxufSIsIlxyXG5leHBvcnQgY29uc3QgQmxvY2tjaGFpbnMgPSB7XHJcbiAgICBFT1M6J2VvcycsXHJcbiAgICBFVEg6J2V0aCcsXHJcbiAgICBUUlg6J3RyeCdcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBCbG9ja2NoYWluc0FycmF5ID1cclxuICAgIE9iamVjdC5rZXlzKEJsb2NrY2hhaW5zKS5tYXAoa2V5ID0+ICh7a2V5LCB2YWx1ZTpCbG9ja2NoYWluc1trZXldfSkpOyIsImltcG9ydCB7QmxvY2tjaGFpbnN9IGZyb20gXCIuL0Jsb2NrY2hhaW5zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb2tlbiB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGJsb2NrY2hhaW4gPSBCbG9ja2NoYWlucy5FT1MsIGNvbnRyYWN0ID0gJycsIHN5bWJvbCA9ICcnLCBuYW1lID0gbnVsbCwgZGVjaW1hbHMgPSBudWxsKXtcclxuXHRcdHRoaXMuYmxvY2tjaGFpbiA9IGJsb2NrY2hhaW47XHJcblx0XHR0aGlzLmNvbnRyYWN0ID0gY29udHJhY3Q7XHJcblx0XHR0aGlzLnN5bWJvbCA9IHN5bWJvbDtcclxuXHRcdHRoaXMubmFtZSA9IG5hbWUgPyBuYW1lIDogc3ltYm9sO1xyXG5cdFx0dGhpcy5kZWNpbWFscyA9IGRlY2ltYWxzO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHBsYWNlaG9sZGVyKCl7IHJldHVybiBuZXcgVG9rZW4oKTsgfVxyXG5cdHN0YXRpYyBmcm9tSnNvbihqc29uKXsgcmV0dXJuIE9iamVjdC5hc3NpZ24odGhpcy5wbGFjZWhvbGRlcigpLCBqc29uKTsgfVxyXG59IiwiaW1wb3J0IHtCbG9ja2NoYWluc30gZnJvbSAnLi9CbG9ja2NoYWlucyc7XHJcbmltcG9ydCBUb2tlbiBmcm9tIFwiLi9Ub2tlblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV0d29yayB7XHJcbiAgICBjb25zdHJ1Y3RvcihfbmFtZSA9ICcnLCBfcHJvdG9jb2wgPSAnaHR0cHMnLCBfaG9zdCA9ICcnLCBfcG9ydCA9IDAsIGJsb2NrY2hhaW4gPSBCbG9ja2NoYWlucy5FT1MsIGNoYWluSWQgPSAnJyl7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gX25hbWU7XHJcbiAgICAgICAgdGhpcy5wcm90b2NvbCA9IF9wcm90b2NvbDtcclxuICAgICAgICB0aGlzLmhvc3QgPSBfaG9zdDtcclxuICAgICAgICB0aGlzLnBvcnQgPSBfcG9ydDtcclxuICAgICAgICB0aGlzLmJsb2NrY2hhaW4gPSBibG9ja2NoYWluO1xyXG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgdGhpcy50b2tlbiA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHBsYWNlaG9sZGVyKCl7IHJldHVybiBuZXcgTmV0d29yaygpOyB9XHJcblxyXG4gICAgc3RhdGljIGZyb21Kc29uKGpzb24pe1xyXG4gICAgICAgIGNvbnN0IHAgPSBPYmplY3QuYXNzaWduKE5ldHdvcmsucGxhY2Vob2xkZXIoKSwganNvbik7XHJcbiAgICAgICAgcC5jaGFpbklkID0gcC5jaGFpbklkID8gcC5jaGFpbklkLnRvU3RyaW5nKCkgOiAnJztcclxuXHQgICAgcC50b2tlbiA9IGpzb24uaGFzT3duUHJvcGVydHkoJ3Rva2VuJykgJiYganNvbi50b2tlbiA/IFRva2VuLmZyb21Kc29uKGpzb24udG9rZW4pIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH1cclxuXHJcbiAgICBmdWxsaG9zdCgpeyByZXR1cm4gYCR7dGhpcy5wcm90b2NvbH06Ly8ke3RoaXMuaG9zdH0ke3RoaXMucG9ydCA/ICc6JyA6ICcnfSR7dGhpcy5wb3J0fWAgfVxyXG5cdHVuaXF1ZSgpeyByZXR1cm4gKGAke3RoaXMuYmxvY2tjaGFpbn06YCArICh0aGlzLmNoYWluSWQubGVuZ3RoID8gYGNoYWluOiR7dGhpcy5jaGFpbklkfWAgOiBgJHt0aGlzLmhvc3R9OiR7dGhpcy5wb3J0fWApKS50b0xvd2VyQ2FzZSgpOyB9XHJcbn0iLCJleHBvcnQgY29uc3QgV0FMTEVUX01FVEhPRFMgPSB7XHJcblx0ZGlzY29ubmVjdDonZGlzY29ubmVjdCcsXHJcblx0aXNDb25uZWN0ZWQ6J2lzQ29ubmVjdGVkJyxcclxuXHRpc1BhaXJlZDonaXNQYWlyZWQnLFxyXG5cdGFkZEV2ZW50SGFuZGxlcjonYWRkRXZlbnRIYW5kbGVyJyxcclxuXHRyZW1vdmVFdmVudEhhbmRsZXI6J3JlbW92ZUV2ZW50SGFuZGxlcicsXHJcblx0bGlzdGVuOidsaXN0ZW4nLFxyXG5cclxuXHRnZXRWZXJzaW9uOidnZXRWZXJzaW9uJyxcclxuXHRnZXRJZGVudGl0eTonZ2V0SWRlbnRpdHknLFxyXG5cdGdldEFsbEFjY291bnRzRm9yOidnZXRBbGxBY2NvdW50c0ZvcicsXHJcblx0Z2V0SWRlbnRpdHlGcm9tUGVybWlzc2lvbnM6J2dldElkZW50aXR5RnJvbVBlcm1pc3Npb25zJyxcclxuXHRmb3JnZXRJZGVudGl0eTonZm9yZ2V0SWRlbnRpdHknLFxyXG5cdHVwZGF0ZUlkZW50aXR5Oid1cGRhdGVJZGVudGl0eScsXHJcblx0YXV0aGVudGljYXRlOidhdXRoZW50aWNhdGUnLFxyXG5cdGdldEFyYml0cmFyeVNpZ25hdHVyZTonZ2V0QXJiaXRyYXJ5U2lnbmF0dXJlJyxcclxuXHRnZXRQdWJsaWNLZXk6J2dldFB1YmxpY0tleScsXHJcblx0bGlua0FjY291bnQ6J2xpbmtBY2NvdW50JyxcclxuXHRoYXNBY2NvdW50Rm9yOidoYXNBY2NvdW50Rm9yJyxcclxuXHRzdWdnZXN0TmV0d29yazonc3VnZ2VzdE5ldHdvcmsnLFxyXG5cdHJlcXVlc3RUcmFuc2ZlcjoncmVxdWVzdFRyYW5zZmVyJyxcclxuXHRnZXRBdmF0YXI6J2dldEF2YXRhcicsXHJcblx0cmVxdWVzdFNpZ25hdHVyZToncmVxdWVzdFNpZ25hdHVyZScsXHJcblx0Y3JlYXRlVHJhbnNhY3Rpb246J2NyZWF0ZVRyYW5zYWN0aW9uJyxcclxuXHRhZGRUb2tlbjonYWRkVG9rZW4nLFxyXG59O1xyXG5cclxuY29uc3QgQUxURVJOQVRFUyA9IHtcclxuXHRbV0FMTEVUX01FVEhPRFMuZ2V0SWRlbnRpdHldOidsb2dpbicsXHJcblx0W1dBTExFVF9NRVRIT0RTLmdldEFsbEFjY291bnRzRm9yXTonbG9naW5BbGwnLFxyXG5cdFtXQUxMRVRfTUVUSE9EUy5mb3JnZXRJZGVudGl0eV06J2xvZ291dCcsXHJcblx0W1dBTExFVF9NRVRIT0RTLmdldElkZW50aXR5RnJvbVBlcm1pc3Npb25zXTonY2hlY2tMb2dpbidcclxufTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYWxsZXRJbnRlcmZhY2Uge1xyXG5cclxuXHRjb25zdHJ1Y3RvcihpZGVudGlmaWVyLCBtZXRob2RzLCBjb250ZXh0KXtcclxuXHRcdGNvbnN0IHVuYXZhaWxhYmxlID0gbWV0aG9kID0+ICgpID0+IHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihgJHtpZGVudGlmaWVyfSBkb2VzIG5vdCBzdXBwb3J0IHRoZSAke21ldGhvZH0gbWV0aG9kLmApO1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYCR7aWRlbnRpZmllcn0gZG9lcyBub3Qgc3VwcG9ydCB0aGUgJHttZXRob2R9IG1ldGhvZC5gKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgYmluZFRvQ29udGV4dCA9IChtZXRob2QsIGtleSkgPT4ge1xyXG5cdFx0XHRpZih0eXBlb2YgY29udGV4dFtrZXldID09PSAndW5kZWZpbmVkJyl7XHJcblx0XHRcdFx0Y29udGV4dFtrZXldID0gbWV0aG9kID8gbWV0aG9kIDogdW5hdmFpbGFibGUoa2V5KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihBTFRFUk5BVEVTW2tleV0gJiYgdHlwZW9mIGNvbnRleHRbQUxURVJOQVRFU1trZXldXSA9PT0gJ3VuZGVmaW5lZCcpe1xyXG5cdFx0XHRcdGNvbnRleHRbQUxURVJOQVRFU1trZXldXSA9IGNvbnRleHRba2V5XSA/IGNvbnRleHRba2V5XSA6IHVuYXZhaWxhYmxlKGtleSk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0T2JqZWN0LmtleXMoV0FMTEVUX01FVEhPRFMpLm1hcChrZXkgPT4gYmluZFRvQ29udGV4dChtZXRob2RzW2tleV0sIGtleSkpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGJpbmRCYXNpY3MoY29udGV4dCl7XHJcblxyXG5cdFx0Y29udGV4dC5hY2NvdW50ID0gKGJsb2NrY2hhaW4pID0+IHtcclxuXHRcdFx0aWYoIWNvbnRleHQuaWRlbnRpdHkpIHJldHVybjtcclxuXHRcdFx0aWYoIWNvbnRleHQuaWRlbnRpdHkuYWNjb3VudHMpIHJldHVybjtcclxuXHRcdFx0cmV0dXJuIGNvbnRleHQuaWRlbnRpdHkuYWNjb3VudHMuZmluZCh4ID0+IHguYmxvY2tjaGFpbiA9PT0gYmxvY2tjaGFpbik7XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn0iLCJpbXBvcnQgUGx1Z2luIGZyb20gXCIuLi9wbHVnaW5zL1BsdWdpblwiO1xyXG5pbXBvcnQge0Jsb2NrY2hhaW5zfSBmcm9tIFwiLi4vbW9kZWxzL0Jsb2NrY2hhaW5zXCI7XHJcbmltcG9ydCAqIGFzIFBsdWdpblR5cGVzIGZyb20gXCIuLi9wbHVnaW5zL1BsdWdpblR5cGVzXCI7XHJcbmltcG9ydCBTb2NrZXRTZXJ2aWNlIGZyb20gXCIuLi9zZXJ2aWNlcy9Tb2NrZXRTZXJ2aWNlXCI7XHJcbmltcG9ydCB7RVZFTlRTLCBXQUxMRVRfTUVUSE9EU30gZnJvbSBcIi4uL2luZGV4XCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYWxTb2NrZXQgZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdGNvbnN0cnVjdG9yKGNvbnRleHQsIGhvbGRlckZucyl7XHJcblx0XHRzdXBlcignTG9jYWxTb2NrZXQnLCBQbHVnaW5UeXBlcy5XQUxMRVRfU1VQUE9SVCk7XHJcblx0XHR0aGlzLm5hbWUgPSAnTG9jYWxTb2NrZXQnO1xyXG5cdFx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuXHRcdHRoaXMuaG9sZGVyRm5zID0gaG9sZGVyRm5zO1xyXG5cdH1cclxuXHJcblx0Y29ubmVjdChwbHVnaW5OYW1lLCBvcHRpb25zID0ge30pe1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG5cdFx0XHRpZighcGx1Z2luTmFtZSB8fCAhcGx1Z2luTmFtZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHNwZWNpZnkgYSBuYW1lIGZvciB0aGlzIGNvbm5lY3Rpb25cIik7XHJcblx0XHRcdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtpbml0VGltZW91dDoxMDAwLCBsaW5rVGltZW91dDozMDAwfSwgb3B0aW9ucyk7XHJcblxyXG5cclxuXHRcdFx0Ly8gVHJpZXMgdG8gc2V0IHVwIExvY2FsU29ja2V0IENvbm5lY3Rpb25cclxuXHRcdFx0dGhpcy5zb2NrZXRTZXJ2aWNlID0gbmV3IFNvY2tldFNlcnZpY2UocGx1Z2luTmFtZSwgb3B0aW9ucy5saW5rVGltZW91dCk7XHJcblx0XHRcdHRoaXMuc29ja2V0U2VydmljZS5saW5rKCkudGhlbihhc3luYyBhdXRoZW50aWNhdGVkID0+IHtcclxuXHRcdFx0XHRpZighYXV0aGVudGljYXRlZCkgcmV0dXJuIHJlc29sdmUoZmFsc2UpO1xyXG5cdFx0XHRcdHRoaXMuaG9sZGVyRm5zLmdldCgpLmlzRXh0ZW5zaW9uID0gZmFsc2U7XHJcblx0XHRcdFx0aWYoIXRoaXMuaG9sZGVyRm5zLmdldCgpLndhbGxldCkgdGhpcy5ob2xkZXJGbnMuZ2V0KCkud2FsbGV0ID0gdGhpcy5uYW1lO1xyXG5cdFx0XHRcdHJldHVybiByZXNvbHZlKHRoaXMuc29ja2V0U2VydmljZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSlcclxuXHR9XHJcblxyXG5cdGFzeW5jIHJ1bkFmdGVySW50ZXJmYWNpbmcoKXtcclxuXHRcdHRoaXMuaG9sZGVyRm5zLmdldCgpLmFkZEV2ZW50SGFuZGxlcigodCx4KSA9PiB0aGlzLmV2ZW50SGFuZGxlcih0LHgpLCAnaW50ZXJuYWwnKTtcclxuXHRcdHRoaXMuaG9sZGVyRm5zLmdldCgpLmlkZW50aXR5ID0gYXdhaXQgdGhpcy5ob2xkZXJGbnMuZ2V0KCkuZ2V0SWRlbnRpdHlGcm9tUGVybWlzc2lvbnMoKTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldE1ldGhvZHMoY29udGV4dCl7XHJcblx0XHRjb25zdCBzZXRBbmRSZXR1cm5JZCA9IChpZCwgZm9yZ2V0KSA9PiB7XHJcblx0XHRcdGlmKGlkIHx8IGZvcmdldCkgY29udGV4dC5ob2xkZXJGbnMuZ2V0KCkuaWRlbnRpdHkgPSBpZDtcclxuXHRcdFx0cmV0dXJuIGZvcmdldCB8fCBpZDtcclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmRpc2Nvbm5lY3RdOigpID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5kaXNjb25uZWN0KCksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5pc0Nvbm5lY3RlZF06KCkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLmlzQ29ubmVjdGVkKCksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5pc1BhaXJlZF06KCkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLmlzUGFpcmVkKCksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5hZGRFdmVudEhhbmRsZXJdOihoYW5kbGVyLCBrZXkgPSBudWxsKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2UuYWRkRXZlbnRIYW5kbGVyKGhhbmRsZXIsIGtleSksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5yZW1vdmVFdmVudEhhbmRsZXJdOihrZXkgPSBudWxsKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2UucmVtb3ZlRXZlbnRIYW5kbGVyKGtleSksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5saXN0ZW5dOihoYW5kbGVyKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2UuYWRkRXZlbnRIYW5kbGVyKGhhbmRsZXIpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuZ2V0VmVyc2lvbl06KCkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHsgdHlwZTonZ2V0VmVyc2lvbicsIHBheWxvYWQ6e30gfSksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5nZXRJZGVudGl0eV06KHJlcXVpcmVkRmllbGRzKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J2dldE9yUmVxdWVzdElkZW50aXR5JyxcclxuXHRcdFx0XHRwYXlsb2FkOnsgZmllbGRzOnJlcXVpcmVkRmllbGRzID8gcmVxdWlyZWRGaWVsZHMgOiB7YWNjb3VudHM6W2NvbnRleHQuaG9sZGVyRm5zLmdldCgpLm5ldHdvcmtdfSB9XHJcblx0XHRcdH0pLnRoZW4oc2V0QW5kUmV0dXJuSWQpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuZ2V0QWxsQWNjb3VudHNGb3JdOihyZXF1aXJlZEZpZWxkcykgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidnZXRBbGxBY2NvdW50c0ZvcicsXHJcblx0XHRcdFx0cGF5bG9hZDp7IGZpZWxkczpyZXF1aXJlZEZpZWxkcyB9XHJcblx0XHRcdH0pLnRoZW4oc2V0QW5kUmV0dXJuSWQpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuZ2V0SWRlbnRpdHlGcm9tUGVybWlzc2lvbnNdOigpID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7XHJcblx0XHRcdFx0dHlwZTonaWRlbnRpdHlGcm9tUGVybWlzc2lvbnMnLFxyXG5cdFx0XHRcdHBheWxvYWQ6e31cclxuXHRcdFx0fSkudGhlbihzZXRBbmRSZXR1cm5JZCksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5mb3JnZXRJZGVudGl0eV06KCkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidmb3JnZXRJZGVudGl0eScsXHJcblx0XHRcdFx0cGF5bG9hZDp7fVxyXG5cdFx0XHR9KS50aGVuKHJlcyA9PiBzZXRBbmRSZXR1cm5JZChudWxsLCByZXMpKSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLnVwZGF0ZUlkZW50aXR5XTooe25hbWUsIGt5Y30pID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7XHJcblx0XHRcdFx0dHlwZTondXBkYXRlSWRlbnRpdHknLFxyXG5cdFx0XHRcdHBheWxvYWQ6e25hbWUsIGt5Y31cclxuXHRcdFx0fSkudGhlbihpZCA9PiBpZCA/IHNldEFuZFJldHVybklkKGlkKSA6IG51bGwpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuYXV0aGVudGljYXRlXToobm9uY2UsIGRhdGEgPSBudWxsLCBwdWJsaWNLZXkgPSBudWxsKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J2F1dGhlbnRpY2F0ZScsXHJcblx0XHRcdFx0cGF5bG9hZDp7IG5vbmNlLCBkYXRhLCBwdWJsaWNLZXkgfVxyXG5cdFx0XHR9KSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmdldEFyYml0cmFyeVNpZ25hdHVyZV06KHB1YmxpY0tleSwgZGF0YSkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidyZXF1ZXN0QXJiaXRyYXJ5U2lnbmF0dXJlJyxcclxuXHRcdFx0XHRwYXlsb2FkOnsgcHVibGljS2V5LCBkYXRhIH1cclxuXHRcdFx0fSksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5nZXRQdWJsaWNLZXldOihibG9ja2NoYWluKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J2dldFB1YmxpY0tleScsXHJcblx0XHRcdFx0cGF5bG9hZDp7IGJsb2NrY2hhaW4gfVxyXG5cdFx0XHR9KSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmxpbmtBY2NvdW50XTooYWNjb3VudCwgbmV0d29yaykgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidsaW5rQWNjb3VudCcsXHJcblx0XHRcdFx0cGF5bG9hZDp7IGFjY291bnQsIG5ldHdvcms6bmV0d29yayB8fCBjb250ZXh0LmhvbGRlckZucy5nZXQoKS5uZXR3b3JrIH1cclxuXHRcdFx0fSksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5oYXNBY2NvdW50Rm9yXToobmV0d29yaykgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidoYXNBY2NvdW50Rm9yJyxcclxuXHRcdFx0XHRwYXlsb2FkOnsgbmV0d29yazpuZXR3b3JrIHx8IGNvbnRleHQuaG9sZGVyRm5zLmdldCgpLm5ldHdvcmsgfVxyXG5cdFx0XHR9KSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLnN1Z2dlc3ROZXR3b3JrXToobmV0d29yaykgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidyZXF1ZXN0QWRkTmV0d29yaycsXHJcblx0XHRcdFx0cGF5bG9hZDp7IG5ldHdvcms6bmV0d29yayB8fCBjb250ZXh0LmhvbGRlckZucy5nZXQoKS5uZXR3b3JrIH1cclxuXHRcdFx0fSksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5yZXF1ZXN0VHJhbnNmZXJdOihuZXR3b3JrLCB0bywgYW1vdW50LCBvcHRpb25zID0ge30pID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7XHJcblx0XHRcdFx0dHlwZToncmVxdWVzdFRyYW5zZmVyJyxcclxuXHRcdFx0XHRwYXlsb2FkOntuZXR3b3JrOm5ldHdvcmsgfHwgY29udGV4dC5ob2xkZXJGbnMuZ2V0KCkubmV0d29yaywgdG8sIGFtb3VudCwgb3B0aW9uc31cclxuXHRcdFx0fSksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5nZXRBdmF0YXJdOigpID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7XHJcblx0XHRcdFx0dHlwZTonZ2V0QXZhdGFyJyxcclxuXHRcdFx0XHRwYXlsb2FkOnt9XHJcblx0XHRcdH0pLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMucmVxdWVzdFNpZ25hdHVyZV06KHBheWxvYWQpID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7XHJcblx0XHRcdFx0dHlwZToncmVxdWVzdFNpZ25hdHVyZScsXHJcblx0XHRcdFx0cGF5bG9hZFxyXG5cdFx0XHR9KSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmNyZWF0ZVRyYW5zYWN0aW9uXTooYmxvY2tjaGFpbiwgYWN0aW9ucywgYWNjb3VudCwgbmV0d29yaykgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidjcmVhdGVUcmFuc2FjdGlvbicsXHJcblx0XHRcdFx0cGF5bG9hZDp7IGJsb2NrY2hhaW4sIGFjdGlvbnMsIGFjY291bnQsIG5ldHdvcms6bmV0d29yayB8fCBjb250ZXh0LmhvbGRlckZucy5nZXQoKS5uZXR3b3JrIH1cclxuXHRcdFx0fSksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5hZGRUb2tlbl06KHRva2VuLCBuZXR3b3JrKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J2FkZFRva2VuJyxcclxuXHRcdFx0XHRwYXlsb2FkOnsgdG9rZW4sIG5ldHdvcms6bmV0d29yayB8fCBjb250ZXh0LmhvbGRlckZucy5nZXQoKS5uZXR3b3JrIH1cclxuXHRcdFx0fSksXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRtZXRob2RzKCl7XHJcblx0XHRyZXR1cm4gTG9jYWxTb2NrZXQuZ2V0TWV0aG9kcyh0aGlzKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGV2ZW50SGFuZGxlcihldmVudCwgcGF5bG9hZCl7XHJcblx0XHRzd2l0Y2goZXZlbnQpe1xyXG5cdFx0XHRjYXNlIEVWRU5UUy5EaXNjb25uZWN0ZWQ6XHJcblx0XHRcdFx0dGhpcy5ob2xkZXJGbnMuZ2V0KCkuaWRlbnRpdHkgPSBudWxsO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIEVWRU5UUy5Mb2dnZWRPdXQ6XHJcblx0XHRcdFx0dGhpcy5ob2xkZXJGbnMuZ2V0KCkuaWRlbnRpdHkgPSBhd2FpdCB0aGlzLmhvbGRlckZucy5nZXQoKS5nZXRJZGVudGl0eUZyb21QZXJtaXNzaW9ucygpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH1cclxufSIsImltcG9ydCBQbHVnaW4gZnJvbSBcIi4uL3BsdWdpbnMvUGx1Z2luXCI7XHJcbmltcG9ydCB7QmxvY2tjaGFpbnN9IGZyb20gXCIuLi9tb2RlbHMvQmxvY2tjaGFpbnNcIjtcclxuaW1wb3J0ICogYXMgUGx1Z2luVHlwZXMgZnJvbSBcIi4uL3BsdWdpbnMvUGx1Z2luVHlwZXNcIjtcclxuaW1wb3J0IFNvY2tldFNlcnZpY2UgZnJvbSBcIi4uL3NlcnZpY2VzL1NvY2tldFNlcnZpY2VcIjtcclxuaW1wb3J0IHtFVkVOVFMsIFdBTExFVF9NRVRIT0RTfSBmcm9tIFwiLi4vaW5kZXhcIjtcclxuaW1wb3J0IExvY2FsU29ja2V0IGZyb20gXCIuL0xvY2FsU29ja2V0XCI7XHJcbmltcG9ydCBkZXZpY2UgZnJvbSAnLi4vdXRpbC9EZXZpY2UnO1xyXG5cclxuXHJcblxyXG5jb25zdCBXRUJfSE9TVCA9IGBodHRwczovL3JlbGF5LmdldC1zY2F0dGVyLmNvbTo0NDNgO1xyXG5jb25zdCBTT0NLRVRfSE9TVCA9IGByZWxheXNvY2suZ2V0LXNjYXR0ZXIuY29tOjQ0M2A7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWxheVNvY2tldCBleHRlbmRzIFBsdWdpbiB7XHJcblx0Y29uc3RydWN0b3IoY29udGV4dCwgaG9sZGVyRm5zKXtcclxuXHRcdHN1cGVyKCdSZWxheVNvY2tldCcsIFBsdWdpblR5cGVzLldBTExFVF9TVVBQT1JUKTtcclxuXHRcdHRoaXMubmFtZSA9ICdSZWxheVNvY2tldCc7XHJcblx0XHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG5cdFx0dGhpcy5ob2xkZXJGbnMgPSBob2xkZXJGbnM7XHJcblx0fVxyXG5cclxuXHRjb25uZWN0KHBsdWdpbk5hbWUsIG9wdGlvbnMgPSB7fSl7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgcmVzb2x2ZSA9PiB7XHJcblx0XHRcdGlmKCFwbHVnaW5OYW1lIHx8ICFwbHVnaW5OYW1lLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3Qgc3BlY2lmeSBhIG5hbWUgZm9yIHRoaXMgY29ubmVjdGlvblwiKTtcclxuXHRcdFx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe2luaXRUaW1lb3V0OjEwMDAsIGxpbmtUaW1lb3V0OjMwMDB9LCBvcHRpb25zKTtcclxuXHJcblx0XHRcdGNvbnN0IHV1aWQgPSBhd2FpdCBmZXRjaChgJHtXRUJfSE9TVH0vYXBwL2Nvbm5lY3QvJHtkZXZpY2V9YCkudGhlbih4ID0+IHguanNvbigpKTtcclxuXHRcdFx0aWYoIXV1aWQpIHJldHVybiByZXNvbHZlKGZhbHNlKTtcclxuXHJcblx0XHRcdC8vIFRyaWVzIHRvIHNldCB1cCBMb2NhbFNvY2tldCBDb25uZWN0aW9uXHJcblx0XHRcdHRoaXMuc29ja2V0U2VydmljZSA9IG5ldyBTb2NrZXRTZXJ2aWNlKHBsdWdpbk5hbWUsIG9wdGlvbnMubGlua1RpbWVvdXQpO1xyXG5cdFx0XHR0aGlzLnNvY2tldFNlcnZpY2UubGluayh1dWlkLCBTT0NLRVRfSE9TVCkudGhlbihhc3luYyBhdXRoZW50aWNhdGVkID0+IHtcclxuXHRcdFx0XHRpZighYXV0aGVudGljYXRlZCkgcmV0dXJuIHJlc29sdmUoZmFsc2UpO1xyXG5cdFx0XHRcdHRoaXMuaG9sZGVyRm5zLmdldCgpLmlzRXh0ZW5zaW9uID0gZmFsc2U7XHJcblx0XHRcdFx0aWYoIXRoaXMuaG9sZGVyRm5zLmdldCgpLndhbGxldCkgdGhpcy5ob2xkZXJGbnMuZ2V0KCkud2FsbGV0ID0gdGhpcy5uYW1lO1xyXG5cdFx0XHRcdHJldHVybiByZXNvbHZlKHRoaXMuc29ja2V0U2VydmljZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSlcclxuXHR9XHJcblxyXG5cdGFzeW5jIHJ1bkFmdGVySW50ZXJmYWNpbmcoKXtcclxuXHRcdC8vIHRoaXMuaG9sZGVyRm5zLmdldCgpLmFkZEV2ZW50SGFuZGxlcigodCx4KSA9PiB0aGlzLmV2ZW50SGFuZGxlcih0LHgpLCAnaW50ZXJuYWwnKTtcclxuXHRcdHRoaXMuaG9sZGVyRm5zLmdldCgpLmlkZW50aXR5ID0gYXdhaXQgdGhpcy5ob2xkZXJGbnMuZ2V0KCkuZ2V0SWRlbnRpdHlGcm9tUGVybWlzc2lvbnMoKTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0bWV0aG9kcygpe1xyXG5cdFx0cmV0dXJuIExvY2FsU29ja2V0LmdldE1ldGhvZHModGhpcyk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBldmVudEhhbmRsZXIoZXZlbnQsIHBheWxvYWQpe1xyXG5cdFx0c3dpdGNoKGV2ZW50KXtcclxuXHRcdFx0Y2FzZSBFVkVOVFMuRGlzY29ubmVjdGVkOlxyXG5cdFx0XHRcdHRoaXMuaG9sZGVyRm5zLmdldCgpLmlkZW50aXR5ID0gbnVsbDtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSBFVkVOVFMuTG9nZ2VkT3V0OlxyXG5cdFx0XHRcdHRoaXMuaG9sZGVyRm5zLmdldCgpLmlkZW50aXR5ID0gYXdhaXQgdGhpcy5ob2xkZXJGbnMuZ2V0KCkuZ2V0SWRlbnRpdHlGcm9tUGVybWlzc2lvbnMoKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcbn0iLCJpbXBvcnQgKiBhcyBQbHVnaW5UeXBlcyBmcm9tIFwiLi4vcGx1Z2lucy9QbHVnaW5UeXBlc1wiO1xyXG5pbXBvcnQgUGx1Z2luIGZyb20gXCIuLi9wbHVnaW5zL1BsdWdpblwiO1xyXG5cclxuXHJcbmxldCBpc0F2YWlsYWJsZSA9IGZhbHNlO1xyXG5pZih0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0aWYodHlwZW9mIHdpbmRvdy5zY2F0dGVyICE9PSAndW5kZWZpbmVkJykgaXNBdmFpbGFibGUgPSB0cnVlO1xyXG5cdGVsc2UgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2NhdHRlckxvYWRlZCcsICgpID0+IGlzQXZhaWxhYmxlID0gdHJ1ZSk7XHJcbn1cclxuXHJcbmNvbnN0IHBvbGxFeGlzdGVuY2UgPSBhc3luYyAocmVzb2x2ZXIgPSBudWxsLCB0cmllcyA9IDApID0+IHtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UociA9PiB7XHJcblx0XHRpZighcmVzb2x2ZXIpIHJlc29sdmVyID0gcjtcclxuXHRcdGlmKGlzQXZhaWxhYmxlKSByZXR1cm4gcmVzb2x2ZXIodHJ1ZSk7XHJcblx0XHRpZih0cmllcyA+IDUpIHJldHVybiByZXNvbHZlcihmYWxzZSk7XHJcblx0XHRzZXRUaW1lb3V0KCgpID0+IHBvbGxFeGlzdGVuY2UocmVzb2x2ZXIsIHRyaWVzICsgMSksIDEwMCk7XHJcblx0fSlcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluamVjdGlvbiBleHRlbmRzIFBsdWdpbiB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGNvbnRleHQsIGhvbGRlckZucyl7XHJcblx0XHRzdXBlcignSW5qZWN0ZWRXYWxsZXQnLCBQbHVnaW5UeXBlcy5XQUxMRVRfU1VQUE9SVCk7XHJcblx0XHR0aGlzLm5hbWUgPSAnSW5qZWN0ZWRXYWxsZXQnO1xyXG5cdFx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuXHRcdHRoaXMuaG9sZGVyRm5zID0gaG9sZGVyRm5zO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgY29ubmVjdCgpe1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIHJlc29sdmUgPT4ge1xyXG5cdFx0XHRjb25zdCBmb3VuZCA9IGF3YWl0IHBvbGxFeGlzdGVuY2UoKTtcclxuXHRcdFx0aWYoZm91bmQpIHtcclxuXHRcdFx0XHRpZih0aGlzLmhvbGRlckZucyAmJiAhdGhpcy5ob2xkZXJGbnMuZ2V0KCkud2FsbGV0KSB0aGlzLmhvbGRlckZucy5nZXQoKS53YWxsZXQgPSB0aGlzLm5hbWU7XHJcblx0XHRcdFx0cmVzb2x2ZSgnaW5qZWN0aW9uJyk7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0fVxyXG5cclxuXHRhc3luYyBydW5CZWZvcmVJbnRlcmZhY2luZygpe1xyXG5cdFx0Y29uc3QgbmV0d29yayA9IHRoaXMuY29udGV4dC5uZXR3b3JrO1xyXG5cclxuXHRcdGlmKG5ldHdvcmspe1xyXG5cdFx0XHRjb25zdCBnZXRJZCA9IHdpbmRvdy5zY2F0dGVyLmdldElkZW50aXR5LmJpbmQod2luZG93LnNjYXR0ZXIpO1xyXG5cdFx0XHRjb25zdCB1c2VJZGVudGl0eSA9IHdpbmRvdy5zY2F0dGVyLnVzZUlkZW50aXR5LmJpbmQod2luZG93LnNjYXR0ZXIpO1xyXG5cdFx0XHR3aW5kb3cuc2NhdHRlci5nZXRJZGVudGl0eSA9IGZpZWxkcyA9PiBnZXRJZChmaWVsZHMgPyBmaWVsZHMgOiB7YWNjb3VudHM6W25ldHdvcmtdfSkudGhlbihpZCA9PiB7XHJcblx0XHRcdFx0dGhpcy5ob2xkZXJGbnMuZ2V0KCkuaWRlbnRpdHkgPSBpZDtcclxuXHRcdFx0XHR1c2VJZGVudGl0eShpZCk7XHJcblx0XHRcdFx0cmV0dXJuIGlkO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGNvbnN0IHN1Z2dlc3QgPSB3aW5kb3cuc2NhdHRlci5zdWdnZXN0TmV0d29yay5iaW5kKHdpbmRvdy5zY2F0dGVyKTtcclxuXHRcdFx0d2luZG93LnNjYXR0ZXIuc3VnZ2VzdE5ldHdvcmsgPSBuZXQgPT4gc3VnZ2VzdChuZXQgPyBuZXQgOiBuZXR3b3JrKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZih0aGlzLmhvbGRlckZucy5nZXQoKS53YWxsZXQgPT09IHRoaXMubmFtZSl7XHJcblx0XHRcdHdpbmRvdy5zY2F0dGVyLndhbGxldCA9IHRoaXMubmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmhvbGRlckZucy5zZXQod2luZG93LnNjYXR0ZXIpO1xyXG5cdFx0dGhpcy5jb250ZXh0ID0gdGhpcy5ob2xkZXJGbnMuZ2V0KCk7XHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRhc3luYyBydW5BZnRlckludGVyZmFjaW5nKCl7XHJcblx0XHR0aGlzLmNvbnRleHQuaXNFeHRlbnNpb24gPSB0cnVlO1xyXG5cdFx0dGhpcy5jb250ZXh0LmNvbm5lY3QgPSB0aGlzLmNvbm5lY3Q7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdG1ldGhvZHMoKXsgcmV0dXJuIHtcclxuXHJcblx0fTsgfVxyXG5cclxufSIsImltcG9ydCBQbHVnaW5SZXBvc2l0b3J5IGZyb20gJy4vcGx1Z2lucy9QbHVnaW5SZXBvc2l0b3J5JztcclxuaW1wb3J0IFNvY2tldFNlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy9Tb2NrZXRTZXJ2aWNlJztcclxuaW1wb3J0IFBsdWdpbiBmcm9tICcuL3BsdWdpbnMvUGx1Z2luJztcclxuaW1wb3J0ICogYXMgUGx1Z2luVHlwZXMgZnJvbSAnLi9wbHVnaW5zL1BsdWdpblR5cGVzJztcclxuaW1wb3J0IHsgQmxvY2tjaGFpbnMgfSBmcm9tICcuL21vZGVscy9CbG9ja2NoYWlucyc7XHJcbmltcG9ydCBOZXR3b3JrIGZyb20gJy4vbW9kZWxzL05ldHdvcmsnO1xyXG5pbXBvcnQgV2FsbGV0SW50ZXJmYWNlLCB7V0FMTEVUX01FVEhPRFN9IGZyb20gJy4vbW9kZWxzL1dhbGxldEludGVyZmFjZSc7XHJcbmltcG9ydCBMb2NhbFNvY2tldCBmcm9tIFwiLi93YWxsZXRzL0xvY2FsU29ja2V0XCI7XHJcbmltcG9ydCBSZWxheVNvY2tldCBmcm9tIFwiLi93YWxsZXRzL1JlbGF5U29ja2V0XCI7XHJcbmltcG9ydCBJbmplY3Rpb24gZnJvbSBcIi4vd2FsbGV0cy9JbmplY3Rpb25cIjtcclxuaW1wb3J0IFRva2VuIGZyb20gXCIuL21vZGVscy9Ub2tlblwiO1xyXG5cclxubGV0IG9yaWdpbjtcclxuXHJcbmNvbnN0IEVWRU5UUyA9IHtcclxuXHREaXNjb25uZWN0ZWQ6J2RjZWQnLFxyXG5cdExvZ2dlZE91dDonbG9nb3V0JyxcclxufTtcclxuXHJcbmxldCBzb2NrZXRTZXR0ZXJzID0gW107XHJcbmxldCBob2xkZXJGbnMgPSB7fTtcclxuY2xhc3MgSW5kZXgge1xyXG5cclxuXHRjb25zdHJ1Y3Rvcigpe1xyXG5cdFx0dGhpcy5pZGVudGl0eSA9IG51bGw7XHJcblx0XHR0aGlzLm5ldHdvcmsgPSBudWxsO1xyXG5cclxuXHRcdFBsdWdpblJlcG9zaXRvcnkubG9hZFBsdWdpbihuZXcgTG9jYWxTb2NrZXQodGhpcywgaG9sZGVyRm5zKSk7XHJcblx0XHRQbHVnaW5SZXBvc2l0b3J5LmxvYWRQbHVnaW4obmV3IEluamVjdGlvbih0aGlzLCBob2xkZXJGbnMpKTtcclxuXHR9XHJcblxyXG5cdHVzZVJlbGF5KCl7XHJcblx0XHRjb25zb2xlLmxvZygnVXNpbmcgcmVsYXknKVxyXG5cdFx0UGx1Z2luUmVwb3NpdG9yeS5sb2FkUGx1Z2luKG5ldyBSZWxheVNvY2tldCh0aGlzLCBob2xkZXJGbnMpKTtcclxuXHR9XHJcblxyXG5cdGxvYWRQbHVnaW4ocGx1Z2luKXtcclxuXHRcdGNvbnN0IG5vSWRGdW5jID0gKCkgPT4geyBpZighaG9sZGVyRm5zLmdldCgpLmlkZW50aXR5KSB0aHJvdyBuZXcgRXJyb3IoJ05vIElkZW50aXR5JykgfTtcclxuXHRcdGlmKCFwbHVnaW4uaXNWYWxpZCgpKSB0aHJvdyBuZXcgRXJyb3IoYCR7cGx1Z2luLm5hbWV9IGRvZXNuJ3Qgc2VlbSB0byBiZSBhIHZhbGlkIFNjYXR0ZXJKUyBwbHVnaW4uYCk7XHJcblxyXG5cdFx0UGx1Z2luUmVwb3NpdG9yeS5sb2FkUGx1Z2luKHBsdWdpbik7XHJcblxyXG5cdFx0aWYocGx1Z2luLnR5cGUgPT09IFBsdWdpblR5cGVzLkJMT0NLQ0hBSU5fU1VQUE9SVCl7XHJcblx0XHRcdHRoaXNbcGx1Z2luLm5hbWVdID0gcGx1Z2luLnNpZ25hdHVyZVByb3ZpZGVyKG5vSWRGdW5jLCAoKSA9PiBob2xkZXJGbnMuZ2V0KCkuaWRlbnRpdHkpO1xyXG5cdFx0XHR0aGlzW3BsdWdpbi5uYW1lKydIb29rJ10gPSBwbHVnaW4uaG9va1Byb3ZpZGVyO1xyXG5cdFx0XHRzb2NrZXRTZXR0ZXJzLnB1c2gocGx1Z2luLnNldFNvY2tldFNlcnZpY2UpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKHBsdWdpbi50eXBlID09PSBQbHVnaW5UeXBlcy5XQUxMRVRfU1VQUE9SVCl7XHJcblx0XHRcdHBsdWdpbi5pbml0KHRoaXMsIGhvbGRlckZucywgc29ja2V0U2V0dGVycyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBjb25uZWN0KHBsdWdpbk5hbWUsIG9wdGlvbnMpe1xyXG5cdFx0aWYoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcclxuXHRcdHRoaXMubmV0d29yayA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ25ldHdvcmsnKSA/IG9wdGlvbnMubmV0d29yayA6IG51bGw7XHJcblxyXG5cdFx0Y29uc3Qgd2FsbGV0cyA9IFBsdWdpblJlcG9zaXRvcnkud2FsbGV0cygpO1xyXG5cdFx0cmV0dXJuIGF3YWl0IFByb21pc2UucmFjZSh3YWxsZXRzLm1hcCh3YWxsZXQgPT4ge1xyXG5cdFx0XHRyZXR1cm4gd2FsbGV0LmNvbm5lY3QocGx1Z2luTmFtZSwgb3B0aW9ucykudGhlbihhc3luYyBzb2NrZXRTZXJ2aWNlID0+IHtcclxuXHRcdFx0XHRpZihzb2NrZXRTZXJ2aWNlKSB7XHJcblx0XHRcdFx0XHRpZihzb2NrZXRTZXJ2aWNlICE9PSAnaW5qZWN0aW9uJykgc29ja2V0U2V0dGVycy5tYXAoeCA9PiB4KHNvY2tldFNlcnZpY2UpKTtcclxuXHRcdFx0XHRcdGlmKHR5cGVvZiB3YWxsZXQucnVuQmVmb3JlSW50ZXJmYWNpbmcgPT09ICdmdW5jdGlvbicpIGF3YWl0IHdhbGxldC5ydW5CZWZvcmVJbnRlcmZhY2luZygpO1xyXG5cdFx0XHRcdFx0bmV3IFdhbGxldEludGVyZmFjZSh3YWxsZXQubmFtZSwgd2FsbGV0Lm1ldGhvZHMoKSwgaG9sZGVyRm5zLmdldCgpKTtcclxuXHRcdFx0XHRcdGlmKHR5cGVvZiB3YWxsZXQucnVuQWZ0ZXJJbnRlcmZhY2luZyA9PT0gJ2Z1bmN0aW9uJykgYXdhaXQgd2FsbGV0LnJ1bkFmdGVySW50ZXJmYWNpbmcoKTtcclxuXHRcdFx0XHRcdFdhbGxldEludGVyZmFjZS5iaW5kQmFzaWNzKGhvbGRlckZucy5nZXQoKSk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9KVxyXG5cdFx0fSkuY29uY2F0KG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dCgoKSA9PiByKGZhbHNlKSwgb3B0aW9ucy5pbml0VGltZW91dCB8fCA1MDAwKSkpKTtcclxuXHJcblx0fVxyXG59XHJcblxyXG5cclxuY2xhc3MgSG9sZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9zY2F0dGVyKXtcclxuICAgICAgICB0aGlzLnNjYXR0ZXIgPSBfc2NhdHRlcjtcclxuICAgIH1cclxuXHJcblx0cGx1Z2lucyguLi5wbHVnaW5zKSB7XHJcblx0XHRpZiAoIXRoaXMuc2NhdHRlci5pc0V4dGVuc2lvbikge1xyXG5cdFx0XHRwbHVnaW5zLm1hcChwbHVnaW4gPT4gdGhpcy5zY2F0dGVyLmxvYWRQbHVnaW4ocGx1Z2luKSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRjb25uZWN0KC4uLnBhcmFtcyl7XHJcbiAgICBcdHJldHVybiB0aGlzLnNjYXR0ZXIuY29ubmVjdCguLi5wYXJhbXMpO1xyXG5cdH1cclxuXHJcblx0Y2F0Y2hBbGwoLi4ucGFyYW1zKXtcclxuXHJcblx0fVxyXG59XHJcblxyXG5cclxubGV0IGhvbGRlciA9IG5ldyBQcm94eShuZXcgSG9sZGVyKG5ldyBJbmRleCgpKSwge1xyXG5cdGdldCh0YXJnZXQsbmFtZSkge1xyXG5cdFx0aWYodHlwZW9mIHRhcmdldFtuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0YXJnZXRbbmFtZV07XHJcblx0XHRyZXR1cm4gdGFyZ2V0LnNjYXR0ZXJbbmFtZV07XHJcblx0fVxyXG59KTtcclxuaG9sZGVyRm5zLnNldCA9IHMgPT4gaG9sZGVyLnNjYXR0ZXIgPSBzO1xyXG5ob2xkZXJGbnMuZ2V0ID0gKCkgPT4gaG9sZGVyLnNjYXR0ZXI7XHJcbmlmKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB3aW5kb3cuU2NhdHRlckpTID0gaG9sZGVyO1xyXG5cclxuXHJcbmhvbGRlci5QbHVnaW4gPSBQbHVnaW47XHJcbmhvbGRlci5QbHVnaW5UeXBlcyA9IFBsdWdpblR5cGVzO1xyXG5ob2xkZXIuQmxvY2tjaGFpbnMgPSBCbG9ja2NoYWlucztcclxuaG9sZGVyLk5ldHdvcmsgPSBOZXR3b3JrO1xyXG5ob2xkZXIuVG9rZW4gPSBUb2tlbjtcclxuaG9sZGVyLlNvY2tldFNlcnZpY2UgPSBTb2NrZXRTZXJ2aWNlO1xyXG5ob2xkZXIuRVZFTlRTID0gRVZFTlRTO1xyXG5ob2xkZXIuV2FsbGV0SW50ZXJmYWNlID0gV2FsbGV0SW50ZXJmYWNlO1xyXG5ob2xkZXIuV0FMTEVUX01FVEhPRFMgPSBXQUxMRVRfTUVUSE9EUztcclxuZXhwb3J0IHtQbHVnaW4sIFBsdWdpblR5cGVzLCBCbG9ja2NoYWlucywgTmV0d29yaywgU29ja2V0U2VydmljZSwgRVZFTlRTLCBXYWxsZXRJbnRlcmZhY2UsIFdBTExFVF9NRVRIT0RTfTtcclxuZXhwb3J0IGRlZmF1bHQgaG9sZGVyO1xyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=