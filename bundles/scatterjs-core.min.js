!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=267)}([function(t,e,n){t.exports=n(27)},,function(t,e){function n(t,e,n,r,i,o,s){try{var a=t[o](s),u=a.value}catch(t){return void n(t)}a.done?e(u):Promise.resolve(u).then(r,i)}t.exports=function(t){return function(){var e=this,r=arguments;return new Promise(function(i,o){var s=t.apply(e,r);function a(t){n(s,i,o,a,u,"next",t)}function u(t){n(s,i,o,a,u,"throw",t)}a(void 0)})}}},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},function(t,e,n){var r=n(19),i=n(23);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?i(t):e}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},n(e)}t.exports=n},function(t,e,n){var r=n(24);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},,,function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(39),i=n(40),o=n(30);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):l(t,e);if("Buffer"===e.type&&o(e.data))return l(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(h(e),t=a(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function l(t,e){var n=e.length<0?0:0|d(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return D(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return N(t).length;default:if(r)return D(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:w(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):w(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function w(t,e,n,r,i){var o,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=n;o<a;o++)if(c(t,o)===c(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var f=!0,l=0;l<u;l++)if(c(t,o+l)!==c(e,l)){f=!1;break}if(f)return o}return-1}function v(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function _(t,e,n,r){return q(D(e,t.length-n),t,n,r)}function m(t,e,n,r){return q(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function b(t,e,n,r){return m(t,e,n,r)}function k(t,e,n,r){return q(N(e),t,n,r)}function S(t,e,n,r){return q(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function A(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function E(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,a,u,c=t[i],h=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(h=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(h=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,f=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),i+=f}return function(t){var e=t.length;if(e<=x)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=x));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return h(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?E(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,e,n);case"utf8":case"utf-8":return E(this,e,n);case"ascii":return P(this,e,n);case"latin1":case"binary":return O(this,e,n);case"base64":return A(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(o,s),c=this.slice(r,i),h=t.slice(e,n),f=0;f<a;++f)if(c[f]!==h[f]){o=c[f],s=h[f];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return _(this,t,e,n);case"ascii":return m(this,t,e,n);case"latin1":case"binary":return b(this,t,e,n);case"base64":return k(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var x=4096;function P(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function O(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function T(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=U(t[o]);return i}function R(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function I(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function B(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function C(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function M(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function F(t,e,n,r,o){return o||M(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function j(t,e,n,r,o){return o||M(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||I(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||I(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||I(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||I(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||I(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||I(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||I(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||I(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||I(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||I(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||I(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||I(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||I(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||I(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):C(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):C(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):C(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):C(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return F(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return F(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return j(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return j(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=u.isBuffer(t)?t:D(new u(t,r).toString()),a=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%a]}return this};var W=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function D(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function N(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(W,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(7))},function(t,e,n){"use strict";var r=n(28),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=f;var o=n(22);o.inherits=n(15);var s=n(41),a=n(33);o.inherits(f,s);for(var u=i(a.prototype),c=0;c<u.length;c++){var h=u[c];f.prototype[h]||(f.prototype[h]=a.prototype[h])}function f(t){if(!(this instanceof f))return new f(t);s.call(this,t),a.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",l)}function l(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),f.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var s=Number.isNaN||function(t){return t!=t};function a(){a.init.call(this)}t.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function c(t){return void 0===t._maxListeners?a.defaultMaxListeners:t._maxListeners}function h(t,e,n,r){var i,o,s,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),s=o[e]),void 0===s)s=o[e]=n,++t._eventsCount;else if("function"==typeof s?s=o[e]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=c(t))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return t}function f(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=function(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,t))}.bind(r);return i.listener=n,r.wrapFn=i,i}function l(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):p(i,i.length)}function d(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},a.prototype.getMaxListeners=function(){return c(this)},a.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var c=u.length,h=p(u,c);for(n=0;n<c;++n)o(h[n],this,e)}return!0},a.prototype.addListener=function(t,e){return h(this,t,e,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(t,e){return h(this,t,e,!0)},a.prototype.once=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.on(t,f(this,t,e)),this},a.prototype.prependOnceListener=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.prependListener(t,f(this,t,e)),this},a.prototype.removeListener=function(t,e){var n,r,i,o,s;if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);if(void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,s||e)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},a.prototype.listeners=function(t){return l(this,t,!0)},a.prototype.rawListeners=function(t){return l(this,t,!1)},a.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):d.call(t,e)},a.prototype.listenerCount=d,a.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},,function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,c=[],h=!1,f=-1;function l(){h&&u&&(h=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!h){var t=a(l);h=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||h||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},,function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(e){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?t.exports=r=function(t){return n(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":n(t)},r(e)}t.exports=r},,function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(12).Buffer)},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,e){function n(e,r){return t.exports=n=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},n(e,r)}t.exports=n},function(t,e,n){var r=n(12),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function s(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=s),o(i,s),s.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},s.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},,function(t,e,n){var r=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag";function u(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,o=Object.create(i.prototype),s=new P(r||[]);return o._invoke=function(t,e,n){var r=h;return function(i,o){if(r===l)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return T()}for(n.method=i,n.arg=o;;){var s=n.delegate;if(s){var a=A(s,n);if(a){if(a===p)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===h)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=l;var u=c(t,e,n);if("normal"===u.type){if(r=n.done?d:f,u.arg===p)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,s),o}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var h="suspendedStart",f="suspendedYield",l="executing",d="completed",p={};function g(){}function y(){}function w(){}var v={};v[o]=function(){return this};var _=Object.getPrototypeOf,m=_&&_(_(O([])));m&&m!==n&&r.call(m,o)&&(v=m);var b=w.prototype=g.prototype=Object.create(v);function k(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function S(t){var e;this._invoke=function(n,i){function o(){return new Promise(function(e,o){!function e(n,i,o,s){var a=c(t[n],t,i);if("throw"!==a.type){var u=a.arg,h=u.value;return h&&"object"==typeof h&&r.call(h,"__await")?Promise.resolve(h.__await).then(function(t){e("next",t,o,s)},function(t){e("throw",t,o,s)}):Promise.resolve(h).then(function(t){u.value=t,o(u)},function(t){return e("throw",t,o,s)})}s(a.arg)}(n,i,e,o)})}return e=e?e.then(o,o):o()}}function A(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method))return p;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var i=c(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,p;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,p):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function O(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,s=function n(){for(;++i<t.length;)if(r.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return s.next=s}}return{next:T}}function T(){return{value:e,done:!0}}return y.prototype=b.constructor=w,w.constructor=y,w[a]=y.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},k(S.prototype),S.prototype[s]=function(){return this},t.AsyncIterator=S,t.async=function(e,n,r,i){var o=new S(u(e,n,r,i));return t.isGeneratorFunction(n)?o:o.next().then(function(t){return t.done?t.value:o.next()})},k(b),b[a]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=O,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(x),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function i(r,i){return a.type="throw",a.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o],a=s.completion;if("root"===s.tryLoc)return i("end");if(s.tryLoc<=this.prev){var u=r.call(s,"catchLoc"),c=r.call(s,"finallyLoc");if(u&&c){if(this.prev<s.catchLoc)return i(s.catchLoc,!0);if(this.prev<s.finallyLoc)return i(s.finallyLoc)}else if(u){if(this.prev<s.catchLoc)return i(s.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return i(s.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,p):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),p},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),x(n),p}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;x(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:O(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),p}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,s,a=arguments.length;switch(a){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,n)});case 3:return e.nextTick(function(){t.call(null,n,r)});case 4:return e.nextTick(function(){t.call(null,n,r,i)});default:for(o=new Array(a-1),s=0;s<o.length;)o[s++]=arguments[s];return e.nextTick(function(){t.apply(null,o)})}}}:t.exports=e}).call(this,n(17))},function(t,e,n){var r=n(12),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function s(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=s),o(i,s),s.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},s.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=i;var r=n(14).EventEmitter;function i(){r.call(this)}n(15)(i,r),i.Readable=n(32),i.Writable=n(59),i.Duplex=n(60),i.Transform=n(61),i.PassThrough=n(62),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",a),n.on("close",u));var s=!1;function a(){s||(s=!0,t.end())}function u(){s||(s=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(h(),0===r.listenerCount(this,"error"))throw t}function h(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",a),n.removeListener("close",u),n.removeListener("error",c),t.removeListener("error",c),n.removeListener("end",h),n.removeListener("close",h),t.removeListener("close",h)}return n.on("error",c),t.on("error",c),n.on("end",h),n.on("close",h),t.on("close",h),t.emit("pipe",n),t}},function(t,e,n){(e=t.exports=n(41)).Stream=e,e.Readable=e,e.Writable=n(33),e.Duplex=n(13),e.Transform=n(44),e.PassThrough=n(58)},function(t,e,n){"use strict";(function(e,r,i){var o=n(28);function s(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=v;var a,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;v.WritableState=w;var c=n(22);c.inherits=n(15);var h={deprecate:n(57)},f=n(42),l=n(29).Buffer,d=i.Uint8Array||function(){};var p,g=n(43);function y(){}function w(t,e){a=a||n(13),t=t||{};var r=e instanceof a;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,c=t.writableHighWaterMark,h=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(c||0===c)?c:h,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===t.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(A,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),A(t,e))}(t,n,r,e,i);else{var s=k(n);s||n.corked||n.bufferProcessing||!n.bufferedRequest||b(t,n),r?u(m,t,n,s,i):m(t,n,s,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new s(this)}function v(t){if(a=a||n(13),!(p.call(v,this)||this instanceof a))return new v(t);this._writableState=new w(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),f.call(this)}function _(t,e,n,r,i,o,s){e.writelen=r,e.writecb=s,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function m(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),A(t,e)}function b(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var a=0,u=!0;n;)i[a]=n,n.isBuf||(u=!1),n=n.next,a+=1;i.allBuffers=u,_(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new s(e),e.bufferedRequestCount=0}else{for(;n;){var c=n.chunk,h=n.encoding,f=n.callback;if(_(t,e,!1,e.objectMode?1:c.length,c,h,f),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function k(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function S(t,e){t._final(function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),A(t,e)})}function A(t,e){var n=k(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(S,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}c.inherits(v,f),w.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(w.prototype,"buffer",{get:h.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===v&&(t&&t._writableState instanceof w)}})):p=function(t){return t instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(t,e,n){var r,i=this._writableState,s=!1,a=!i.objectMode&&(r=t,l.isBuffer(r)||r instanceof d);return a&&!l.isBuffer(t)&&(t=function(t){return l.from(t)}(t)),"function"==typeof e&&(n=e,e=null),a?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof n&&(n=y),i.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(a||function(t,e,n,r){var i=!0,s=!1;return null===n?s=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(t.emit("error",s),o.nextTick(r,s),i=!1),i}(this,i,t,n))&&(i.pendingcb++,s=function(t,e,n,r,i,o){if(!n){var s=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=l.from(e,n));return e}(e,r,i);r!==s&&(n=!0,i="buffer",r=s)}var a=e.objectMode?1:r.length;e.length+=a;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else _(t,e,!1,a,r,i,o);return u}(this,i,a,t,e,n)),s},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||b(this,t))},v.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,A(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),v.prototype.destroy=g.destroy,v.prototype._undestroy=g.undestroy,v.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(17),n(48).setImmediate,n(7))},function(t,e,n){"use strict";var r=n(29).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=h,this.end=f,e=3;break;default:return this.write=l,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function h(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function l(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=s(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=s(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=s(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},,,function(t,e,n){var r=n(25).Buffer;function i(t,e){this._block=r.alloc(t),this._finalSize=e,this._blockSize=t,this._len=0}i.prototype.update=function(t,e){"string"==typeof t&&(e=e||"utf8",t=r.from(t,e));for(var n=this._block,i=this._blockSize,o=t.length,s=this._len,a=0;a<o;){for(var u=s%i,c=Math.min(o-a,i-u),h=0;h<c;h++)n[u+h]=t[a+h];a+=c,(s+=c)%i==0&&this._update(n)}return this._len+=o,this},i.prototype.digest=function(t){var e=this._len%this._blockSize;this._block[e]=128,this._block.fill(0,e+1),e>=this._finalSize&&(this._update(this._block),this._block.fill(0));var n=8*this._len;if(n<=4294967295)this._block.writeUInt32BE(n,this._blockSize-4);else{var r=(4294967295&n)>>>0,i=(n-r)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var o=this._hash();return t?o.toString(t):o},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=i},,function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=c(t),r=n[0],s=n[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),u=0,h=s>0?r-4:r,f=0;f<h;f+=4)e=i[t.charCodeAt(f)]<<18|i[t.charCodeAt(f+1)]<<12|i[t.charCodeAt(f+2)]<<6|i[t.charCodeAt(f+3)],a[u++]=e>>16&255,a[u++]=e>>8&255,a[u++]=255&e;2===s&&(e=i[t.charCodeAt(f)]<<2|i[t.charCodeAt(f+1)]>>4,a[u++]=255&e);1===s&&(e=i[t.charCodeAt(f)]<<10|i[t.charCodeAt(f+1)]<<4|i[t.charCodeAt(f+2)]>>2,a[u++]=e>>8&255,a[u++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(h(t,s,s+16383>a?a:s+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function h(t,e,n){for(var i,o,s=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,c=u>>1,h=-7,f=n?i-1:0,l=n?-1:1,d=t[e+f];for(f+=l,o=d&(1<<-h)-1,d>>=-h,h+=a;h>0;o=256*o+t[e+f],f+=l,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=l,h-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=c}return(d?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,a,u,c=8*o-i-1,h=(1<<c)-1,f=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?l/u:l*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=h?(a=0,s=h):s+f>=1?(a=(e*u-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[n+d]=255&s,d+=p,s/=256,c-=8);t[n+d-p]|=128*g}},function(t,e,n){"use strict";(function(e,r){var i=n(28);t.exports=_;var o,s=n(30);_.ReadableState=v;n(14).EventEmitter;var a=function(t,e){return t.listeners(e).length},u=n(42),c=n(29).Buffer,h=e.Uint8Array||function(){};var f=n(22);f.inherits=n(15);var l=n(53),d=void 0;d=l&&l.debuglog?l.debuglog("stream"):function(){};var p,g=n(54),y=n(43);f.inherits(_,u);var w=["error","close","destroy","pause","resume"];function v(t,e){t=t||{};var r=e instanceof(o=o||n(13));this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,s=t.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(s||0===s)?s:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=n(34).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function _(t){if(o=o||n(13),!(this instanceof _))return new _(t);this._readableState=new v(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function m(t,e,n,r,i){var o,s=t._readableState;null===e?(s.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,A(t)}(t,s)):(i||(o=function(t,e){var n;r=e,c.isBuffer(r)||r instanceof h||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(s,e)),o?t.emit("error",o):s.objectMode||e&&e.length>0?("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===c.prototype||(e=function(t){return c.from(t)}(e)),r?s.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):b(t,s,e,!0):s.ended?t.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!n?(e=s.decoder.write(e),s.objectMode||0!==e.length?b(t,s,e,!1):x(t,s)):b(t,s,e,!1))):r||(s.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(s)}function b(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&A(t)),x(t,e)}Object.defineProperty(_.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),_.prototype.destroy=y.destroy,_.prototype._undestroy=y.undestroy,_.prototype._destroy=function(t,e){this.push(null),e(t)},_.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=c.from(t,e),e=""),n=!0),m(this,t,e,!1,n)},_.prototype.unshift=function(t){return m(this,t,null,!0,!1)},_.prototype.isPaused=function(){return!1===this._readableState.flowing},_.prototype.setEncoding=function(t){return p||(p=n(34).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};var k=8388608;function S(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=k?t=k:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function A(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(d("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(E,t):E(t))}function E(t){d("emit readable"),t.emit("readable"),R(t)}function x(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(P,t,e))}function P(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(d("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function O(t){d("readable nexttick read 0"),t.read(0)}function T(t,e){e.reading||(d("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),R(t),e.flowing&&!e.reading&&t.read(0)}function R(t){var e=t._readableState;for(d("flow",e.flowing);e.flowing&&null!==t.read(););}function I(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,s=t>o.length?o.length:t;if(s===o.length?i+=o:i+=o.slice(0,t),0===(t-=s)){s===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(s));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=c.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,s=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,s),0===(t-=s)){s===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(s));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function L(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(B,e,t))}function B(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function C(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}_.prototype.read=function(t){d("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return d("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?L(this):A(this),null;if(0===(t=S(t,e))&&e.ended)return 0===e.length&&L(this),null;var r,i=e.needReadable;return d("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&d("length less than watermark",i=!0),e.ended||e.reading?d("reading or ended",i=!1):i&&(d("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=S(n,e))),null===(r=t>0?I(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&L(this)),null!==r&&this.emit("data",r),r},_.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},_.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?h:_;function c(e,r){d("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,d("cleanup"),t.removeListener("close",w),t.removeListener("finish",v),t.removeListener("drain",f),t.removeListener("error",y),t.removeListener("unpipe",c),n.removeListener("end",h),n.removeListener("end",_),n.removeListener("data",g),l=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||f())}function h(){d("onend"),t.end()}o.endEmitted?i.nextTick(u):n.once("end",u),t.on("unpipe",c);var f=function(t){return function(){var e=t._readableState;d("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,R(t))}}(n);t.on("drain",f);var l=!1;var p=!1;function g(e){d("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==C(o.pipes,t))&&!l&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function y(e){d("onerror",e),_(),t.removeListener("error",y),0===a(t,"error")&&t.emit("error",e)}function w(){t.removeListener("finish",v),_()}function v(){d("onfinish"),t.removeListener("close",w),_()}function _(){d("unpipe"),n.unpipe(t)}return n.on("data",g),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?s(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",y),t.once("close",w),t.once("finish",v),t.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),t},_.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var s=C(e.pipes,t);return-1===s?this:(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},_.prototype.on=function(t,e){var n=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&A(this):i.nextTick(O,this))}return n},_.prototype.addListener=_.prototype.on,_.prototype.resume=function(){var t=this._readableState;return t.flowing||(d("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(T,t,e))}(this,t)),this},_.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},_.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",function(){if(d("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause()))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<w.length;o++)t.on(w[o],this.emit.bind(this,w[o]));return this._read=function(e){d("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(_.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),_._fromList=I}).call(this,n(7),n(17))},function(t,e,n){t.exports=n(14).EventEmitter},function(t,e,n){"use strict";var r=n(28);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return o||s?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";t.exports=s;var r=n(13),i=n(22);function o(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function s(t){if(!(this instanceof s))return new s(t);r.call(this,t),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",a)}function a(){var t=this;"function"==typeof this._flush?this._flush(function(e,n){u(t,e,n)}):u(this,null,null)}function u(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(15),i.inherits(s,r),s.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},s.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},s.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},s.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},s.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,function(t){e(t),n.emit("close")})}},,,,function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(56),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(7))},,,,,function(t,e){},function(t,e,n){"use strict";var r=n(29).Buffer,i=n(55);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e,n,i,o=r.allocUnsafe(t>>>0),s=this.head,a=0;s;)e=s.data,n=o,i=a,e.copy(n,i),a+=s.data.length,s=s.next;return o},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,s,a,u=1,c={},h=!1,f=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){p(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){o.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&p(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),r=function(e){t.postMessage(s+e,"*")}),l.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return c[u]=i,r(u),u++},l.clearImmediate=d}function d(t){delete c[t]}function p(t){if(h)setTimeout(p,0,t);else{var e=c[t];if(e){h=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{d(t),h=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(7),n(17))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(7))},function(t,e,n){"use strict";t.exports=o;var r=n(44),i=n(22);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(15),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(33)},function(t,e,n){t.exports=n(13)},function(t,e,n){t.exports=n(32).Transform},function(t,e,n){t.exports=n(32).PassThrough},,,,,,,,,,,,,,function(t,e,n){"use strict";var r=n(25).Buffer,i=n(31).Transform;function o(t){i.call(this),this._block=r.allocUnsafe(t),this._blockSize=t,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}n(21)(o,i),o.prototype._transform=function(t,e,n){var r=null;try{this.update(t,e)}catch(t){r=t}n(r)},o.prototype._flush=function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)},o.prototype.update=function(t,e){if(function(t,e){if(!r.isBuffer(t)&&"string"!=typeof t)throw new TypeError(e+" must be a string or a buffer")}(t,"Data"),this._finalized)throw new Error("Digest already called");r.isBuffer(t)||(t=r.from(t,e));for(var n=this._block,i=0;this._blockOffset+t.length-i>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)n[o++]=t[i++];this._update(),this._blockOffset=0}for(;i<t.length;)n[this._blockOffset++]=t[i++];for(var s=0,a=8*t.length;a>0;++s)this._length[s]+=a,(a=this._length[s]/4294967296|0)>0&&(this._length[s]-=4294967296*a);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var e=this._digest();void 0!==t&&(e=e.toString(t)),this._block.fill(0),this._blockOffset=0;for(var n=0;n<4;++n)this._length[n]=0;return e},o.prototype._digest=function(){throw new Error("_digest is not implemented")},t.exports=o},function(t,e,n){var r=n(21),i=n(37),o=n(25).Buffer,s=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],a=new Array(64);function u(){this.init(),this._w=a,i.call(this,64,56)}function c(t,e,n){return n^t&(e^n)}function h(t,e,n){return t&e|n&(t|e)}function f(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function l(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function d(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}r(u,i),u.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},u.prototype._update=function(t){for(var e,n=this._w,r=0|this._a,i=0|this._b,o=0|this._c,a=0|this._d,u=0|this._e,p=0|this._f,g=0|this._g,y=0|this._h,w=0;w<16;++w)n[w]=t.readInt32BE(4*w);for(;w<64;++w)n[w]=0|(((e=n[w-2])>>>17|e<<15)^(e>>>19|e<<13)^e>>>10)+n[w-7]+d(n[w-15])+n[w-16];for(var v=0;v<64;++v){var _=y+l(u)+c(u,p,g)+s[v]+n[v]|0,m=f(r)+h(r,i,o)|0;y=g,g=p,p=u,u=a+_|0,a=o,o=i,i=r,r=_+m|0}this._a=r+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=a+this._d|0,this._e=u+this._e|0,this._f=p+this._f|0,this._g=g+this._g|0,this._h=y+this._h|0},u.prototype._hash=function(){var t=o.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=u},function(t,e,n){var r=n(21),i=n(37),o=n(25).Buffer,s=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],a=new Array(160);function u(){this.init(),this._w=a,i.call(this,128,112)}function c(t,e,n){return n^t&(e^n)}function h(t,e,n){return t&e|n&(t|e)}function f(t,e){return(t>>>28|e<<4)^(e>>>2|t<<30)^(e>>>7|t<<25)}function l(t,e){return(t>>>14|e<<18)^(t>>>18|e<<14)^(e>>>9|t<<23)}function d(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^t>>>7}function p(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^(t>>>7|e<<25)}function g(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^t>>>6}function y(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^(t>>>6|e<<26)}function w(t,e){return t>>>0<e>>>0?1:0}r(u,i),u.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},u.prototype._update=function(t){for(var e=this._w,n=0|this._ah,r=0|this._bh,i=0|this._ch,o=0|this._dh,a=0|this._eh,u=0|this._fh,v=0|this._gh,_=0|this._hh,m=0|this._al,b=0|this._bl,k=0|this._cl,S=0|this._dl,A=0|this._el,E=0|this._fl,x=0|this._gl,P=0|this._hl,O=0;O<32;O+=2)e[O]=t.readInt32BE(4*O),e[O+1]=t.readInt32BE(4*O+4);for(;O<160;O+=2){var T=e[O-30],R=e[O-30+1],I=d(T,R),L=p(R,T),B=g(T=e[O-4],R=e[O-4+1]),C=y(R,T),M=e[O-14],F=e[O-14+1],j=e[O-32],W=e[O-32+1],U=L+F|0,D=I+M+w(U,L)|0;D=(D=D+B+w(U=U+C|0,C)|0)+j+w(U=U+W|0,W)|0,e[O]=D,e[O+1]=U}for(var N=0;N<160;N+=2){D=e[N],U=e[N+1];var q=h(n,r,i),K=h(m,b,k),Y=f(n,m),H=f(m,n),X=l(a,A),V=l(A,a),J=s[N],$=s[N+1],z=c(a,u,v),G=c(A,E,x),Q=P+V|0,Z=_+X+w(Q,P)|0;Z=(Z=(Z=Z+z+w(Q=Q+G|0,G)|0)+J+w(Q=Q+$|0,$)|0)+D+w(Q=Q+U|0,U)|0;var tt=H+K|0,et=Y+q+w(tt,H)|0;_=v,P=x,v=u,x=E,u=a,E=A,a=o+Z+w(A=S+Q|0,S)|0,o=i,S=k,i=r,k=b,r=n,b=m,n=Z+et+w(m=Q+tt|0,Q)|0}this._al=this._al+m|0,this._bl=this._bl+b|0,this._cl=this._cl+k|0,this._dl=this._dl+S|0,this._el=this._el+A|0,this._fl=this._fl+E|0,this._gl=this._gl+x|0,this._hl=this._hl+P|0,this._ah=this._ah+n+w(this._al,m)|0,this._bh=this._bh+r+w(this._bl,b)|0,this._ch=this._ch+i+w(this._cl,k)|0,this._dh=this._dh+o+w(this._dl,S)|0,this._eh=this._eh+a+w(this._el,A)|0,this._fh=this._fh+u+w(this._fl,E)|0,this._gh=this._gh+v+w(this._gl,x)|0,this._hh=this._hh+_+w(this._hl,P)|0},u.prototype._hash=function(){var t=o.allocUnsafe(64);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),e(this._gh,this._gl,48),e(this._hh,this._hl,56),t},t.exports=u},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){var r=n(120),i=n(121),o=n(122);t.exports=function(t){return r(t)||i(t)||o()}},function(t,e,n){var r=n(123),i=n(124),o=n(125);t.exports=function(t,e){return r(t)||i(t,e)||o()}},function(t,e,n){var r=n(126),i=n(127);t.exports=function(t){if(r.crypto&&r.crypto.getRandomValues)return r.crypto.getRandomValues(t);if("object"==typeof r.msCrypto&&"function"==typeof r.msCrypto.getRandomValues)return r.msCrypto.getRandomValues(t);if(i.randomBytes){if(!(t instanceof Uint8Array))throw new TypeError("expected Uint8Array");if(t.length>65536){var e=new Error;throw e.code=22,e.message="Failed to execute 'getRandomValues' on 'Crypto': The ArrayBufferView's byte length ("+t.length+") exceeds the number of bytes of entropy available via this API (65536).",e.name="QuotaExceededError",e}var n=i.randomBytes(t.length);return t.set(n),t}throw new Error("No secure random number generator available.")}},function(t,e,n){"use strict";var r=n(21),i=n(128),o=n(129),s=n(130),a=n(135);function u(t){a.call(this,"digest"),this._hash=t}r(u,a),u.prototype._update=function(t){this._hash.update(t)},u.prototype._final=function(){return this._hash.digest()},t.exports=function(t){return"md5"===(t=t.toLowerCase())?new i:"rmd160"===t||"ripemd160"===t?new o:new u(s(t))}},function(t,e,n){(function(e){var n=null;"undefined"!=typeof WebSocket?n=WebSocket:"undefined"!=typeof MozWebSocket?n=MozWebSocket:void 0!==e?n=e.WebSocket||e.MozWebSocket:"undefined"!=typeof window?n=window.WebSocket||window.MozWebSocket:"undefined"!=typeof self&&(n=self.WebSocket||self.MozWebSocket),t.exports=n}).call(this,n(7))},,,,,function(t,e){t.exports=function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}},function(t,e){t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(t,e,n){(function(e){var n;n="undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{},t.exports=n}).call(this,n(7))},function(t,e){},function(t,e,n){"use strict";var r=n(21),i=n(76),o=n(25).Buffer,s=new Array(16);function a(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function u(t,e){return t<<e|t>>>32-e}function c(t,e,n,r,i,o,s){return u(t+(e&n|~e&r)+i+o|0,s)+e|0}function h(t,e,n,r,i,o,s){return u(t+(e&r|n&~r)+i+o|0,s)+e|0}function f(t,e,n,r,i,o,s){return u(t+(e^n^r)+i+o|0,s)+e|0}function l(t,e,n,r,i,o,s){return u(t+(n^(e|~r))+i+o|0,s)+e|0}r(a,i),a.prototype._update=function(){for(var t=s,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);var n=this._a,r=this._b,i=this._c,o=this._d;n=c(n,r,i,o,t[0],3614090360,7),o=c(o,n,r,i,t[1],3905402710,12),i=c(i,o,n,r,t[2],606105819,17),r=c(r,i,o,n,t[3],3250441966,22),n=c(n,r,i,o,t[4],4118548399,7),o=c(o,n,r,i,t[5],1200080426,12),i=c(i,o,n,r,t[6],2821735955,17),r=c(r,i,o,n,t[7],4249261313,22),n=c(n,r,i,o,t[8],1770035416,7),o=c(o,n,r,i,t[9],2336552879,12),i=c(i,o,n,r,t[10],4294925233,17),r=c(r,i,o,n,t[11],2304563134,22),n=c(n,r,i,o,t[12],1804603682,7),o=c(o,n,r,i,t[13],4254626195,12),i=c(i,o,n,r,t[14],2792965006,17),n=h(n,r=c(r,i,o,n,t[15],1236535329,22),i,o,t[1],4129170786,5),o=h(o,n,r,i,t[6],3225465664,9),i=h(i,o,n,r,t[11],643717713,14),r=h(r,i,o,n,t[0],3921069994,20),n=h(n,r,i,o,t[5],3593408605,5),o=h(o,n,r,i,t[10],38016083,9),i=h(i,o,n,r,t[15],3634488961,14),r=h(r,i,o,n,t[4],3889429448,20),n=h(n,r,i,o,t[9],568446438,5),o=h(o,n,r,i,t[14],3275163606,9),i=h(i,o,n,r,t[3],4107603335,14),r=h(r,i,o,n,t[8],1163531501,20),n=h(n,r,i,o,t[13],2850285829,5),o=h(o,n,r,i,t[2],4243563512,9),i=h(i,o,n,r,t[7],1735328473,14),n=f(n,r=h(r,i,o,n,t[12],2368359562,20),i,o,t[5],4294588738,4),o=f(o,n,r,i,t[8],2272392833,11),i=f(i,o,n,r,t[11],1839030562,16),r=f(r,i,o,n,t[14],4259657740,23),n=f(n,r,i,o,t[1],2763975236,4),o=f(o,n,r,i,t[4],1272893353,11),i=f(i,o,n,r,t[7],4139469664,16),r=f(r,i,o,n,t[10],3200236656,23),n=f(n,r,i,o,t[13],681279174,4),o=f(o,n,r,i,t[0],3936430074,11),i=f(i,o,n,r,t[3],3572445317,16),r=f(r,i,o,n,t[6],76029189,23),n=f(n,r,i,o,t[9],3654602809,4),o=f(o,n,r,i,t[12],3873151461,11),i=f(i,o,n,r,t[15],530742520,16),n=l(n,r=f(r,i,o,n,t[2],3299628645,23),i,o,t[0],4096336452,6),o=l(o,n,r,i,t[7],1126891415,10),i=l(i,o,n,r,t[14],2878612391,15),r=l(r,i,o,n,t[5],4237533241,21),n=l(n,r,i,o,t[12],1700485571,6),o=l(o,n,r,i,t[3],2399980690,10),i=l(i,o,n,r,t[10],4293915773,15),r=l(r,i,o,n,t[1],2240044497,21),n=l(n,r,i,o,t[8],1873313359,6),o=l(o,n,r,i,t[15],4264355552,10),i=l(i,o,n,r,t[6],2734768916,15),r=l(r,i,o,n,t[13],1309151649,21),n=l(n,r,i,o,t[4],4149444226,6),o=l(o,n,r,i,t[11],3174756917,10),i=l(i,o,n,r,t[2],718787259,15),r=l(r,i,o,n,t[9],3951481745,21),this._a=this._a+n|0,this._b=this._b+r|0,this._c=this._c+i|0,this._d=this._d+o|0},a.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=o.allocUnsafe(16);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t},t.exports=a},function(t,e,n){"use strict";var r=n(12).Buffer,i=n(21),o=n(76),s=new Array(16),a=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],u=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],c=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],h=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],f=[0,1518500249,1859775393,2400959708,2840853838],l=[1352829926,1548603684,1836072691,2053994217,0];function d(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(t,e){return t<<e|t>>>32-e}function g(t,e,n,r,i,o,s,a){return p(t+(e^n^r)+o+s|0,a)+i|0}function y(t,e,n,r,i,o,s,a){return p(t+(e&n|~e&r)+o+s|0,a)+i|0}function w(t,e,n,r,i,o,s,a){return p(t+((e|~n)^r)+o+s|0,a)+i|0}function v(t,e,n,r,i,o,s,a){return p(t+(e&r|n&~r)+o+s|0,a)+i|0}function _(t,e,n,r,i,o,s,a){return p(t+(e^(n|~r))+o+s|0,a)+i|0}i(d,o),d.prototype._update=function(){for(var t=s,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);for(var n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,d=0|this._e,m=0|this._a,b=0|this._b,k=0|this._c,S=0|this._d,A=0|this._e,E=0;E<80;E+=1){var x,P;E<16?(x=g(n,r,i,o,d,t[a[E]],f[0],c[E]),P=_(m,b,k,S,A,t[u[E]],l[0],h[E])):E<32?(x=y(n,r,i,o,d,t[a[E]],f[1],c[E]),P=v(m,b,k,S,A,t[u[E]],l[1],h[E])):E<48?(x=w(n,r,i,o,d,t[a[E]],f[2],c[E]),P=w(m,b,k,S,A,t[u[E]],l[2],h[E])):E<64?(x=v(n,r,i,o,d,t[a[E]],f[3],c[E]),P=y(m,b,k,S,A,t[u[E]],l[3],h[E])):(x=_(n,r,i,o,d,t[a[E]],f[4],c[E]),P=g(m,b,k,S,A,t[u[E]],l[4],h[E])),n=d,d=o,o=p(i,10),i=r,r=x,m=A,A=S,S=p(k,10),k=b,b=P}var O=this._b+i+S|0;this._b=this._c+o+A|0,this._c=this._d+d+m|0,this._d=this._e+n+b|0,this._e=this._a+r+k|0,this._a=O},d.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=r.alloc?r.alloc(20):new r(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=d},function(t,e,n){(e=t.exports=function(t){t=t.toLowerCase();var n=e[t];if(!n)throw new Error(t+" is not supported (we accept pull requests)");return new n}).sha=n(131),e.sha1=n(132),e.sha224=n(133),e.sha256=n(77),e.sha384=n(134),e.sha512=n(78)},function(t,e,n){var r=n(21),i=n(37),o=n(25).Buffer,s=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function u(){this.init(),this._w=a,i.call(this,64,56)}function c(t){return t<<30|t>>>2}function h(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(u,i),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var e,n=this._w,r=0|this._a,i=0|this._b,o=0|this._c,a=0|this._d,u=0|this._e,f=0;f<16;++f)n[f]=t.readInt32BE(4*f);for(;f<80;++f)n[f]=n[f-3]^n[f-8]^n[f-14]^n[f-16];for(var l=0;l<80;++l){var d=~~(l/20),p=0|((e=r)<<5|e>>>27)+h(d,i,o,a)+u+n[l]+s[d];u=a,a=o,o=c(i),i=r,r=p}this._a=r+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=a+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},function(t,e,n){var r=n(21),i=n(37),o=n(25).Buffer,s=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function u(){this.init(),this._w=a,i.call(this,64,56)}function c(t){return t<<5|t>>>27}function h(t){return t<<30|t>>>2}function f(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(u,i),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var e,n=this._w,r=0|this._a,i=0|this._b,o=0|this._c,a=0|this._d,u=0|this._e,l=0;l<16;++l)n[l]=t.readInt32BE(4*l);for(;l<80;++l)n[l]=(e=n[l-3]^n[l-8]^n[l-14]^n[l-16])<<1|e>>>31;for(var d=0;d<80;++d){var p=~~(d/20),g=c(r)+f(p,i,o,a)+u+n[d]+s[p]|0;u=a,a=o,o=h(i),i=r,r=g}this._a=r+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=a+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},function(t,e,n){var r=n(21),i=n(77),o=n(37),s=n(25).Buffer,a=new Array(64);function u(){this.init(),this._w=a,o.call(this,64,56)}r(u,i),u.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},u.prototype._hash=function(){var t=s.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=u},function(t,e,n){var r=n(21),i=n(78),o=n(37),s=n(25).Buffer,a=new Array(160);function u(){this.init(),this._w=a,o.call(this,128,112)}r(u,i),u.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},u.prototype._hash=function(){var t=s.allocUnsafe(48);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),t},t.exports=u},function(t,e,n){var r=n(25).Buffer,i=n(31).Transform,o=n(34).StringDecoder;function s(t){i.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}n(21)(s,i),s.prototype.update=function(t,e,n){"string"==typeof t&&(t=r.from(t,e));var i=this._update(t);return this.hashMode?this:(n&&(i=this._toString(i,n)),i)},s.prototype.setAutoPadding=function(){},s.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},s.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},s.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},s.prototype._transform=function(t,e,n){var r;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){r=t}finally{n(r)}},s.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},s.prototype._finalOrDigest=function(t){var e=this.__final()||r.alloc(0);return t&&(e=this._toString(e,t,!0)),e},s.prototype._toString=function(t,e,n){if(this._decoder||(this._decoder=new o(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var r=this._decoder.write(t);return n&&(r+=this._decoder.end()),r},t.exports=s},function(t,e,n){
/**
 *
 * @revision    $Id: index.js 2012-03-24 16:21:10 Aleksey $
 * @created     2016-09-24 16:21:10
 * @category    Express Helpers
 * @package     device-uuid
 * @version     1.0.2
 * @copyright   Copyright (c) 2016-2017 - All rights reserved.
 * @license     MIT License
 * @author      Alexey Gordeyev IK <aleksej@gordejev.lv>
 * @link        http://www.gordejev.lv
 *
 */
t.exports=n(137)},function(t,e){
/*!
 * device-uuid.js v1.0.4 (https://github.com/biggora/device-uuid/)
 * Copyright 2016-2017 Alexey Gordeyev
 * Licensed under MIT (https://github.com/biggora/device-uuid/blob/master/LICENSE)
 */
!function(t){"use strict";var e=new RegExp("^.*("+["\\+https:\\/\\/developers.google.com\\/\\+\\/web\\/snippet\\/","googlebot","baiduspider","gurujibot","yandexbot","slurp","msnbot","bingbot","facebookexternalhit","linkedinbot","twitterbot","slackbot","telegrambot","applebot","pingdom","tumblr ","Embedly","spbot"].join("|")+").*$"),n=function(t){t=t||{};var r={version:!1,language:!1,platform:!0,os:!0,pixelDepth:!0,colorDepth:!0,resolution:!1,isAuthoritative:!0,silkAccelerated:!0,isKindleFire:!0,isDesktop:!0,isMobile:!0,isTablet:!0,isWindows:!0,isLinux:!0,isLinux64:!0,isChromeOS:!0,isMac:!0,isiPad:!0,isiPhone:!0,isiPod:!0,isAndroid:!0,isSamsung:!0,isSmartTV:!0,isRaspberry:!0,isBlackberry:!0,isTouchScreen:!0,isOpera:!1,isIE:!1,isEdge:!1,isIECompatibilityMode:!1,isSafari:!1,isFirefox:!1,isWebkit:!1,isChrome:!1,isKonqueror:!1,isOmniWeb:!1,isSeaMonkey:!1,isFlock:!1,isAmaya:!1,isPhantomJS:!1,isEpiphany:!1,source:!1,cpuCores:!1};for(var i in t)t.hasOwnProperty(i)&&void 0!==r[i]&&(r[i]=t[i]);return this.options=r,this.version="1.0.0",this._Versions={Edge:/Edge\/([\d\w\.\-]+)/i,Firefox:/firefox\/([\d\w\.\-]+)/i,IE:/msie\s([\d\.]+[\d])|trident\/\d+\.\d+;.*[rv:]+(\d+\.\d)/i,Chrome:/chrome\/([\d\w\.\-]+)/i,Chromium:/(?:chromium|crios)\/([\d\w\.\-]+)/i,Safari:/version\/([\d\w\.\-]+)/i,Opera:/version\/([\d\w\.\-]+)|OPR\/([\d\w\.\-]+)/i,Ps3:/([\d\w\.\-]+)\)\s*$/i,Psp:/([\d\w\.\-]+)\)?\s*$/i,Amaya:/amaya\/([\d\w\.\-]+)/i,SeaMonkey:/seamonkey\/([\d\w\.\-]+)/i,OmniWeb:/omniweb\/v([\d\w\.\-]+)/i,Flock:/flock\/([\d\w\.\-]+)/i,Epiphany:/epiphany\/([\d\w\.\-]+)/i,WinJs:/msapphost\/([\d\w\.\-]+)/i,PhantomJS:/phantomjs\/([\d\w\.\-]+)/i,UC:/UCBrowser\/([\d\w\.]+)/i},this._Browsers={Edge:/edge/i,Amaya:/amaya/i,Konqueror:/konqueror/i,Epiphany:/epiphany/i,SeaMonkey:/seamonkey/i,Flock:/flock/i,OmniWeb:/omniweb/i,Chromium:/chromium|crios/i,Chrome:/chrome/i,Safari:/safari/i,IE:/msie|trident/i,Opera:/opera|OPR/i,PS3:/playstation 3/i,PSP:/playstation portable/i,Firefox:/firefox/i,WinJs:/msapphost/i,PhantomJS:/phantomjs/i,UC:/UCBrowser/i},this._OS={Windows10:/windows nt 10\.0/i,Windows81:/windows nt 6\.3/i,Windows8:/windows nt 6\.2/i,Windows7:/windows nt 6\.1/i,UnknownWindows:/windows nt 6\.\d+/i,WindowsVista:/windows nt 6\.0/i,Windows2003:/windows nt 5\.2/i,WindowsXP:/windows nt 5\.1/i,Windows2000:/windows nt 5\.0/i,WindowsPhone8:/windows phone 8\./,OSXCheetah:/os x 10[._]0/i,OSXPuma:/os x 10[._]1(\D|$)/i,OSXJaguar:/os x 10[._]2/i,OSXPanther:/os x 10[._]3/i,OSXTiger:/os x 10[._]4/i,OSXLeopard:/os x 10[._]5/i,OSXSnowLeopard:/os x 10[._]6/i,OSXLion:/os x 10[._]7/i,OSXMountainLion:/os x 10[._]8/i,OSXMavericks:/os x 10[._]9/i,OSXYosemite:/os x 10[._]10/i,OSXElCapitan:/os x 10[._]11/i,OSXSierra:/os x 10[._]12/i,Mac:/os x/i,Linux:/linux/i,Linux64:/linux x86_64/i,ChromeOS:/cros/i,Wii:/wii/i,PS3:/playstation 3/i,PSP:/playstation portable/i,iPad:/\(iPad.*os (\d+)[._](\d+)/i,iPhone:/\(iPhone.*os (\d+)[._](\d+)/i,Bada:/Bada\/(\d+)\.(\d+)/i,Curl:/curl\/(\d+)\.(\d+)\.(\d+)/i},this._Platform={Windows:/windows nt/i,WindowsPhone:/windows phone/i,Mac:/macintosh/i,Linux:/linux/i,Wii:/wii/i,Playstation:/playstation/i,iPad:/ipad/i,iPod:/ipod/i,iPhone:/iphone/i,Android:/android/i,Blackberry:/blackberry/i,Samsung:/samsung/i,Curl:/curl/i},this.DefaultAgent={isAuthoritative:!0,isMobile:!1,isTablet:!1,isiPad:!1,isiPod:!1,isiPhone:!1,isAndroid:!1,isBlackberry:!1,isOpera:!1,isIE:!1,isEdge:!1,isIECompatibilityMode:!1,isSafari:!1,isFirefox:!1,isWebkit:!1,isChrome:!1,isKonqueror:!1,isOmniWeb:!1,isSeaMonkey:!1,isFlock:!1,isAmaya:!1,isPhantomJS:!1,isEpiphany:!1,isDesktop:!1,isWindows:!1,isLinux:!1,isLinux64:!1,isMac:!1,isChromeOS:!1,isBada:!1,isSamsung:!1,isRaspberry:!1,isBot:!1,isCurl:!1,isAndroidTablet:!1,isWinJs:!1,isKindleFire:!1,isSilk:!1,isCaptive:!1,isSmartTV:!1,isUC:!1,isTouchScreen:!1,silkAccelerated:!1,colorDepth:-1,pixelDepth:-1,resolution:[],cpuCores:-1,language:"unknown",browser:"unknown",version:"unknown",os:"unknown",platform:"unknown",geoIp:{},source:"",hashInt:function(t){var e,n,r=0;if(0===t.length)return r;for(e=0,n=t.length;e<n;e++)r=(r<<5)-r+t.charCodeAt(e),r|=0;return r},hashMD5:function(t){function e(t,e){return t<<e|t>>>32-e}function n(t,e){var n,r,i,o,s;return i=2147483648&t,o=2147483648&e,s=(1073741823&t)+(1073741823&e),(n=1073741824&t)&(r=1073741824&e)?2147483648^s^i^o:n|r?1073741824&s?3221225472^s^i^o:1073741824^s^i^o:s^i^o}function r(t,r,i,o,s,a,u){return t=n(t,n(n(function(t,e,n){return t&e|~t&n}(r,i,o),s),u)),n(e(t,a),r)}function i(t,r,i,o,s,a,u){return t=n(t,n(n(function(t,e,n){return t&n|e&~n}(r,i,o),s),u)),n(e(t,a),r)}function o(t,r,i,o,s,a,u){return t=n(t,n(n(function(t,e,n){return t^e^n}(r,i,o),s),u)),n(e(t,a),r)}function s(t,r,i,o,s,a,u){return t=n(t,n(n(function(t,e,n){return e^(t|~n)}(r,i,o),s),u)),n(e(t,a),r)}function a(t){var e,n="",r="";for(e=0;e<=3;e++)n+=(r="0"+(t>>>8*e&255).toString(16)).substr(r.length-2,2);return n}var u,c,h,f,l,d,p,g,y,w;for(u=function(t){for(var e,n=t.length,r=n+8,i=16*((r-r%64)/64+1),o=new Array(i-1),s=0,a=0;a<n;)s=a%4*8,o[e=(a-a%4)/4]=o[e]|t.charCodeAt(a)<<s,a++;return s=a%4*8,o[e=(a-a%4)/4]=o[e]|128<<s,o[i-2]=n<<3,o[i-1]=n>>>29,o}(t=function(t){t=t.replace(/\r\n/g,"\n");for(var e="",n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e+=String.fromCharCode(r):r>127&&r<2048?(e+=String.fromCharCode(r>>6|192),e+=String.fromCharCode(63&r|128)):(e+=String.fromCharCode(r>>12|224),e+=String.fromCharCode(r>>6&63|128),e+=String.fromCharCode(63&r|128))}return e}(t)),p=1732584193,g=4023233417,y=2562383102,w=271733878,c=0;c<u.length;c+=16)h=p,f=g,l=y,d=w,p=r(p,g,y,w,u[c+0],7,3614090360),w=r(w,p,g,y,u[c+1],12,3905402710),y=r(y,w,p,g,u[c+2],17,606105819),g=r(g,y,w,p,u[c+3],22,3250441966),p=r(p,g,y,w,u[c+4],7,4118548399),w=r(w,p,g,y,u[c+5],12,1200080426),y=r(y,w,p,g,u[c+6],17,2821735955),g=r(g,y,w,p,u[c+7],22,4249261313),p=r(p,g,y,w,u[c+8],7,1770035416),w=r(w,p,g,y,u[c+9],12,2336552879),y=r(y,w,p,g,u[c+10],17,4294925233),g=r(g,y,w,p,u[c+11],22,2304563134),p=r(p,g,y,w,u[c+12],7,1804603682),w=r(w,p,g,y,u[c+13],12,4254626195),y=r(y,w,p,g,u[c+14],17,2792965006),p=i(p,g=r(g,y,w,p,u[c+15],22,1236535329),y,w,u[c+1],5,4129170786),w=i(w,p,g,y,u[c+6],9,3225465664),y=i(y,w,p,g,u[c+11],14,643717713),g=i(g,y,w,p,u[c+0],20,3921069994),p=i(p,g,y,w,u[c+5],5,3593408605),w=i(w,p,g,y,u[c+10],9,38016083),y=i(y,w,p,g,u[c+15],14,3634488961),g=i(g,y,w,p,u[c+4],20,3889429448),p=i(p,g,y,w,u[c+9],5,568446438),w=i(w,p,g,y,u[c+14],9,3275163606),y=i(y,w,p,g,u[c+3],14,4107603335),g=i(g,y,w,p,u[c+8],20,1163531501),p=i(p,g,y,w,u[c+13],5,2850285829),w=i(w,p,g,y,u[c+2],9,4243563512),y=i(y,w,p,g,u[c+7],14,1735328473),p=o(p,g=i(g,y,w,p,u[c+12],20,2368359562),y,w,u[c+5],4,4294588738),w=o(w,p,g,y,u[c+8],11,2272392833),y=o(y,w,p,g,u[c+11],16,1839030562),g=o(g,y,w,p,u[c+14],23,4259657740),p=o(p,g,y,w,u[c+1],4,2763975236),w=o(w,p,g,y,u[c+4],11,1272893353),y=o(y,w,p,g,u[c+7],16,4139469664),g=o(g,y,w,p,u[c+10],23,3200236656),p=o(p,g,y,w,u[c+13],4,681279174),w=o(w,p,g,y,u[c+0],11,3936430074),y=o(y,w,p,g,u[c+3],16,3572445317),g=o(g,y,w,p,u[c+6],23,76029189),p=o(p,g,y,w,u[c+9],4,3654602809),w=o(w,p,g,y,u[c+12],11,3873151461),y=o(y,w,p,g,u[c+15],16,530742520),p=s(p,g=o(g,y,w,p,u[c+2],23,3299628645),y,w,u[c+0],6,4096336452),w=s(w,p,g,y,u[c+7],10,1126891415),y=s(y,w,p,g,u[c+14],15,2878612391),g=s(g,y,w,p,u[c+5],21,4237533241),p=s(p,g,y,w,u[c+12],6,1700485571),w=s(w,p,g,y,u[c+3],10,2399980690),y=s(y,w,p,g,u[c+10],15,4293915773),g=s(g,y,w,p,u[c+1],21,2240044497),p=s(p,g,y,w,u[c+8],6,1873313359),w=s(w,p,g,y,u[c+15],10,4264355552),y=s(y,w,p,g,u[c+6],15,2734768916),g=s(g,y,w,p,u[c+13],21,1309151649),p=s(p,g,y,w,u[c+4],6,4149444226),w=s(w,p,g,y,u[c+11],10,3174756917),y=s(y,w,p,g,u[c+2],15,718787259),g=s(g,y,w,p,u[c+9],21,3951481745),p=n(p,h),g=n(g,f),y=n(y,l),w=n(w,d);return(a(p)+a(g)+a(y)+a(w)).toLowerCase()}},this.Agent={},this.getBrowser=function(t){switch(!0){case this._Browsers.Edge.test(t):return this.Agent.isEdge=!0,"Edge";case this._Browsers.PhantomJS.test(t):return this.Agent.isPhantomJS=!0,"PhantomJS";case this._Browsers.Konqueror.test(t):return this.Agent.isKonqueror=!0,"Konqueror";case this._Browsers.Amaya.test(t):return this.Agent.isAmaya=!0,"Amaya";case this._Browsers.Epiphany.test(t):return this.Agent.isEpiphany=!0,"Epiphany";case this._Browsers.SeaMonkey.test(t):return this.Agent.isSeaMonkey=!0,"SeaMonkey";case this._Browsers.Flock.test(t):return this.Agent.isFlock=!0,"Flock";case this._Browsers.OmniWeb.test(t):return this.Agent.isOmniWeb=!0,"OmniWeb";case this._Browsers.Opera.test(t):return this.Agent.isOpera=!0,"Opera";case this._Browsers.Chromium.test(t):return this.Agent.isChrome=!0,"Chromium";case this._Browsers.Chrome.test(t):return this.Agent.isChrome=!0,"Chrome";case this._Browsers.Safari.test(t):return this.Agent.isSafari=!0,"Safari";case this._Browsers.WinJs.test(t):return this.Agent.isWinJs=!0,"WinJs";case this._Browsers.IE.test(t):return this.Agent.isIE=!0,"IE";case this._Browsers.PS3.test(t):return"ps3";case this._Browsers.PSP.test(t):return"psp";case this._Browsers.Firefox.test(t):return this.Agent.isFirefox=!0,"Firefox";case this._Browsers.UC.test(t):return this.Agent.isUC=!0,"UCBrowser";default:return 0!==t.indexOf("Mozilla")&&/^([\d\w\-\.]+)\/[\d\w\.\-]+/i.test(t)?(this.Agent.isAuthoritative=!1,RegExp.$1):"unknown"}},this.getBrowserVersion=function(t){switch(this.Agent.browser){case"Edge":if(this._Versions.Edge.test(t))return RegExp.$1;break;case"PhantomJS":if(this._Versions.PhantomJS.test(t))return RegExp.$1;break;case"Chrome":if(this._Versions.Chrome.test(t))return RegExp.$1;break;case"Chromium":if(this._Versions.Chromium.test(t))return RegExp.$1;break;case"Safari":if(this._Versions.Safari.test(t))return RegExp.$1;break;case"Opera":if(this._Versions.Opera.test(t))return RegExp.$1?RegExp.$1:RegExp.$2;break;case"Firefox":if(this._Versions.Firefox.test(t))return RegExp.$1;break;case"WinJs":if(this._Versions.WinJs.test(t))return RegExp.$1;break;case"IE":if(this._Versions.IE.test(t))return RegExp.$2?RegExp.$2:RegExp.$1;break;case"ps3":if(this._Versions.Ps3.test(t))return RegExp.$1;break;case"psp":if(this._Versions.Psp.test(t))return RegExp.$1;break;case"Amaya":if(this._Versions.Amaya.test(t))return RegExp.$1;break;case"Epiphany":if(this._Versions.Epiphany.test(t))return RegExp.$1;break;case"SeaMonkey":if(this._Versions.SeaMonkey.test(t))return RegExp.$1;break;case"Flock":if(this._Versions.Flock.test(t))return RegExp.$1;break;case"OmniWeb":if(this._Versions.OmniWeb.test(t))return RegExp.$1;break;case"UCBrowser":if(this._Versions.UC.test(t))return RegExp.$1;break;default:if("unknown"!==this.Agent.browser&&new RegExp(this.Agent.browser+"[\\/ ]([\\d\\w\\.\\-]+)","i").test(t))return RegExp.$1}},this.getOS=function(t){switch(!0){case this._OS.WindowsVista.test(t):return this.Agent.isWindows=!0,"Windows Vista";case this._OS.Windows7.test(t):return this.Agent.isWindows=!0,"Windows 7";case this._OS.Windows8.test(t):return this.Agent.isWindows=!0,"Windows 8";case this._OS.Windows81.test(t):return this.Agent.isWindows=!0,"Windows 8.1";case this._OS.Windows10.test(t):return this.Agent.isWindows=!0,"Windows 10.0";case this._OS.Windows2003.test(t):return this.Agent.isWindows=!0,"Windows 2003";case this._OS.WindowsXP.test(t):return this.Agent.isWindows=!0,"Windows XP";case this._OS.Windows2000.test(t):return this.Agent.isWindows=!0,"Windows 2000";case this._OS.WindowsPhone8.test(t):return"Windows Phone 8";case this._OS.Linux64.test(t):return this.Agent.isLinux=!0,this.Agent.isLinux64=!0,"Linux 64";case this._OS.Linux.test(t):return this.Agent.isLinux=!0,"Linux";case this._OS.ChromeOS.test(t):return this.Agent.isChromeOS=!0,"Chrome OS";case this._OS.Wii.test(t):return"Wii";case this._OS.PS3.test(t):case this._OS.PSP.test(t):return"Playstation";case this._OS.OSXCheetah.test(t):return this.Agent.isMac=!0,"OS X Cheetah";case this._OS.OSXPuma.test(t):return this.Agent.isMac=!0,"OS X Puma";case this._OS.OSXJaguar.test(t):return this.Agent.isMac=!0,"OS X Jaguar";case this._OS.OSXPanther.test(t):return this.Agent.isMac=!0,"OS X Panther";case this._OS.OSXTiger.test(t):return this.Agent.isMac=!0,"OS X Tiger";case this._OS.OSXLeopard.test(t):return this.Agent.isMac=!0,"OS X Leopard";case this._OS.OSXSnowLeopard.test(t):return this.Agent.isMac=!0,"OS X Snow Leopard";case this._OS.OSXLion.test(t):return this.Agent.isMac=!0,"OS X Lion";case this._OS.OSXMountainLion.test(t):return this.Agent.isMac=!0,"OS X Mountain Lion";case this._OS.OSXMavericks.test(t):return this.Agent.isMac=!0,"OS X Mavericks";case this._OS.OSXYosemite.test(t):return this.Agent.isMac=!0,"OS X Yosemite";case this._OS.OSXElCapitan.test(t):return this.Agent.isMac=!0,"OS X El Capitan";case this._OS.OSXSierra.test(t):return this.Agent.isMac=!0,"macOS Sierra";case this._OS.Mac.test(t):return this.Agent.isMac=!0,"OS X";case this._OS.iPad.test(t):return this.Agent.isiPad=!0,t.match(this._OS.iPad)[0].replace("_",".");case this._OS.iPhone.test(t):return this.Agent.isiPhone=!0,t.match(this._OS.iPhone)[0].replace("_",".");case this._OS.Bada.test(t):return this.Agent.isBada=!0,"Bada";case this._OS.Curl.test(t):return this.Agent.isCurl=!0,"Curl";default:return"unknown"}},this.getPlatform=function(t){switch(!0){case this._Platform.Windows.test(t):return"Microsoft Windows";case this._Platform.WindowsPhone.test(t):return this.Agent.isWindowsPhone=!0,"Microsoft Windows Phone";case this._Platform.Mac.test(t):return"Apple Mac";case this._Platform.Curl.test(t):return"Curl";case this._Platform.Android.test(t):return this.Agent.isAndroid=!0,"Android";case this._Platform.Blackberry.test(t):return this.Agent.isBlackberry=!0,"Blackberry";case this._Platform.Linux.test(t):return"Linux";case this._Platform.Wii.test(t):return"Wii";case this._Platform.Playstation.test(t):return"Playstation";case this._Platform.iPad.test(t):return this.Agent.isiPad=!0,"iPad";case this._Platform.iPod.test(t):return this.Agent.isiPod=!0,"iPod";case this._Platform.iPhone.test(t):return this.Agent.isiPhone=!0,"iPhone";case this._Platform.Samsung.test(t):return this.Agent.isiSamsung=!0,"Samsung";default:return"unknown"}},this.testCompatibilityMode=function(){var t=this;if(this.Agent.isIE&&/Trident\/(\d)\.0/i.test(t.Agent.source)){var e=parseInt(RegExp.$1,10),n=parseInt(t.Agent.version,10);7===n&&7===e&&(t.Agent.isIECompatibilityMode=!0,t.Agent.version=11),7===n&&6===e&&(t.Agent.isIECompatibilityMode=!0,t.Agent.version=10),7===n&&5===e&&(t.Agent.isIECompatibilityMode=!0,t.Agent.version=9),7===n&&4===e&&(t.Agent.isIECompatibilityMode=!0,t.Agent.version=8)}},this.testSilk=function(){switch(!0){case new RegExp("silk","gi").test(this.Agent.source):this.Agent.isSilk=!0}return/Silk-Accelerated=true/gi.test(this.Agent.source)&&(this.Agent.SilkAccelerated=!0),!!this.Agent.isSilk&&"Silk"},this.testKindleFire=function(){var t=this;switch(!0){case/KFOT/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire";case/KFTT/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HD";case/KFJWI/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HD 8.9";case/KFJWA/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HD 8.9 4G";case/KFSOWI/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HD 7";case/KFTHWI/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HDX 7";case/KFTHWA/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HDX 7 4G";case/KFAPWI/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HDX 8.9";case/KFAPWA/gi.test(t.Agent.source):return this.Agent.isKindleFire=!0,"Kindle Fire HDX 8.9 4G";default:return!1}},this.testCaptiveNetwork=function(){switch(!0){case/CaptiveNetwork/gi.test(this.Agent.source):return this.Agent.isCaptive=!0,this.Agent.isMac=!0,this.Agent.platform="Apple Mac","CaptiveNetwork";default:return!1}},this.testMobile=function(){var t=this;switch(!0){case t.Agent.isWindows:case t.Agent.isLinux:case t.Agent.isMac:case t.Agent.isChromeOS:t.Agent.isDesktop=!0;break;case t.Agent.isAndroid:case t.Agent.isSamsung:t.Agent.isMobile=!0,t.Agent.isDesktop=!1}switch(!0){case t.Agent.isiPad:case t.Agent.isiPod:case t.Agent.isiPhone:case t.Agent.isBada:case t.Agent.isBlackberry:case t.Agent.isAndroid:case t.Agent.isWindowsPhone:t.Agent.isMobile=!0,t.Agent.isDesktop=!1}/mobile/i.test(t.Agent.source)&&(t.Agent.isMobile=!0,t.Agent.isDesktop=!1)},this.testTablet=function(){var t=this;switch(!0){case t.Agent.isiPad:case t.Agent.isAndroidTablet:case t.Agent.isKindleFire:t.Agent.isTablet=!0}/tablet/i.test(t.Agent.source)&&(t.Agent.isTablet=!0)},this.testNginxGeoIP=function(t){var e=this;Object.keys(t).forEach(function(n){/^GEOIP/i.test(n)&&(e.Agent.geoIp[n]=t[n])})},this.testBot=function(){var t=this,n=e.exec(t.Agent.source.toLowerCase());n?t.Agent.isBot=n[1]:t.Agent.isAuthoritative||(t.Agent.isBot=/bot/i.test(t.Agent.source))},this.testSmartTV=function(){var t=new RegExp("smart-tv|smarttv|googletv|appletv|hbbtv|pov_tv|netcast.tv","gi").exec(this.Agent.source.toLowerCase());t&&(this.Agent.isSmartTV=t[1])},this.testAndroidTablet=function(){this.Agent.isAndroid&&!/mobile/i.test(this.Agent.source)&&(this.Agent.isAndroidTablet=!0)},this.testTouchSupport=function(){this.Agent.isTouchScreen="ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0},this.getLaguage=function(){this.Agent.language=(navigator.language||navigator.userLanguage||navigator.browserLanguage||navigator.systemLanguage||"").toLowerCase()},this.getColorDepth=function(){this.Agent.colorDepth=screen.colorDepth||-1},this.getScreenResolution=function(){this.Agent.resolution=[screen.availWidth,screen.availHeight]},this.getPixelDepth=function(){this.Agent.pixelDepth=screen.pixelDepth||-1},this.getCPU=function(){this.Agent.cpuCores=navigator.hardwareConcurrency||-1},this.reset=function(){var t=this;for(var e in t.DefaultAgent)t.DefaultAgent.hasOwnProperty(e)&&(t.Agent[e]=t.DefaultAgent[e]);return t},this.parse=function(t){t=t||navigator.userAgent;var e=new n;return e.Agent.source=t.replace(/^\s*/,"").replace(/\s*$/,""),e.Agent.os=e.getOS(e.Agent.source),e.Agent.platform=e.getPlatform(e.Agent.source),e.Agent.browser=e.getBrowser(e.Agent.source),e.Agent.version=e.getBrowserVersion(e.Agent.source),e.testBot(),e.testSmartTV(),e.testMobile(),e.testAndroidTablet(),e.testTablet(),e.testCompatibilityMode(),e.testSilk(),e.testKindleFire(),e.testCaptiveNetwork(),e.testTouchSupport(),e.getLaguage(),e.getColorDepth(),e.getPixelDepth(),e.getScreenResolution(),e.getCPU(),e.Agent},this.get=function(t){var e=this.parse(),n=[];for(var r in this.options)this.options.hasOwnProperty(r)&&!0===this.options[r]&&n.push(e[r]);t&&n.push(t),!this.options.resolution&&e.isMobile&&n.push(e.resolution);var i=e.hashMD5(n.join(":"));return[i.slice(0,8),i.slice(8,12),"4"+i.slice(12,15),"b"+i.slice(15,18),i.slice(20)].join("-")},this.Agent=this.DefaultAgent,this};t.DeviceUUID=n,new n(navigator.userAgent)}(this)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"BLOCKCHAIN_SUPPORT",function(){return d}),n.d(r,"WALLET_SUPPORT",function(){return p});var i,o=n(0),s=n.n(o),a=n(2),u=n.n(a),c=n(4),h=n.n(c),f=n(5),l=n.n(f),d="blockchain_support",p="wallet_support",g=new(function(){function t(){h()(this,t),this.plugins=[]}return l()(t,[{key:"loadPlugin",value:function(t){this.plugin(t.name)||this.plugins.push(t)}},{key:"wallets",value:function(){return this.plugins.filter(function(t){return t.type===p})}},{key:"signatureProviders",value:function(){return this.plugins.filter(function(t){return t.type===d})}},{key:"supportedBlockchains",value:function(){return this.signatureProviders().map(function(){return name})}},{key:"plugin",value:function(t){return this.plugins.find(function(e){return e.name===t})}},{key:"endorsedNetworks",value:function(){var t=u()(s.a.mark(function t(){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all(this.signatureProviders().map(function(){var t=u()(s.a.mark(function t(e){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.getEndorsedNetwork();case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()));case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}]),t}()),y=n(111),w=n.n(y),v=n(19),_=n.n(v),m=n(112),b=n.n(m),k={},S=function(){return"undefined"==typeof window?{localStorage:{setItem:function(t,e){return k[t]=e},getItem:function(t){return k[t]||null},removeItem:function(t){return delete k[t]}}}:window},A=function(){function t(){h()(this,t)}return l()(t,null,[{key:"setAppKey",value:function(t){S().localStorage.setItem("appkey",t)}},{key:"getAppKey",value:function(){return S().localStorage.getItem("appkey")}},{key:"removeAppKey",value:function(){return S().localStorage.removeItem("appkey")}},{key:"setNonce",value:function(t){S().localStorage.setItem("nonce",t)}},{key:"getNonce",value:function(){return S().localStorage.getItem("nonce")}},{key:"removeNonce",value:function(){return S().localStorage.removeItem("nonce")}}]),t}(),E=n(113),x=n.n(E),P=n(114),O=n.n(P),T=n(115),R=n.n(T);if("undefined"==typeof navigator)i="nodejs_env";else{var I=(new(0,n(136).DeviceUUID)).parse(),L=[I.language,I.platform,I.os,I.cpuCores,I.colorDepth];i=I.hashMD5(L.join(":"))}var B,C=i,M=function(t){return O()("sha256").update(t).digest("hex")},F=function(){var t=new Uint8Array(24);return x()(t),t.join("")},j=function(){function t(e,n){h()(this,t),this.plugin=e,this.timeout=n,this.uuid=null,this.socket=null,this.connected=!1,this.paired=!1,this.openRequests=[],this.pairingPromise=null,this.eventHandlers={},this.appkey=A.getAppKey(),this.appkey||(this.appkey="appkey:"+F())}return l()(t,[{key:"addEventHandler",value:function(t,e){e||(e="app"),this.eventHandlers[e]=t}},{key:"removeEventHandler",value:function(t){t||(t="app"),delete this.eventHandlers[t]}},{key:"link",value:function(){var t=this,e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return this.uuid=n,Promise.race([new Promise(function(e){return setTimeout(function(){t.connected||(e(!1),t.socket&&(t.socket.close(),t.socket=null))},t.timeout)}),new Promise(function(){var n=u()(s.a.mark(function n(i){var o,a,c,h,f,l;return s.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return o=function(){t.socket.onmessage=function(o){if(-1===o.data.indexOf("42/scatter"))return!1;var s=JSON.parse(o.data.replace("42/scatter,","")),a=b()(s,2),u=a[0],c=a[1];return"pong"!==u?"ping"===u?t.socket.send('42/scatter,["pong"]'):"paired"===u?e(c):"rekey"===u?n():"api"===u?r(c):"event"===u?i(c):void 0:void 0};var e=function(e){if(t.paired=e,t.paired){var n=A.getAppKey(),r=-1<t.appkey.indexOf("appkey:")?M(t.appkey):t.appkey;n&&n===r||(A.setAppKey(r),t.appkey=A.getAppKey())}t.pairingPromise.resolve(e)},n=function(){t.appkey="appkey:"+F(),t.send("rekeyed",{data:{appkey:t.appkey,origin:t.getOrigin()},plugin:t.plugin})},r=function(e){var n=t.openRequests.find(function(t){return t.id===e.id});n&&(t.openRequests=t.openRequests.filter(function(t){return t.id!==e.id}),"object"===_()(e.result)&&null!==e.result&&e.result.hasOwnProperty("isError")?n.reject(e.result):n.resolve(e.result))},i=function(e){var n=e.event,r=e.payload;Object.keys(t.eventHandlers).length&&Object.keys(t.eventHandlers).map(function(e){t.eventHandlers[e](n,r)})}},a=function(t,e){return r||(e?"local.get-scatter.com:".concat(t):"127.0.0.1:".concat(t))},n.next=4,u()(s.a.mark(function t(){var n,i,o;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!r){t.next=2;break}return t.abrupt("return",[50006]);case 2:n=function(t,e){return fetch(t).then(function(t){return t.text()}).then(function(t){return e("scatter"===t)}).catch(function(){return e(!1)})},50005,i=[],w()([,,,,,].keys()).map(function(t){var r=50005+1500*t;return Promise.all([n("https://"+a(r+1,!0),function(t){return t?i.push(r+1):null}),e?n("http://"+a(r,!1),function(t){return t?i.push(r):null}):null])}),o=0;case 7:if(!(50>o)){t.next=15;break}if(!i.length){t.next=10;break}return t.abrupt("break",15);case 10:return t.next=12,new Promise(function(t){return setTimeout(function(){return t(!0)},2)});case 12:o++,t.next=7;break;case 15:return t.abrupt("return",(i.length?i:[50006,50005]).filter(function(t){return!(!e&&t%2)}).sort(function(t,e){return e%2?t%2?0:-1:1}));case 16:case"end":return t.stop()}},t)}))();case 4:c=n.sent,h=function(t){var e,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;n||(e=new Promise(function(t){return n=t}));var r=!(t%2),i=a(t,r),o="".concat(r?"wss://":"ws://").concat(i).concat("/socket.io/?EIO=3&transport=websocket"),s=new R.a(o);return s.onerror=function(){return n(!1)},s.onopen=function(){return n(s)},e},f=0;case 7:if(!(f<c.length)){n.next=21;break}return n.next=10,h(c[f]);case 10:if(!(l=n.sent)){n.next=18;break}return t.socket=l,t.send(),t.connected=!0,t.pair(!0).then(function(){return i(!0)}),o(),n.abrupt("break",21);case 18:f++,n.next=7;break;case 21:case"end":return n.stop()}},n)}));return function(){return n.apply(this,arguments)}}())])}},{key:"isConnected",value:function(){return this.connected}},{key:"isPaired",value:function(){return this.paired}},{key:"disconnect",value:function(){return console.log("disconnect"),this.socket&&this.socket.close(),!0}},{key:"sendApiRequest",value:function(t){var e=this;return new Promise(function(n,r){return"identityFromPermissions"!==t.type||e.paired?void e.pair().then(function(){if(!e.paired)return r({code:"not_paired",message:"The user did not allow this app to connect to their Scatter"});t.id=F(),t.appkey=e.appkey,t.nonce=A.getNonce()||0;var i=F();t.nextNonce=M(i),A.setNonce(i),t.hasOwnProperty("payload")&&!t.payload.hasOwnProperty("origin")&&(t.payload.origin=e.getOrigin()),e.openRequests.push(Object.assign(t,{resolve:n,reject:r})),e.send("api",{data:t,plugin:e.plugin})}):n(!1)})}},{key:"pair",value:function(){var t=this,e=!!(0<arguments.length&&void 0!==arguments[0])&&arguments[0];return new Promise(function(n,r){t.pairingPromise={resolve:n,reject:r},t.send("pair",{data:{appkey:t.appkey,origin:t.getOrigin(),passthrough:e},plugin:t.plugin})})}},{key:"send",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;null===t&&null===e?this.socket.send("40/scatter"):this.socket.send("42/scatter,"+JSON.stringify([t,Object.assign(e,{device:C,uuid:this.uuid})]))}},{key:"getOrigin",value:function(){return t.getOriginOrPlugin(this.plugin)}}],[{key:"getOriginOrPlugin",value:function(t){var e;return"www."===(e="undefined"==typeof location?t:location.hasOwnProperty("hostname")&&location.hostname.length&&"localhost"!==location.hostname?location.hostname:t).substr(0,4)&&(e=e.replace("www.","")),e}}]),t}(),W=function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"";h()(this,t),this.name=e,this.type=n}return l()(t,[{key:"isSignatureProvider",value:function(){return this.type===d}},{key:"isValid",value:function(){return Object.keys(r).map(function(t){return r[t]}).includes(this.type)}}],[{key:"placeholder",value:function(){return new t}},{key:"fromJson",value:function(e){return Object.assign(t.placeholder(),e)}}]),t}(),U={EOS:"eos",ETH:"eth",TRX:"trx"},D=(Object.keys(U).map(function(t){return{key:t,value:U[t]}}),function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:U.EOS,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null;h()(this,t),this.blockchain=e,this.contract=n,this.symbol=r,this.name=i||r,this.decimals=o}return l()(t,null,[{key:"placeholder",value:function(){return new t}},{key:"fromJson",value:function(t){return Object.assign(this.placeholder(),t)}}]),t}()),N=function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"https",r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:U.EOS,s=5<arguments.length&&void 0!==arguments[5]?arguments[5]:"";h()(this,t),this.name=e,this.protocol=n,this.host=r,this.port=i,this.blockchain=o,this.chainId=s.toString(),this.token=null}return l()(t,[{key:"fullhost",value:function(){return"".concat(this.protocol,"://").concat(this.host).concat(this.port?":":"").concat(this.port)}},{key:"unique",value:function(){return("".concat(this.blockchain,":")+(this.chainId.length?"chain:".concat(this.chainId):"".concat(this.host,":").concat(this.port))).toLowerCase()}}],[{key:"placeholder",value:function(){return new t}},{key:"fromJson",value:function(e){var n=Object.assign(t.placeholder(),e);return n.chainId=n.chainId?n.chainId.toString():"",n.token=e.hasOwnProperty("token")&&e.token?D.fromJson(e.token):null,n}}]),t}(),q=n(3),K=n.n(q),Y={disconnect:"disconnect",isConnected:"isConnected",isPaired:"isPaired",addEventHandler:"addEventHandler",removeEventHandler:"removeEventHandler",listen:"listen",getVersion:"getVersion",getIdentity:"getIdentity",getAllAccountsFor:"getAllAccountsFor",getIdentityFromPermissions:"getIdentityFromPermissions",forgetIdentity:"forgetIdentity",updateIdentity:"updateIdentity",authenticate:"authenticate",getArbitrarySignature:"getArbitrarySignature",getPublicKey:"getPublicKey",linkAccount:"linkAccount",hasAccountFor:"hasAccountFor",suggestNetwork:"suggestNetwork",requestTransfer:"requestTransfer",getAvatar:"getAvatar",requestSignature:"requestSignature",createTransaction:"createTransaction",addToken:"addToken"},H=(B={},K()(B,Y.getIdentity,"login"),K()(B,Y.getAllAccountsFor,"loginAll"),K()(B,Y.forgetIdentity,"logout"),K()(B,Y.getIdentityFromPermissions,"checkLogin"),B),X=function(){function t(e,n,r){h()(this,t);var i=function(t){return function(){throw console.error("".concat(e," does not support the ").concat(t," method.")),new Error("".concat(e," does not support the ").concat(t," method."))}};Object.keys(Y).map(function(t){return function(t,e){void 0===r[e]&&(r[e]=t||i(e)),H[e]&&void 0===r[H[e]]&&(r[H[e]]=r[e]?r[e]:i(e))}(n[t],t)})}return l()(t,null,[{key:"bindBasics",value:function(t){t.account=function(e){return t.identity&&t.identity.accounts?t.identity.accounts.find(function(t){return t.blockchain===e}):void 0}}}]),t}(),V=n(6),J=n.n(V),$=n(8),z=n.n($),G=n(9),Q=n.n(G),Z=function(t){function e(t,n){var r;return h()(this,e),(r=J()(this,z()(e).call(this,"LocalSocket",p))).name="LocalSocket",r.context=t,r.holderFns=n,r}return Q()(e,t),l()(e,[{key:"connect",value:function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return new Promise(function(r){if(!t||!t.length)throw new Error("You must specify a name for this connection");n=Object.assign({initTimeout:1e3,linkTimeout:3e3,allowHttp:!0},n),e.socketService=new j(t,n.linkTimeout),e.socketService.link(n.allowHttp).then(function(){var t=u()(s.a.mark(function t(n){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt("return",r(!1));case 2:return e.holderFns.get().isExtension=!1,e.holderFns.get().wallet||(e.holderFns.get().wallet=e.name),t.abrupt("return",r(e.socketService));case 5:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}())})}},{key:"runAfterInterfacing",value:function(){var t=u()(s.a.mark(function t(){var e=this;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.holderFns.get().addEventHandler(function(t,n){return e.eventHandler(t,n)},"internal"),t.next=3,this.holderFns.get().getIdentityFromPermissions();case 3:return this.holderFns.get().identity=t.sent,t.abrupt("return",!0);case 5:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){return e.getMethods(this)}},{key:"eventHandler",value:function(){var t=u()(s.a.mark(function t(e){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=e,t.next=t.t0===it.Disconnected?3:t.t0===it.LoggedOut?5:9;break;case 3:return this.holderFns.get().identity=null,t.abrupt("break",9);case 5:return t.next=7,this.holderFns.get().getIdentityFromPermissions();case 7:return this.holderFns.get().identity=t.sent,t.abrupt("break",9);case 9:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}],[{key:"getMethods",value:function(t){var e,n=function(e,n){return(e||n)&&(t.holderFns.get().identity=e),n||e};return e={},K()(e,Y.disconnect,function(){return t.socketService.disconnect()}),K()(e,Y.isConnected,function(){return t.socketService.isConnected()}),K()(e,Y.isPaired,function(){return t.socketService.isPaired()}),K()(e,Y.addEventHandler,function(e){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;return t.socketService.addEventHandler(e,n)}),K()(e,Y.removeEventHandler,function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return t.socketService.removeEventHandler(e)}),K()(e,Y.listen,function(e){return t.socketService.addEventHandler(e)}),K()(e,Y.getVersion,function(){return t.socketService.sendApiRequest({type:"getVersion",payload:{}})}),K()(e,Y.getIdentity,function(e){return t.socketService.sendApiRequest({type:"getOrRequestIdentity",payload:{fields:e||{accounts:[t.holderFns.get().network]}}}).then(n)}),K()(e,Y.getAllAccountsFor,function(e){return t.socketService.sendApiRequest({type:"getAllAccountsFor",payload:{fields:e||{accounts:[t.holderFns.get().network]}}}).then(n)}),K()(e,Y.getIdentityFromPermissions,function(){return t.socketService.sendApiRequest({type:"identityFromPermissions",payload:{}}).then(n)}),K()(e,Y.forgetIdentity,function(){return t.socketService.sendApiRequest({type:"forgetIdentity",payload:{}}).then(function(t){return n(null,t)})}),K()(e,Y.updateIdentity,function(e){var r=e.name,i=e.kyc;return t.socketService.sendApiRequest({type:"updateIdentity",payload:{name:r,kyc:i}}).then(function(t){return t?n(t):null})}),K()(e,Y.authenticate,function(e){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return t.socketService.sendApiRequest({type:"authenticate",payload:{nonce:e,data:n,publicKey:r}})}),K()(e,Y.getArbitrarySignature,function(e,n){return t.socketService.sendApiRequest({type:"requestArbitrarySignature",payload:{publicKey:e,data:n}})}),K()(e,Y.getPublicKey,function(e){return t.socketService.sendApiRequest({type:"getPublicKey",payload:{blockchain:e}})}),K()(e,Y.linkAccount,function(e,n){return t.socketService.sendApiRequest({type:"linkAccount",payload:{account:e,network:n||t.holderFns.get().network}})}),K()(e,Y.hasAccountFor,function(e){return t.socketService.sendApiRequest({type:"hasAccountFor",payload:{network:e||t.holderFns.get().network}})}),K()(e,Y.suggestNetwork,function(e){return t.socketService.sendApiRequest({type:"requestAddNetwork",payload:{network:e||t.holderFns.get().network}})}),K()(e,Y.requestTransfer,function(e,n,r){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{};return t.socketService.sendApiRequest({type:"requestTransfer",payload:{network:e||t.holderFns.get().network,to:n,amount:r,options:i}})}),K()(e,Y.getAvatar,function(){return t.socketService.sendApiRequest({type:"getAvatar",payload:{}})}),K()(e,Y.requestSignature,function(e){return t.socketService.sendApiRequest({type:"requestSignature",payload:e})}),K()(e,Y.createTransaction,function(e,n,r,i){return t.socketService.sendApiRequest({type:"createTransaction",payload:{blockchain:e,actions:n,account:r,network:i||t.holderFns.get().network}})}),K()(e,Y.addToken,function(e,n){return t.socketService.sendApiRequest({type:"addToken",payload:{token:e,network:n||t.holderFns.get().network}})}),e}}]),e}(W),tt=function(t){function e(t,n){var r;return h()(this,e),(r=J()(this,z()(e).call(this,"RelaySocket",p))).name="RelaySocket",r.context=t,r.holderFns=n,r}return Q()(e,t),l()(e,[{key:"connect",value:function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return new Promise(function(){var r=u()(s.a.mark(function r(i){var o;return s.a.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:if(t&&t.length){r.next=2;break}throw new Error("You must specify a name for this connection");case 2:return n=Object.assign({initTimeout:1e3,linkTimeout:3e3,allowHttp:!0},n),r.next=5,fetch("".concat("https://relay.get-scatter.com:443","/app/connect/").concat(C)).then(function(t){return t.json()});case 5:if(o=r.sent){r.next=8;break}return r.abrupt("return",i(!1));case 8:e.socketService=new j(t,n.linkTimeout),e.socketService.link(n.allowHttp,o,"relaysock.get-scatter.com:443").then(function(){var t=u()(s.a.mark(function t(n){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt("return",i(!1));case 2:return e.holderFns.get().isExtension=!1,e.holderFns.get().wallet||(e.holderFns.get().wallet=e.name),t.abrupt("return",i(e.socketService));case 5:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}());case 10:case"end":return r.stop()}},r)}));return function(){return r.apply(this,arguments)}}())}},{key:"runAfterInterfacing",value:function(){var t=u()(s.a.mark(function t(){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.holderFns.get().getIdentityFromPermissions();case 2:return this.holderFns.get().identity=t.sent,t.abrupt("return",!0);case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){return Z.getMethods(this)}},{key:"eventHandler",value:function(){var t=u()(s.a.mark(function t(e){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=e,t.next=t.t0===it.Disconnected?3:t.t0===it.LoggedOut?5:9;break;case 3:return this.holderFns.get().identity=null,t.abrupt("break",9);case 5:return t.next=7,this.holderFns.get().getIdentityFromPermissions();case 7:return this.holderFns.get().identity=t.sent,t.abrupt("break",9);case 9:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}]),e}(W),et=!1;"undefined"!=typeof window&&"undefined"!=typeof document&&(void 0===window.scatter?document.addEventListener("scatterLoaded",function(){return et=!0}):et=!0);var nt=function(){var t=u()(s.a.mark(function t(){var e,n,r=arguments;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=0<r.length&&void 0!==r[0]?r[0]:null,n=1<r.length&&void 0!==r[1]?r[1]:0,t.abrupt("return",new Promise(function(t){return e||(e=t),et?e(!0):5<n?e(!1):void setTimeout(function(){return nt(e,n+1)},100)}));case 3:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}(),rt=function(t){function e(t,n){var r;return h()(this,e),(r=J()(this,z()(e).call(this,"InjectedWallet",p))).name="InjectedWallet",r.context=t,r.holderFns=n,r}return Q()(e,t),l()(e,[{key:"connect",value:function(){var t=u()(s.a.mark(function t(){var e=this;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise(function(){var t=u()(s.a.mark(function t(n){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,nt();case 2:t.sent&&(e.holderFns&&!e.holderFns.get().wallet&&(e.holderFns.get().wallet=e.name),n("injection"));case 4:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()));case 1:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()},{key:"runBeforeInterfacing",value:function(){var t=u()(s.a.mark(function t(){var e,n,r,i,o=this;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return(e=this.context.network)&&(n=window.scatter.getIdentity.bind(window.scatter),r=window.scatter.useIdentity.bind(window.scatter),window.scatter.getIdentity=function(t){return n(t||{accounts:[e]}).then(function(t){return o.holderFns.get().identity=t,r(t),t})},i=window.scatter.suggestNetwork.bind(window.scatter),window.scatter.suggestNetwork=function(t){return i(t||e)}),this.holderFns.get().wallet===this.name&&(window.scatter.wallet=this.name),this.holderFns.set(window.scatter),this.context=this.holderFns.get(),t.abrupt("return",!0);case 6:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"runAfterInterfacing",value:function(){var t=u()(s.a.mark(function t(){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.context.isExtension=!0,this.context.connect=this.connect,t.abrupt("return",!0);case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){return{}}}]),e}(W);n.d(e,"EVENTS",function(){return it}),n.d(e,"Plugin",function(){return W}),n.d(e,"PluginTypes",function(){return r}),n.d(e,"Blockchains",function(){return U}),n.d(e,"Network",function(){return N}),n.d(e,"SocketService",function(){return j}),n.d(e,"WalletInterface",function(){return X}),n.d(e,"WALLET_METHODS",function(){return Y});var it={Disconnected:"dced",LoggedOut:"logout"},ot=[],st={},at=function(){function t(){h()(this,t),this.identity=null,this.network=null,g.loadPlugin(new tt(this,st)),g.loadPlugin(new Z(this,st)),g.loadPlugin(new rt(this,st))}return l()(t,[{key:"loadPlugin",value:function(t){if(!t.isValid())throw new Error("".concat(t.name," doesn't seem to be a valid ScatterJS plugin."));g.loadPlugin(t),t.type===d&&(this[t.name]=t.signatureProvider(function(){if(!st.get().identity)throw new Error("No Identity")},function(){return st.get().identity}),this[t.name+"Hook"]=t.hookProvider,ot.push(t.setSocketService)),t.type===p&&t.init(this,st,ot)}},{key:"connect",value:function(){var t=u()(s.a.mark(function t(e,n){var r=this;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise(function(){var t=u()(s.a.mark(function t(i){var o,a,c,h,f;return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:for(n||(n={}),r.network=n.hasOwnProperty("network")?n.network:null,o=g.wallets(),a=!1,c=[],h=function(t){var r=o[t];c.push(Promise.race([r.connect(e,n).then(function(){var t=u()(s.a.mark(function t(e){return s.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!e){t.next=12;break}if("injection"!==e&&ot.map(function(t){return t(e)}),"function"!=typeof r.runBeforeInterfacing){t.next=5;break}return t.next=5,r.runBeforeInterfacing();case 5:if(new X(r.name,r.methods(),st.get()),"function"!=typeof r.runAfterInterfacing){t.next=9;break}return t.next=9,r.runAfterInterfacing();case 9:X.bindBasics(st.get()),a=!0,i(!0);case 12:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()),new Promise(function(t){return setTimeout(function(){return t(!1)},n.initTimeout||3500)})]))},f=0;f<o.length;f++)h(f);return t.next=9,Promise.all(c);case 9:return t.abrupt("return",i(a));case 10:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()));case 1:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()}]),t}(),ut=new Proxy(new(function(){function t(e){h()(this,t),this.scatter=e}return l()(t,[{key:"plugins",value:function(){var t=this;if(!this.scatter.isExtension){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];n.map(function(e){return t.scatter.loadPlugin(e)})}}},{key:"connect",value:function(){var t;return(t=this.scatter).connect.apply(t,arguments)}},{key:"catchAll",value:function(){}}]),t}())(new at),{get:function(t,e){return void 0===t[e]?t.scatter[e]:t[e]}});st.set=function(t){return ut.scatter=t},st.get=function(){return ut.scatter},"undefined"!=typeof window&&(window.ScatterJS=ut),ut.Plugin=W,ut.PluginTypes=r,ut.Blockchains=U,ut.Network=N,ut.Token=D,ut.SocketService=j,ut.EVENTS=it,ut.WalletInterface=X,ut.WALLET_METHODS=Y;e.default=ut}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvc2hhLmpzL2hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvaGFzaC1iYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyNTYuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL2dldC1yYW5kb20tdmFsdWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvaXNvbW9ycGhpYy13cy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvZ2xvYmFsL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9tZDUuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvcmlwZW1kMTYwL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL3NoYS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyMjQuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTM4NC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9kZXZpY2UtdXVpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL25vZGVfbW9kdWxlcy9kZXZpY2UtdXVpZC9saWIvZGV2aWNlLXV1aWQuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9EZXZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvcGx1Z2lucy9QbHVnaW5UeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL3NyYy9wbHVnaW5zL1BsdWdpblJlcG9zaXRvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvc2VydmljZXMvU3RvcmFnZVNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvc2VydmljZXMvU29ja2V0U2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL3NyYy9wbHVnaW5zL1BsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL3NyYy9tb2RlbHMvQmxvY2tjaGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvbW9kZWxzL1Rva2VuLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvc3JjL21vZGVscy9OZXR3b3JrLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvc3JjL21vZGVscy9XYWxsZXRJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY29yZS9zcmMvd2FsbGV0cy9Mb2NhbFNvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jb3JlL3NyYy93YWxsZXRzL1JlbGF5U29ja2V0LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvc3JjL3dhbGxldHMvSW5qZWN0aW9uLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2NvcmUvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVzb2x2ZSIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93IiwiYXJnIiwiaW5mbyIsImVycm9yIiwiZG9uZSIsIlByb21pc2UiLCJ0aGVuIiwiZm4iLCJzZWxmIiwidGhpcyIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsIm9iaiIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3R5cGVvZiIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsImciLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJnbG9iYWwiLCJiYXNlNjQiLCJpZWVlNzU0IiwiaXNBcnJheSIsImtNYXhMZW5ndGgiLCJCdWZmZXIiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiZW5jb2RpbmdPck9mZnNldCIsIkVycm9yIiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwiQXJyYXlCdWZmZXIiLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwic2xpY2UiLCJmcm9tU3RyaW5nIiwiaXNCdWZmZXIiLCJsZW4iLCJjaGVja2VkIiwiY29weSIsImJ1ZmZlciIsInZhbCIsInR5cGUiLCJkYXRhIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJzaXplIiwidG9TdHJpbmciLCJpc1ZpZXciLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInRvTG93ZXJDYXNlIiwic3dhcCIsImIiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImlzTmFOIiwiYXJyYXlJbmRleE9mIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsImJ1ZiIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIm9mZnNldCIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInBhcnNlSW50Iiwic3Vic3RyIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJzdHIiLCJieXRlQXJyYXkiLCJwdXNoIiwiY2hhckNvZGVBdCIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwic3RhcnQiLCJlbmQiLCJmcm9tQnl0ZUFycmF5IiwidXRmOFNsaWNlIiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJTbG93QnVmZmVyIiwiYWxsb2MiLCJJTlNQRUNUX01BWF9CWVRFUyIsImZvbyIsInN1YmFycmF5IiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsImZpbGwiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsIngiLCJ5IiwiY29uY2F0IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImhleFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwidXRmMTZsZVNsaWNlIiwiZXF1YWxzIiwiaW5zcGVjdCIsIm1heCIsIm1hdGNoIiwiam9pbiIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiQXJyYXkiLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsImZsb29yIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0Iiwic2V0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJ0cmltIiwicmVwbGFjZSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsInBuYSIsIm9iamVjdEtleXMiLCJrZXlzIiwiRHVwbGV4IiwidXRpbCIsImluaGVyaXRzIiwiUmVhZGFibGUiLCJXcml0YWJsZSIsInYiLCJtZXRob2QiLCJvcHRpb25zIiwicmVhZGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25jZSIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm5leHRUaWNrIiwib25FbmROVCIsImhpZ2hXYXRlck1hcmsiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIl9kZXN0cm95IiwiY2IiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwicmVjZWl2ZXIiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk51bWJlcklzTmFOIiwiRXZlbnRFbWl0dGVyIiwiaW5pdCIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsIiRnZXRNYXhMaXN0ZW5lcnMiLCJfYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsInByZXBlbmQiLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJuZXdMaXN0ZW5lciIsImVtaXQiLCJ1bnNoaWZ0Iiwid2FybmVkIiwidyIsImVtaXR0ZXIiLCJjb3VudCIsImNvbnNvbGUiLCJ3YXJuIiwiX29uY2VXcmFwIiwic3RhdGUiLCJmaXJlZCIsIndyYXBGbiIsIndyYXBwZWQiLCJyZW1vdmVMaXN0ZW5lciIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXIiLCJtZXNzYWdlIiwiY29udGV4dCIsImhhbmRsZXIiLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsIm9uIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0IiwiaW5kZXgiLCJwb3AiLCJzcGxpY2VPbmUiLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiX3R5cGVvZjIiLCJpdGVyYXRvciIsIm9iamVjdFRvU3RyaW5nIiwiaXNCb29sZWFuIiwiaXNOdWxsIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc051bWJlciIsImlzU3RyaW5nIiwiaXNTeW1ib2wiLCJpc1VuZGVmaW5lZCIsImlzUmVnRXhwIiwicmUiLCJpc09iamVjdCIsImlzRGF0ZSIsImlzRXJyb3IiLCJpc0Z1bmN0aW9uIiwiaXNQcmltaXRpdmUiLCJSZWZlcmVuY2VFcnJvciIsIl9zZXRQcm90b3R5cGVPZiIsImNvcHlQcm9wcyIsIlNhZmVCdWZmZXIiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIkFzeW5jSXRlcmF0b3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImludm9rZSIsInJlc3VsdCIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsInJldmVyc2UiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwiY2F0Y2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJTdHJlYW0iLCJFRSIsIlRyYW5zZm9ybSIsIlBhc3NUaHJvdWdoIiwicGlwZSIsImRlc3QiLCJzb3VyY2UiLCJvbmRhdGEiLCJjaHVuayIsInBhdXNlIiwib25kcmFpbiIsInJlc3VtZSIsIl9pc1N0ZGlvIiwib25jbG9zZSIsImRpZE9uRW5kIiwiZGVzdHJveSIsIm9uZXJyb3IiLCJjbGVhbnVwIiwic2V0SW1tZWRpYXRlIiwiQ29ya2VkUmVxdWVzdCIsIl90aGlzIiwiY29ya1JlcSIsImNhbGxiYWNrIiwicGVuZGluZ2NiIiwiY29ya2VkUmVxdWVzdHNGcmVlIiwib25Db3JrZWRGaW5pc2giLCJhc3luY1dyaXRlIiwiV3JpdGFibGVTdGF0ZSIsImludGVybmFsVXRpbCIsImRlcHJlY2F0ZSIsIk91clVpbnQ4QXJyYXkiLCJyZWFsSGFzSW5zdGFuY2UiLCJkZXN0cm95SW1wbCIsIm5vcCIsInN0cmVhbSIsImlzRHVwbGV4Iiwib2JqZWN0TW9kZSIsIndyaXRhYmxlT2JqZWN0TW9kZSIsImh3bSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZGVmYXVsdEh3bSIsImZpbmFsQ2FsbGVkIiwibmVlZERyYWluIiwiZW5kaW5nIiwiZmluaXNoZWQiLCJub0RlY29kZSIsImRlY29kZVN0cmluZ3MiLCJkZWZhdWx0RW5jb2RpbmciLCJ3cml0aW5nIiwiY29ya2VkIiwic3luYyIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVjYiIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJfd3JpdGUiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZmluYWwiLCJfZmluYWwiLCJkb1dyaXRlIiwib253cml0ZURyYWluIiwiaG9sZGVyIiwiYWxsQnVmZmVycyIsImlzQnVmIiwiY2FsbEZpbmFsIiwibmVlZCIsInByZWZpbmlzaCIsImdldEJ1ZmZlciIsImN1cnJlbnQiLCJfIiwiaGFzSW5zdGFuY2UiLCJfdWludDhBcnJheVRvQnVmZmVyIiwid3JpdGVBZnRlckVuZCIsInZhbGlkIiwidmFsaWRDaHVuayIsIm5ld0NodW5rIiwiZGVjb2RlQ2h1bmsiLCJsYXN0Iiwid3JpdGVPckJ1ZmZlciIsImNvcmsiLCJ1bmNvcmsiLCJzZXREZWZhdWx0RW5jb2RpbmciLCJlbmRXcml0YWJsZSIsIl91bmRlc3Ryb3kiLCJ1bmRlc3Ryb3kiLCJTdHJpbmdEZWNvZGVyIiwibmIiLCJlbmMiLCJuZW5jIiwicmV0cmllZCIsIl9ub3JtYWxpemVFbmNvZGluZyIsIm5vcm1hbGl6ZUVuY29kaW5nIiwidGV4dCIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidG90YWwiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwiSGFzaCIsImJsb2NrU2l6ZSIsImZpbmFsU2l6ZSIsIl9ibG9jayIsIl9maW5hbFNpemUiLCJfYmxvY2tTaXplIiwiX2xlbiIsInVwZGF0ZSIsImJsb2NrIiwiYWNjdW0iLCJhc3NpZ25lZCIsInJlbWFpbmRlciIsIl91cGRhdGUiLCJkaWdlc3QiLCJyZW0iLCJiaXRzIiwibG93Qml0cyIsImhpZ2hCaXRzIiwiaGFzaCIsIl9oYXNoIiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwib3V0cHV0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsImFicyIsImxvZyIsIkxOMiIsIlJlYWRhYmxlU3RhdGUiLCJFRWxpc3RlbmVyQ291bnQiLCJkZWJ1Z1V0aWwiLCJkZWJ1ZyIsImRlYnVnbG9nIiwiQnVmZmVyTGlzdCIsImtQcm94eUV2ZW50cyIsInJlYWRhYmxlT2JqZWN0TW9kZSIsInJlYWRhYmxlSHdtIiwicmVhZGFibGVIaWdoV2F0ZXJNYXJrIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsImVuZEVtaXR0ZWQiLCJyZWFkaW5nIiwibmVlZFJlYWRhYmxlIiwiZW1pdHRlZFJlYWRhYmxlIiwicmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWVTY2hlZHVsZWQiLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJkZWNvZGVyIiwiX3JlYWQiLCJyZWFkYWJsZUFkZENodW5rIiwiYWRkVG9Gcm9udCIsInNraXBDaHVua0NoZWNrIiwiZW1pdFJlYWRhYmxlIiwib25Fb2ZDaHVuayIsImNodW5rSW52YWxpZCIsImFkZENodW5rIiwibWF5YmVSZWFkTW9yZSIsIm5lZWRNb3JlRGF0YSIsImlzUGF1c2VkIiwic2V0RW5jb2RpbmciLCJNQVhfSFdNIiwiaG93TXVjaFRvUmVhZCIsImhlYWQiLCJjb21wdXRlTmV3SGlnaFdhdGVyTWFyayIsImVtaXRSZWFkYWJsZV8iLCJmbG93IiwibWF5YmVSZWFkTW9yZV8iLCJuUmVhZGluZ05leHRUaWNrIiwicmVzdW1lXyIsImZyb21MaXN0IiwiY2xlYXIiLCJoYXNTdHJpbmdzIiwidGFpbCIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJmcm9tTGlzdFBhcnRpYWwiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ4cyIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsInVucGlwZSIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmZpbmlzaCIsImNsZWFuZWRVcCIsInBpcGVPbkRyYWluIiwiaW5jcmVhc2VkQXdhaXREcmFpbiIsImV2ZW50IiwiZGVzdHMiLCJzcGxpY2UiLCJldiIsInBhdXNlZCIsIl9mcm9tTGlzdCIsImVtaXRFcnJvck5UIiwicmVhZGFibGVEZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsImFmdGVyVHJhbnNmb3JtIiwidHMiLCJfdHJhbnNmb3JtU3RhdGUiLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNodW5rIiwicnMiLCJuZWVkVHJhbnNmb3JtIiwid3JpdGVlbmNvZGluZyIsInRyYW5zZm9ybSIsIl90cmFuc2Zvcm0iLCJmbHVzaCIsIl9mbHVzaCIsIl90aGlzMiIsImVycjIiLCJzY29wZSIsIlRpbWVvdXQiLCJpZCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImNsb3NlIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJpdGVtIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwiX2NsYXNzQ2FsbENoZWNrIiwiY3VzdG9tIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJodG1sIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImRvY3VtZW50IiwiYXR0YWNoVG8iLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJjcmVhdGVFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsInJhbmRvbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInRhc2siLCJjb25maWciLCJsb2NhbFN0b3JhZ2UiLCJtc2ciLCJ0cmFjZSIsIkhhc2hCYXNlIiwiX2Jsb2NrT2Zmc2V0IiwiX2xlbmd0aCIsIl9maW5hbGl6ZWQiLCJwcmVmaXgiLCJ0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIiLCJjYXJyeSIsIl9kaWdlc3QiLCJLIiwiVyIsIlNoYTI1NiIsIl93IiwiY2giLCJ6IiwibWFqIiwic2lnbWEwIiwic2lnbWExIiwiZ2FtbWEwIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiX2ciLCJfaCIsIk0iLCJmIiwiaCIsIlQxIiwiVDIiLCJIIiwiU2hhNTEyIiwiQ2giLCJ4bCIsIkdhbW1hMCIsIkdhbW1hMGwiLCJHYW1tYTEiLCJHYW1tYTFsIiwiZ2V0Q2FycnkiLCJfYWgiLCJfYmgiLCJfY2giLCJfZGgiLCJfZWgiLCJfZmgiLCJfZ2giLCJfaGgiLCJfYWwiLCJfYmwiLCJfY2wiLCJfZGwiLCJfZWwiLCJfZmwiLCJfZ2wiLCJfaGwiLCJhaCIsImJoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImFsIiwiYmwiLCJjbCIsImRsIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJ4aCIsImdhbW1hMGwiLCJnYW1tYTEiLCJnYW1tYTFsIiwiV2k3aCIsIldpN2wiLCJXaTE2aCIsIldpMTZsIiwiV2lsIiwiV2loIiwibWFqaCIsIm1hamwiLCJzaWdtYTBoIiwic2lnbWEwbCIsInNpZ21hMWgiLCJzaWdtYTFsIiwiS2loIiwiS2lsIiwiY2hoIiwiY2hsIiwidDFsIiwidDFoIiwidDJsIiwidDJoIiwid3JpdGVJbnQ2NEJFIiwiYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVNwcmVhZCIsImFycmF5V2l0aEhvbGVzIiwiaXRlcmFibGVUb0FycmF5TGltaXQiLCJub25JdGVyYWJsZVJlc3QiLCJub2RlQ3J5cHRvIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwibXNDcnlwdG8iLCJyYW5kb21CeXRlcyIsIk1ENSIsIlJJUEVNRDE2MCIsInNoYSIsIkJhc2UiLCJhbGciLCJ3cyIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsImFycjIiLCJfbiIsIl9zIiwiX2kiLCJ3aW4iLCJBUlJBWTE2Iiwicm90bCIsImZuRiIsImsiLCJmbkciLCJmbkgiLCJmbkkiLCJ6bCIsInpyIiwic2wiLCJzciIsImhyIiwiZm4xIiwiZm4yIiwiZm4zIiwiZm40IiwiZm41Iiwid29yZHMiLCJhciIsImJyIiwiY3IiLCJkciIsInRsIiwidHIiLCJhbGdvcml0aG0iLCJBbGdvcml0aG0iLCJzaGExIiwic2hhMjI0Iiwic2hhMjU2Iiwic2hhMzg0Iiwic2hhNTEyIiwiU2hhIiwicm90bDMwIiwiZnQiLCJTaGExIiwicm90bDUiLCJTaGEyMjQiLCJTSEE1MTIiLCJTaGEzODQiLCJDaXBoZXJCYXNlIiwiaGFzaE1vZGUiLCJfZmluYWxPckRpZ2VzdCIsIl9fZmluYWwiLCJfZGVjb2RlciIsIl9lbmNvZGluZyIsImlucHV0RW5jIiwib3V0cHV0RW5jIiwib3V0RGF0YSIsIl90b1N0cmluZyIsInNldEF1dG9QYWRkaW5nIiwiZ2V0QXV0aFRhZyIsInNldEF1dGhUYWciLCJzZXRBQUQiLCJmaW4iLCJJU19CT1RfUkVHRVhQIiwiUmVnRXhwIiwiRGV2aWNlVVVJRCIsImRlZk9wdGlvbnMiLCJsYW5ndWFnZSIsInBsYXRmb3JtIiwib3MiLCJwaXhlbERlcHRoIiwiY29sb3JEZXB0aCIsInJlc29sdXRpb24iLCJpc0F1dGhvcml0YXRpdmUiLCJzaWxrQWNjZWxlcmF0ZWQiLCJpc0tpbmRsZUZpcmUiLCJpc0Rlc2t0b3AiLCJpc01vYmlsZSIsImlzVGFibGV0IiwiaXNXaW5kb3dzIiwiaXNMaW51eCIsImlzTGludXg2NCIsImlzQ2hyb21lT1MiLCJpc01hYyIsImlzaVBhZCIsImlzaVBob25lIiwiaXNpUG9kIiwiaXNBbmRyb2lkIiwiaXNTYW1zdW5nIiwiaXNTbWFydFRWIiwiaXNSYXNwYmVycnkiLCJpc0JsYWNrYmVycnkiLCJpc1RvdWNoU2NyZWVuIiwiaXNPcGVyYSIsImlzSUUiLCJpc0VkZ2UiLCJpc0lFQ29tcGF0aWJpbGl0eU1vZGUiLCJpc1NhZmFyaSIsImlzRmlyZWZveCIsImlzV2Via2l0IiwiaXNDaHJvbWUiLCJpc0tvbnF1ZXJvciIsImlzT21uaVdlYiIsImlzU2VhTW9ua2V5IiwiaXNGbG9jayIsImlzQW1heWEiLCJpc1BoYW50b21KUyIsImlzRXBpcGhhbnkiLCJjcHVDb3JlcyIsIl9WZXJzaW9ucyIsIkVkZ2UiLCJGaXJlZm94IiwiSUUiLCJDaHJvbWUiLCJDaHJvbWl1bSIsIlNhZmFyaSIsIk9wZXJhIiwiUHMzIiwiUHNwIiwiQW1heWEiLCJTZWFNb25rZXkiLCJPbW5pV2ViIiwiRmxvY2siLCJFcGlwaGFueSIsIldpbkpzIiwiUGhhbnRvbUpTIiwiVUMiLCJfQnJvd3NlcnMiLCJLb25xdWVyb3IiLCJQUzMiLCJQU1AiLCJfT1MiLCJXaW5kb3dzMTAiLCJXaW5kb3dzODEiLCJXaW5kb3dzOCIsIldpbmRvd3M3IiwiVW5rbm93bldpbmRvd3MiLCJXaW5kb3dzVmlzdGEiLCJXaW5kb3dzMjAwMyIsIldpbmRvd3NYUCIsIldpbmRvd3MyMDAwIiwiV2luZG93c1Bob25lOCIsIk9TWENoZWV0YWgiLCJPU1hQdW1hIiwiT1NYSmFndWFyIiwiT1NYUGFudGhlciIsIk9TWFRpZ2VyIiwiT1NYTGVvcGFyZCIsIk9TWFNub3dMZW9wYXJkIiwiT1NYTGlvbiIsIk9TWE1vdW50YWluTGlvbiIsIk9TWE1hdmVyaWNrcyIsIk9TWFlvc2VtaXRlIiwiT1NYRWxDYXBpdGFuIiwiT1NYU2llcnJhIiwiTWFjIiwiTGludXgiLCJMaW51eDY0IiwiQ2hyb21lT1MiLCJXaWkiLCJpUGFkIiwiaVBob25lIiwiQmFkYSIsIkN1cmwiLCJfUGxhdGZvcm0iLCJXaW5kb3dzIiwiV2luZG93c1Bob25lIiwiUGxheXN0YXRpb24iLCJpUG9kIiwiQW5kcm9pZCIsIkJsYWNrYmVycnkiLCJTYW1zdW5nIiwiRGVmYXVsdEFnZW50IiwiaXNCYWRhIiwiaXNCb3QiLCJpc0N1cmwiLCJpc0FuZHJvaWRUYWJsZXQiLCJpc1dpbkpzIiwiaXNTaWxrIiwiaXNDYXB0aXZlIiwiaXNVQyIsImdlb0lwIiwiaGFzaEludCIsImhhc2hNRDUiLCJyb3RhdGVMZWZ0IiwibFZhbHVlIiwiaVNoaWZ0Qml0cyIsImFkZFVuc2lnbmVkIiwibFgiLCJsWSIsImxYNCIsImxZNCIsImxYOCIsImxZOCIsImxSZXN1bHQiLCJnRkYiLCJhYyIsImdGIiwiZ0dHIiwiZ0ciLCJnSEgiLCJnSCIsImdJSSIsImdJIiwid29yZFRvSGV4IiwibENvdW50Iiwid29yZFRvSGV4VmFsdWUiLCJ3b3JkVG9IZXhWYWx1ZVRlbXAiLCJBQSIsIkJCIiwiQ0MiLCJERCIsImxXb3JkQ291bnQiLCJsTWVzc2FnZUxlbmd0aCIsImxOdW1iZXJPZldvcmRzVGVtcDEiLCJsTnVtYmVyT2ZXb3JkcyIsImxXb3JkQXJyYXkiLCJsQnl0ZVBvc2l0aW9uIiwibEJ5dGVDb3VudCIsImNvbnZlcnRUb1dvcmRBcnJheSIsInV0ZnRleHQiLCJ1dGY4RW5jb2RlIiwiQWdlbnQiLCJnZXRCcm93c2VyIiwidGVzdCIsIiQxIiwiZ2V0QnJvd3NlclZlcnNpb24iLCIkMiIsImdldE9TIiwiZ2V0UGxhdGZvcm0iLCJpc1dpbmRvd3NQaG9uZSIsImlzaVNhbXN1bmciLCJ0ZXN0Q29tcGF0aWJpbGl0eU1vZGUiLCJ1YSIsInRyaWRlbnRWZXJzaW9uIiwidGVzdFNpbGsiLCJTaWxrQWNjZWxlcmF0ZWQiLCJ0ZXN0S2luZGxlRmlyZSIsInRlc3RDYXB0aXZlTmV0d29yayIsInRlc3RNb2JpbGUiLCJ0ZXN0VGFibGV0IiwidGVzdE5naW54R2VvSVAiLCJoZWFkZXJzIiwidGVzdEJvdCIsImV4ZWMiLCJ0ZXN0U21hcnRUViIsInRlc3RBbmRyb2lkVGFibGV0IiwidGVzdFRvdWNoU3VwcG9ydCIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsImdldExhZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJicm93c2VyTGFuZ3VhZ2UiLCJzeXN0ZW1MYW5ndWFnZSIsImdldENvbG9yRGVwdGgiLCJzY3JlZW4iLCJnZXRTY3JlZW5SZXNvbHV0aW9uIiwiYXZhaWxXaWR0aCIsImF2YWlsSGVpZ2h0IiwiZ2V0UGl4ZWxEZXB0aCIsImdldENQVSIsImhhcmR3YXJlQ29uY3VycmVuY3kiLCJwYXJzZSIsInVzZXJBZ2VudCIsImN1c3RvbURhdGEiLCJkdSIsImR1YSIsInRtcFV1aWQiLCJkZXZpY2UiLCJCTE9DS0NIQUlOX1NVUFBPUlQiLCJXQUxMRVRfU1VQUE9SVCIsIlBsdWdpblJlcG9zaXRvcnkiLCJjbGFzc0NhbGxDaGVja19kZWZhdWx0IiwicGx1Z2lucyIsInBsdWdpbiIsImZpbHRlciIsIlBsdWdpblR5cGVzIiwic2lnbmF0dXJlUHJvdmlkZXJzIiwibWFwIiwiZmluZCIsImFsbCIsImFzeW5jVG9HZW5lcmF0b3JfZGVmYXVsdCIsInJlZ2VuZXJhdG9yX2RlZmF1bHQiLCJnZXRFbmRvcnNlZE5ldHdvcmsiLCJzdG9yYWdlIiwiZ2V0V2luZG93Iiwic2V0SXRlbSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiU3RvcmFnZVNlcnZpY2UiLCJhcHBrZXkiLCJub25jZSIsInJlcXVpcmUiLCJjcmVhdGVIYXNoIiwiU29ja2V0U2VydmljZSIsIl9wbHVnaW4iLCJfdGltZW91dCIsInV1aWQiLCJzb2NrZXQiLCJjb25uZWN0ZWQiLCJwYWlyZWQiLCJvcGVuUmVxdWVzdHMiLCJwYWlyaW5nUHJvbWlzZSIsImV2ZW50SGFuZGxlcnMiLCJnZXRBcHBLZXkiLCJhbGxvd0h0dHAiLCJfdXVpZCIsInNvY2tldEhvc3QiLCJyYWNlIiwic2V0dXBTb2NrZXQiLCJKU09OIiwic2xpY2VkVG9BcnJheV9kZWZhdWx0Iiwic2VuZCIsIm1zZ19wYWlyZWQiLCJtc2dfcmVrZXkiLCJtc2dfYXBpIiwiZXZlbnRfYXBpIiwic2F2ZWRLZXkiLCJoYXNoZWQiLCJzZXRBcHBLZXkiLCJvcmlnaW4iLCJnZXRPcmlnaW4iLCJyZXNwb25zZSIsIm9wZW5SZXF1ZXN0IiwidHlwZW9mX2RlZmF1bHQiLCJwYXlsb2FkIiwiZ2V0SG9zdG5hbWUiLCJwb3J0Iiwic3NsIiwiY2hlY2tQb3J0IiwiaG9zdCIsImZldGNoIiwiYXZhaWxhYmxlUG9ydHMiLCJ0b0NvbnN1bWFibGVBcnJheV9kZWZhdWx0IiwiX3BvcnQiLCJ0cmllcyIsInNvcnQiLCJwb3J0cyIsInRyeVNvY2tldCIsInByb21pc2UiLCJyZXNvbHZlciIsImhvc3RuYW1lIiwib25vcGVuIiwicGFpciIsInJlcXVlc3QiLCJnZXROb25jZSIsIm5leHROb25jZSIsInNldE5vbmNlIiwiYXNzaWduIiwicGFzc3Rocm91Z2giLCJzdHJpbmdpZnkiLCJnZXRPcmlnaW5PclBsdWdpbiIsImxvY2F0aW9uIiwiUGx1Z2luIiwiX25hbWUiLCJfdHlwZSIsImpzb24iLCJwbGFjZWhvbGRlciIsIkJsb2NrY2hhaW5zIiwiRU9TIiwiRVRIIiwiVFJYIiwiVG9rZW4iLCJibG9ja2NoYWluIiwiY29udHJhY3QiLCJzeW1ib2wiLCJkZWNpbWFscyIsIk5ldHdvcmsiLCJfcHJvdG9jb2wiLCJfaG9zdCIsImNoYWluSWQiLCJwcm90b2NvbCIsInRva2VuIiwiZnJvbUpzb24iLCJXQUxMRVRfTUVUSE9EUyIsImRpc2Nvbm5lY3QiLCJpc0Nvbm5lY3RlZCIsImlzUGFpcmVkIiwiYWRkRXZlbnRIYW5kbGVyIiwicmVtb3ZlRXZlbnRIYW5kbGVyIiwibGlzdGVuIiwiZ2V0VmVyc2lvbiIsImdldElkZW50aXR5IiwiZ2V0QWxsQWNjb3VudHNGb3IiLCJnZXRJZGVudGl0eUZyb21QZXJtaXNzaW9ucyIsImZvcmdldElkZW50aXR5IiwidXBkYXRlSWRlbnRpdHkiLCJhdXRoZW50aWNhdGUiLCJnZXRBcmJpdHJhcnlTaWduYXR1cmUiLCJnZXRQdWJsaWNLZXkiLCJsaW5rQWNjb3VudCIsImhhc0FjY291bnRGb3IiLCJzdWdnZXN0TmV0d29yayIsInJlcXVlc3RUcmFuc2ZlciIsImdldEF2YXRhciIsInJlcXVlc3RTaWduYXR1cmUiLCJjcmVhdGVUcmFuc2FjdGlvbiIsImFkZFRva2VuIiwiQUxURVJOQVRFUyIsIl9BTFRFUk5BVEVTIiwiZGVmaW5lUHJvcGVydHlfZGVmYXVsdCIsIldhbGxldEludGVyZmFjZSIsImlkZW50aWZpZXIiLCJtZXRob2RzIiwidW5hdmFpbGFibGUiLCJiaW5kVG9Db250ZXh0IiwiYWNjb3VudCIsImlkZW50aXR5IiwiYWNjb3VudHMiLCJMb2NhbFNvY2tldCIsImhvbGRlckZucyIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5fZGVmYXVsdCIsImdldFByb3RvdHlwZU9mX2RlZmF1bHQiLCJwbHVnaW5OYW1lIiwiaW5pdFRpbWVvdXQiLCJsaW5rVGltZW91dCIsInNvY2tldFNlcnZpY2UiLCJsaW5rIiwiYXV0aGVudGljYXRlZCIsImlzRXh0ZW5zaW9uIiwid2FsbGV0IiwiZXZlbnRIYW5kbGVyIiwiZ2V0TWV0aG9kcyIsIkVWRU5UUyIsIkRpc2Nvbm5lY3RlZCIsIkxvZ2dlZE91dCIsInNldEFuZFJldHVybklkIiwiZm9yZ2V0Iiwic2VuZEFwaVJlcXVlc3QiLCJyZXF1aXJlZEZpZWxkcyIsImZpZWxkcyIsIm5ldHdvcmsiLCJreWMiLCJwdWJsaWNLZXkiLCJ0byIsImFtb3VudCIsImFjdGlvbnMiLCJSZWxheVNvY2tldCIsImlzQXZhaWxhYmxlIiwic2NhdHRlciIsInBvbGxFeGlzdGVuY2UiLCJJbmplY3Rpb24iLCJnZXRJZCIsInVzZUlkZW50aXR5Iiwic3VnZ2VzdCIsIm5ldCIsImNvbm5lY3QiLCJzb2NrZXRTZXR0ZXJzIiwiSW5kZXgiLCJsb2FkUGx1Z2luIiwiaXNWYWxpZCIsInNpZ25hdHVyZVByb3ZpZGVyIiwiaG9va1Byb3ZpZGVyIiwic2V0U29ja2V0U2VydmljZSIsIndhbGxldHMiLCJwcm9taXNlcyIsInJ1bkJlZm9yZUludGVyZmFjaW5nIiwicnVuQWZ0ZXJJbnRlcmZhY2luZyIsImJpbmRCYXNpY3MiLCJQcm94eSIsIl9zY2F0dGVyIiwiU2NhdHRlckpTIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFyQixFQUFBVSxFQUFBZSxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9BQUFOLEVBQUFNLElBQXFCQyxLQUFBLEtBQUFELElBQ3JJLE9BQUFGLEdBSUF6QixFQUFBNkIsRUFBQSxTQUFBMUIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBcUIsV0FDQSxXQUEyQixPQUFBckIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQWlCLEVBQUFDLEdBQXNELE9BQUFqQixPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF1QixFQUFBQyxJQUd0RC9CLEVBQUFrQyxFQUFBLEdBSUFsQyxJQUFBbUMsRUFBQSx1QkNsRkFoQyxFQUFBRCxRQUFpQkYsRUFBUSxvQkNBekIsU0FBQW9DLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFkLEVBQUFlLEdBQ0EsSUFDQSxJQUFBQyxFQUFBTixFQUFBVixHQUFBZSxHQUNBckIsRUFBQXNCLEVBQUF0QixNQUNHLE1BQUF1QixHQUVILFlBREFMLEVBQUFLLEdBSUFELEVBQUFFLEtBQ0FQLEVBQUFqQixHQUVBeUIsUUFBQVIsUUFBQWpCLEdBQUEwQixLQUFBUCxFQUFBQyxHQXdCQXRDLEVBQUFELFFBcEJBLFNBQUE4QyxHQUNBLGtCQUNBLElBQUFDLEVBQUFDLEtBQ0FDLEVBQUFDLFVBQ0EsV0FBQU4sUUFBQSxTQUFBUixFQUFBQyxHQUNBLElBQUFGLEVBQUFXLEVBQUFLLE1BQUFKLEVBQUFFLEdBRUEsU0FBQVgsRUFBQW5CLEdBQ0FlLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUEsT0FBQXBCLEdBR0EsU0FBQW9CLEVBQUFhLEdBQ0FsQixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBLFFBQUFhLEdBR0FkLE9BQUFlLHNCQ2hCQXBELEVBQUFELFFBZkEsU0FBQXNELEVBQUE3QixFQUFBTixHQVlBLE9BWEFNLEtBQUE2QixFQUNBMUMsT0FBQUMsZUFBQXlDLEVBQUE3QixFQUFBLENBQ0FOLFFBQ0FMLFlBQUEsRUFDQXlDLGNBQUEsRUFDQUMsVUFBQSxJQUdBRixFQUFBN0IsR0FBQU4sRUFHQW1DLGtCQ05BckQsRUFBQUQsUUFOQSxTQUFBeUQsRUFBQUMsR0FDQSxLQUFBRCxhQUFBQyxHQUNBLFVBQUFDLFVBQUEscURDRkEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxRQUFBNUQsRUFBQSxFQUFpQkEsRUFBQTRELEVBQUFDLE9BQWtCN0QsSUFBQSxDQUNuQyxJQUFBOEQsRUFBQUYsRUFBQTVELEdBQ0E4RCxFQUFBbEQsV0FBQWtELEVBQUFsRCxhQUFBLEVBQ0FrRCxFQUFBVCxjQUFBLEVBQ0EsVUFBQVMsTUFBQVIsVUFBQSxHQUNBNUMsT0FBQUMsZUFBQWdELEVBQUFHLEVBQUF2QyxJQUFBdUMsSUFVQS9ELEVBQUFELFFBTkEsU0FBQTBELEVBQUFPLEVBQUFDLEdBR0EsT0FGQUQsR0FBQUwsRUFBQUYsRUFBQTVCLFVBQUFtQyxHQUNBQyxHQUFBTixFQUFBRixFQUFBUSxHQUNBUixvQkNiQSxJQUFBUyxFQUFjckUsRUFBUSxJQUV0QnNFLEVBQTRCdEUsRUFBUSxJQVVwQ0csRUFBQUQsUUFSQSxTQUFBK0MsRUFBQTFDLEdBQ0EsT0FBQUEsR0FBQSxXQUFBOEQsRUFBQTlELElBQUEsbUJBQUFBLEVBSUErRCxFQUFBckIsR0FIQTFDLGtCQ05BLElBQUFnRSxFQUdBQSxFQUFBLFdBQ0EsT0FBQXJCLEtBREEsR0FJQSxJQUVBcUIsS0FBQSxJQUFBQyxTQUFBLGlCQUNDLE1BQUFDLEdBRUQsaUJBQUFDLFNBQUFILEVBQUFHLFFBT0F2RSxFQUFBRCxRQUFBcUUsaUJDbkJBLFNBQUFJLEVBQUE5RCxHQUlBLE9BSEFWLEVBQUFELFFBQUF5RSxFQUFBN0QsT0FBQThELGVBQUE5RCxPQUFBK0QsZUFBQSxTQUFBaEUsR0FDQSxPQUFBQSxFQUFBaUUsV0FBQWhFLE9BQUErRCxlQUFBaEUsSUFFQThELEVBQUE5RCxHQUdBVixFQUFBRCxRQUFBeUUsbUJDUEEsSUFBQUMsRUFBcUI1RSxFQUFRLElBaUI3QkcsRUFBQUQsUUFmQSxTQUFBNkUsRUFBQUMsR0FDQSxzQkFBQUEsR0FBQSxPQUFBQSxFQUNBLFVBQUFuQixVQUFBLHNEQUdBa0IsRUFBQS9DLFVBQUFsQixPQUFBWSxPQUFBc0QsS0FBQWhELFVBQUEsQ0FDQWlELFlBQUEsQ0FDQTVELE1BQUEwRCxFQUNBckIsVUFBQSxFQUNBRCxjQUFBLEtBR0F1QixHQUFBSixFQUFBRyxFQUFBQyxxQ0NkQSxTQUFBRTs7Ozs7OztBQVVBLElBQUFDLEVBQWFuRixFQUFRLElBQ3JCb0YsRUFBY3BGLEVBQVEsSUFDdEJxRixFQUFjckYsRUFBUSxJQW1EdEIsU0FBQXNGLElBQ0EsT0FBQUMsRUFBQUMsb0JBQ0EsV0FDQSxXQUdBLFNBQUFDLEVBQUFDLEVBQUF6QixHQUNBLEdBQUFxQixJQUFBckIsRUFDQSxVQUFBMEIsV0FBQSw4QkFjQSxPQVpBSixFQUFBQyxxQkFFQUUsRUFBQSxJQUFBRSxXQUFBM0IsSUFDQWEsVUFBQVMsRUFBQXZELFdBR0EsT0FBQTBELElBQ0FBLEVBQUEsSUFBQUgsRUFBQXRCLElBRUF5QixFQUFBekIsVUFHQXlCLEVBYUEsU0FBQUgsRUFBQTdDLEVBQUFtRCxFQUFBNUIsR0FDQSxLQUFBc0IsRUFBQUMscUJBQUF0QyxnQkFBQXFDLEdBQ0EsV0FBQUEsRUFBQTdDLEVBQUFtRCxFQUFBNUIsR0FJQSxvQkFBQXZCLEVBQUEsQ0FDQSxvQkFBQW1ELEVBQ0EsVUFBQUMsTUFDQSxxRUFHQSxPQUFBQyxFQUFBN0MsS0FBQVIsR0FFQSxPQUFBc0QsRUFBQTlDLEtBQUFSLEVBQUFtRCxFQUFBNUIsR0FXQSxTQUFBK0IsRUFBQU4sRUFBQXJFLEVBQUF3RSxFQUFBNUIsR0FDQSxvQkFBQTVDLEVBQ0EsVUFBQXdDLFVBQUEseUNBR0EsMEJBQUFvQyxhQUFBNUUsYUFBQTRFLFlBNkhBLFNBQUFQLEVBQUFRLEVBQUFDLEVBQUFsQyxHQUdBLEdBRkFpQyxFQUFBRSxXQUVBRCxFQUFBLEdBQUFELEVBQUFFLFdBQUFELEVBQ0EsVUFBQVIsV0FBQSw2QkFHQSxHQUFBTyxFQUFBRSxXQUFBRCxHQUFBbEMsR0FBQSxHQUNBLFVBQUEwQixXQUFBLDZCQUlBTyxPQURBM0MsSUFBQTRDLFFBQUE1QyxJQUFBVSxFQUNBLElBQUEyQixXQUFBTSxRQUNHM0MsSUFBQVUsRUFDSCxJQUFBMkIsV0FBQU0sRUFBQUMsR0FFQSxJQUFBUCxXQUFBTSxFQUFBQyxFQUFBbEMsR0FHQXNCLEVBQUFDLHFCQUVBRSxFQUFBUSxHQUNBcEIsVUFBQVMsRUFBQXZELFVBR0EwRCxFQUFBVyxFQUFBWCxFQUFBUSxHQUVBLE9BQUFSLEVBdkpBWSxDQUFBWixFQUFBckUsRUFBQXdFLEVBQUE1QixHQUdBLGlCQUFBNUMsRUF3RkEsU0FBQXFFLEVBQUFhLEVBQUFDLEdBQ0EsaUJBQUFBLEdBQUEsS0FBQUEsSUFDQUEsRUFBQSxRQUdBLElBQUFqQixFQUFBa0IsV0FBQUQsR0FDQSxVQUFBM0MsVUFBQSw4Q0FHQSxJQUFBSSxFQUFBLEVBQUFtQyxFQUFBRyxFQUFBQyxHQUdBRSxHQUZBaEIsRUFBQUQsRUFBQUMsRUFBQXpCLElBRUEwQyxNQUFBSixFQUFBQyxHQUVBRSxJQUFBekMsSUFJQXlCLElBQUFrQixNQUFBLEVBQUFGLElBR0EsT0FBQWhCLEVBNUdBbUIsQ0FBQW5CLEVBQUFyRSxFQUFBd0UsR0FzSkEsU0FBQUgsRUFBQWxDLEdBQ0EsR0FBQStCLEVBQUF1QixTQUFBdEQsR0FBQSxDQUNBLElBQUF1RCxFQUFBLEVBQUFDLEVBQUF4RCxFQUFBUyxRQUdBLFlBRkF5QixFQUFBRCxFQUFBQyxFQUFBcUIsSUFFQTlDLE9BQ0F5QixHQUdBbEMsRUFBQXlELEtBQUF2QixFQUFBLElBQUFxQixHQUNBckIsR0FHQSxHQUFBbEMsRUFBQSxDQUNBLHVCQUFBeUMsYUFDQXpDLEVBQUEwRCxrQkFBQWpCLGFBQUEsV0FBQXpDLEVBQ0EsdUJBQUFBLEVBQUFTLFNBKzhDQWtELEVBLzhDQTNELEVBQUFTLFNBZzlDQWtELEVBLzhDQTFCLEVBQUFDLEVBQUEsR0FFQVcsRUFBQVgsRUFBQWxDLEdBR0EsY0FBQUEsRUFBQTRELE1BQUEvQixFQUFBN0IsRUFBQTZELE1BQ0EsT0FBQWhCLEVBQUFYLEVBQUFsQyxFQUFBNkQsTUF3OENBLElBQUFGLEVBcDhDQSxVQUFBdEQsVUFBQSxzRkE5S0F5RCxDQUFBNUIsRUFBQXJFLEdBNEJBLFNBQUFrRyxFQUFBQyxHQUNBLG9CQUFBQSxFQUNBLFVBQUEzRCxVQUFBLG9DQUNHLEdBQUEyRCxFQUFBLEVBQ0gsVUFBQTdCLFdBQUEsd0NBNEJBLFNBQUFJLEVBQUFMLEVBQUE4QixHQUdBLEdBRkFELEVBQUFDLEdBQ0E5QixFQUFBRCxFQUFBQyxFQUFBOEIsRUFBQSxNQUFBUixFQUFBUSxLQUNBakMsRUFBQUMsb0JBQ0EsUUFBQXBGLEVBQUEsRUFBbUJBLEVBQUFvSCxJQUFVcEgsRUFDN0JzRixFQUFBdEYsR0FBQSxFQUdBLE9BQUFzRixFQXdDQSxTQUFBVyxFQUFBWCxFQUFBUSxHQUNBLElBQUFqQyxFQUFBaUMsRUFBQWpDLE9BQUEsTUFBQStDLEVBQUFkLEVBQUFqQyxRQUNBeUIsRUFBQUQsRUFBQUMsRUFBQXpCLEdBQ0EsUUFBQTdELEVBQUEsRUFBaUJBLEVBQUE2RCxFQUFZN0QsR0FBQSxFQUM3QnNGLEVBQUF0RixHQUFBLElBQUE4RixFQUFBOUYsR0FFQSxPQUFBc0YsRUErREEsU0FBQXNCLEVBQUEvQyxHQUdBLEdBQUFBLEdBQUFxQixJQUNBLFVBQUFLLFdBQUEsMERBQ0FMLElBQUFtQyxTQUFBLGNBRUEsU0FBQXhELEVBc0ZBLFNBQUFtQyxFQUFBRyxFQUFBQyxHQUNBLEdBQUFqQixFQUFBdUIsU0FBQVAsR0FDQSxPQUFBQSxFQUFBdEMsT0FFQSx1QkFBQWdDLGFBQUEsbUJBQUFBLFlBQUF5QixTQUNBekIsWUFBQXlCLE9BQUFuQixpQkFBQU4sYUFDQSxPQUFBTSxFQUFBSCxXQUVBLGlCQUFBRyxJQUNBQSxFQUFBLEdBQUFBLEdBR0EsSUFBQVEsRUFBQVIsRUFBQXRDLE9BQ0EsT0FBQThDLEVBQUEsU0FJQSxJQURBLElBQUFZLEdBQUEsSUFFQSxPQUFBbkIsR0FDQSxZQUNBLGFBQ0EsYUFDQSxPQUFBTyxFQUNBLFdBQ0EsWUFDQSxVQUFBeEQsRUFDQSxPQUFBcUUsRUFBQXJCLEdBQUF0QyxPQUNBLFdBQ0EsWUFDQSxjQUNBLGVBQ0EsU0FBQThDLEVBQ0EsVUFDQSxPQUFBQSxJQUFBLEVBQ0EsYUFDQSxPQUFBYyxFQUFBdEIsR0FBQXRDLE9BQ0EsUUFDQSxHQUFBMEQsRUFBQSxPQUFBQyxFQUFBckIsR0FBQXRDLE9BQ0F1QyxHQUFBLEdBQUFBLEdBQUFzQixjQUNBSCxHQUFBLEdBZ0ZBLFNBQUFJLEVBQUFDLEVBQUFuRyxFQUFBckIsR0FDQSxJQUFBSixFQUFBNEgsRUFBQW5HLEdBQ0FtRyxFQUFBbkcsR0FBQW1HLEVBQUF4SCxHQUNBd0gsRUFBQXhILEdBQUFKLEVBbUlBLFNBQUE2SCxFQUFBZixFQUFBQyxFQUFBaEIsRUFBQUssRUFBQTBCLEdBRUEsT0FBQWhCLEVBQUFqRCxPQUFBLFNBbUJBLEdBaEJBLGlCQUFBa0MsR0FDQUssRUFBQUwsRUFDQUEsRUFBQSxHQUNHQSxFQUFBLFdBQ0hBLEVBQUEsV0FDR0EsR0FBQSxhQUNIQSxHQUFBLFlBRUFBLEtBQ0FnQyxNQUFBaEMsS0FFQUEsRUFBQStCLEVBQUEsRUFBQWhCLEVBQUFqRCxPQUFBLEdBSUFrQyxFQUFBLElBQUFBLEVBQUFlLEVBQUFqRCxPQUFBa0MsR0FDQUEsR0FBQWUsRUFBQWpELE9BQUEsQ0FDQSxHQUFBaUUsRUFBQSxTQUNBL0IsRUFBQWUsRUFBQWpELE9BQUEsT0FDRyxHQUFBa0MsRUFBQSxHQUNILElBQUErQixFQUNBLFNBREEvQixFQUFBLEVBVUEsR0FMQSxpQkFBQWdCLElBQ0FBLEVBQUE1QixFQUFBUyxLQUFBbUIsRUFBQVgsSUFJQWpCLEVBQUF1QixTQUFBSyxHQUVBLFdBQUFBLEVBQUFsRCxRQUNBLEVBRUFtRSxFQUFBbEIsRUFBQUMsRUFBQWhCLEVBQUFLLEVBQUEwQixHQUNHLG9CQUFBZixFQUVILE9BREFBLEdBQUEsSUFDQTVCLEVBQUFDLHFCQUNBLG1CQUFBSSxXQUFBNUQsVUFBQXFHLFFBQ0FILEVBQ0F0QyxXQUFBNUQsVUFBQXFHLFFBQUE5SCxLQUFBMkcsRUFBQUMsRUFBQWhCLEdBRUFQLFdBQUE1RCxVQUFBc0csWUFBQS9ILEtBQUEyRyxFQUFBQyxFQUFBaEIsR0FHQWlDLEVBQUFsQixFQUFBLENBQUFDLEdBQUFoQixFQUFBSyxFQUFBMEIsR0FHQSxVQUFBckUsVUFBQSx3Q0FHQSxTQUFBdUUsRUFBQUcsRUFBQXBCLEVBQUFoQixFQUFBSyxFQUFBMEIsR0FDQSxJQTBCQTlILEVBMUJBb0ksRUFBQSxFQUNBQyxFQUFBRixFQUFBdEUsT0FDQXlFLEVBQUF2QixFQUFBbEQsT0FFQSxRQUFBVixJQUFBaUQsSUFFQSxVQURBQSxFQUFBbUMsT0FBQW5DLEdBQUFzQixnQkFDQSxVQUFBdEIsR0FDQSxZQUFBQSxHQUFBLGFBQUFBLEdBQUEsQ0FDQSxHQUFBK0IsRUFBQXRFLE9BQUEsR0FBQWtELEVBQUFsRCxPQUFBLEVBQ0EsU0FFQXVFLEVBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0F2QyxHQUFBLEVBSUEsU0FBQXlDLEVBQUFDLEVBQUF6SSxHQUNBLFdBQUFvSSxFQUNBSyxFQUFBekksR0FFQXlJLEVBQUFDLGFBQUExSSxFQUFBb0ksR0FLQSxHQUFBTixFQUFBLENBQ0EsSUFBQWEsR0FBQSxFQUNBLElBQUEzSSxFQUFBK0YsRUFBd0IvRixFQUFBcUksRUFBZXJJLElBQ3ZDLEdBQUF3SSxFQUFBTCxFQUFBbkksS0FBQXdJLEVBQUF6QixHQUFBLElBQUE0QixFQUFBLEVBQUEzSSxFQUFBMkksSUFFQSxJQURBLElBQUFBLE1BQUEzSSxHQUNBQSxFQUFBMkksRUFBQSxJQUFBTCxFQUFBLE9BQUFLLEVBQUFQLE9BRUEsSUFBQU8sSUFBQTNJLEtBQUEySSxHQUNBQSxHQUFBLE9BS0EsSUFEQTVDLEVBQUF1QyxFQUFBRCxJQUFBdEMsRUFBQXNDLEVBQUFDLEdBQ0F0SSxFQUFBK0YsRUFBd0IvRixHQUFBLEVBQVFBLElBQUEsQ0FFaEMsSUFEQSxJQUFBNEksR0FBQSxFQUNBQyxFQUFBLEVBQXFCQSxFQUFBUCxFQUFlTyxJQUNwQyxHQUFBTCxFQUFBTCxFQUFBbkksRUFBQTZJLEtBQUFMLEVBQUF6QixFQUFBOEIsR0FBQSxDQUNBRCxHQUFBLEVBQ0EsTUFHQSxHQUFBQSxFQUFBLE9BQUE1SSxFQUlBLFNBZUEsU0FBQThJLEVBQUFMLEVBQUF0QyxFQUFBNEMsRUFBQWxGLEdBQ0FrRixFQUFBQyxPQUFBRCxJQUFBLEVBQ0EsSUFBQUUsRUFBQVIsRUFBQTVFLE9BQUFrRixFQUNBbEYsR0FHQUEsRUFBQW1GLE9BQUFuRixJQUNBb0YsSUFDQXBGLEVBQUFvRixHQUpBcEYsRUFBQW9GLEVBU0EsSUFBQUMsRUFBQS9DLEVBQUF0QyxPQUNBLEdBQUFxRixFQUFBLGVBQUF6RixVQUFBLHNCQUVBSSxFQUFBcUYsRUFBQSxJQUNBckYsRUFBQXFGLEVBQUEsR0FFQSxRQUFBbEosRUFBQSxFQUFpQkEsRUFBQTZELElBQVk3RCxFQUFBLENBQzdCLElBQUFtSixFQUFBQyxTQUFBakQsRUFBQWtELE9BQUEsRUFBQXJKLEVBQUEsT0FDQSxHQUFBK0gsTUFBQW9CLEdBQUEsT0FBQW5KLEVBQ0F5SSxFQUFBTSxFQUFBL0ksR0FBQW1KLEVBRUEsT0FBQW5KLEVBR0EsU0FBQXNKLEVBQUFiLEVBQUF0QyxFQUFBNEMsRUFBQWxGLEdBQ0EsT0FBQTBGLEVBQUEvQixFQUFBckIsRUFBQXNDLEVBQUE1RSxPQUFBa0YsR0FBQU4sRUFBQU0sRUFBQWxGLEdBR0EsU0FBQTJGLEVBQUFmLEVBQUF0QyxFQUFBNEMsRUFBQWxGLEdBQ0EsT0FBQTBGLEVBcTZCQSxTQUFBRSxHQUVBLElBREEsSUFBQUMsRUFBQSxHQUNBMUosRUFBQSxFQUFpQkEsRUFBQXlKLEVBQUE1RixTQUFnQjdELEVBRWpDMEosRUFBQUMsS0FBQSxJQUFBRixFQUFBRyxXQUFBNUosSUFFQSxPQUFBMEosRUEzNkJBRyxDQUFBMUQsR0FBQXNDLEVBQUFNLEVBQUFsRixHQUdBLFNBQUFpRyxFQUFBckIsRUFBQXRDLEVBQUE0QyxFQUFBbEYsR0FDQSxPQUFBMkYsRUFBQWYsRUFBQXRDLEVBQUE0QyxFQUFBbEYsR0FHQSxTQUFBa0csRUFBQXRCLEVBQUF0QyxFQUFBNEMsRUFBQWxGLEdBQ0EsT0FBQTBGLEVBQUE5QixFQUFBdEIsR0FBQXNDLEVBQUFNLEVBQUFsRixHQUdBLFNBQUFtRyxFQUFBdkIsRUFBQXRDLEVBQUE0QyxFQUFBbEYsR0FDQSxPQUFBMEYsRUFrNkJBLFNBQUFFLEVBQUFRLEdBR0EsSUFGQSxJQUFBNUosRUFBQTZKLEVBQUFDLEVBQ0FULEVBQUEsR0FDQTFKLEVBQUEsRUFBaUJBLEVBQUF5SixFQUFBNUYsV0FDakJvRyxHQUFBLFFBRGlDakssRUFHakNLLEVBQUFvSixFQUFBRyxXQUFBNUosR0FDQWtLLEVBQUE3SixHQUFBLEVBQ0E4SixFQUFBOUosRUFBQSxJQUNBcUosRUFBQUMsS0FBQVEsR0FDQVQsRUFBQUMsS0FBQU8sR0FHQSxPQUFBUixFQS82QkFVLENBQUFqRSxFQUFBc0MsRUFBQTVFLE9BQUFrRixHQUFBTixFQUFBTSxFQUFBbEYsR0FrRkEsU0FBQXdHLEVBQUE1QixFQUFBNkIsRUFBQUMsR0FDQSxXQUFBRCxHQUFBQyxJQUFBOUIsRUFBQTVFLE9BQ0FrQixFQUFBeUYsY0FBQS9CLEdBRUExRCxFQUFBeUYsY0FBQS9CLEVBQUFqQyxNQUFBOEQsRUFBQUMsSUFJQSxTQUFBRSxFQUFBaEMsRUFBQTZCLEVBQUFDLEdBQ0FBLEVBQUFHLEtBQUFDLElBQUFsQyxFQUFBNUUsT0FBQTBHLEdBSUEsSUFIQSxJQUFBSyxFQUFBLEdBRUE1SyxFQUFBc0ssRUFDQXRLLEVBQUF1SyxHQUFBLENBQ0EsSUFRQU0sRUFBQUMsRUFBQUMsRUFBQUMsRUFSQUMsRUFBQXhDLEVBQUF6SSxHQUNBa0wsRUFBQSxLQUNBQyxFQUFBRixFQUFBLE1BQ0FBLEVBQUEsTUFDQUEsRUFBQSxNQUNBLEVBRUEsR0FBQWpMLEVBQUFtTCxHQUFBWixFQUdBLE9BQUFZLEdBQ0EsT0FDQUYsRUFBQSxNQUNBQyxFQUFBRCxHQUVBLE1BQ0EsT0FFQSxXQURBSixFQUFBcEMsRUFBQXpJLEVBQUEsT0FFQWdMLEdBQUEsR0FBQUMsSUFBQSxLQUFBSixHQUNBLE1BQ0FLLEVBQUFGLEdBR0EsTUFDQSxPQUNBSCxFQUFBcEMsRUFBQXpJLEVBQUEsR0FDQThLLEVBQUFyQyxFQUFBekksRUFBQSxHQUNBLFVBQUE2SyxJQUFBLFVBQUFDLEtBQ0FFLEdBQUEsR0FBQUMsSUFBQSxPQUFBSixJQUFBLEtBQUFDLEdBQ0EsT0FBQUUsRUFBQSxPQUFBQSxFQUFBLFNBQ0FFLEVBQUFGLEdBR0EsTUFDQSxPQUNBSCxFQUFBcEMsRUFBQXpJLEVBQUEsR0FDQThLLEVBQUFyQyxFQUFBekksRUFBQSxHQUNBK0ssRUFBQXRDLEVBQUF6SSxFQUFBLEdBQ0EsVUFBQTZLLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxLQUNBQyxHQUFBLEdBQUFDLElBQUEsT0FBQUosSUFBQSxPQUFBQyxJQUFBLEtBQUFDLEdBQ0EsT0FBQUMsRUFBQSxVQUNBRSxFQUFBRixHQU1BLE9BQUFFLEdBR0FBLEVBQUEsTUFDQUMsRUFBQSxHQUNLRCxFQUFBLFFBRUxBLEdBQUEsTUFDQU4sRUFBQWpCLEtBQUF1QixJQUFBLGVBQ0FBLEVBQUEsV0FBQUEsR0FHQU4sRUFBQWpCLEtBQUF1QixHQUNBbEwsR0FBQW1MLEVBR0EsT0FRQSxTQUFBQyxHQUNBLElBQUF6RSxFQUFBeUUsRUFBQXZILE9BQ0EsR0FBQThDLEdBQUEwRSxFQUNBLE9BQUE5QyxPQUFBK0MsYUFBQXJJLE1BQUFzRixPQUFBNkMsR0FJQSxJQUFBUixFQUFBLEdBQ0E1SyxFQUFBLEVBQ0EsS0FBQUEsRUFBQTJHLEdBQ0FpRSxHQUFBckMsT0FBQStDLGFBQUFySSxNQUNBc0YsT0FDQTZDLEVBQUE1RSxNQUFBeEcsS0FBQXFMLElBR0EsT0FBQVQsRUF2QkFXLENBQUFYLEdBOThCQTlLLEVBQUFxRixTQUNBckYsRUFBQTBMLFdBb1RBLFNBQUEzSCxJQUNBQSxPQUNBQSxFQUFBLEdBRUEsT0FBQXNCLEVBQUFzRyxPQUFBNUgsSUF2VEEvRCxFQUFBNEwsa0JBQUEsR0EwQkF2RyxFQUFBQyx5QkFBQWpDLElBQUEyQixFQUFBTSxvQkFDQU4sRUFBQU0sb0JBUUEsV0FDQSxJQUNBLElBQUErQyxFQUFBLElBQUEzQyxXQUFBLEdBRUEsT0FEQTJDLEVBQUF6RCxVQUFBLENBQXFCQSxVQUFBYyxXQUFBNUQsVUFBQStKLElBQUEsV0FBbUQsWUFDeEUsS0FBQXhELEVBQUF3RCxPQUNBLG1CQUFBeEQsRUFBQXlELFVBQ0EsSUFBQXpELEVBQUF5RCxTQUFBLEtBQUE1RixXQUNHLE1BQUEzQixHQUNILFVBZkF3SCxHQUtBL0wsRUFBQW9GLGVBa0VBQyxFQUFBMkcsU0FBQSxLQUdBM0csRUFBQTRHLFNBQUEsU0FBQTVELEdBRUEsT0FEQUEsRUFBQXpELFVBQUFTLEVBQUF2RCxVQUNBdUcsR0EyQkFoRCxFQUFBUyxLQUFBLFNBQUEzRSxFQUFBd0UsRUFBQTVCLEdBQ0EsT0FBQStCLEVBQUEsS0FBQTNFLEVBQUF3RSxFQUFBNUIsSUFHQXNCLEVBQUFDLHNCQUNBRCxFQUFBdkQsVUFBQThDLFVBQUFjLFdBQUE1RCxVQUNBdUQsRUFBQVQsVUFBQWMsV0FDQSxvQkFBQXpFLGVBQUFpTCxTQUNBN0csRUFBQXBFLE9BQUFpTCxXQUFBN0csR0FFQXpFLE9BQUFDLGVBQUF3RSxFQUFBcEUsT0FBQWlMLFFBQUEsQ0FDQS9LLE1BQUEsS0FDQW9DLGNBQUEsS0FpQ0E4QixFQUFBc0csTUFBQSxTQUFBckUsRUFBQTZFLEVBQUE3RixHQUNBLE9BckJBLFNBQUFkLEVBQUE4QixFQUFBNkUsRUFBQTdGLEdBRUEsT0FEQWUsRUFBQUMsR0FDQUEsR0FBQSxFQUNBL0IsRUFBQUMsRUFBQThCLFFBRUFqRSxJQUFBOEksRUFJQSxpQkFBQTdGLEVBQ0FmLEVBQUFDLEVBQUE4QixHQUFBNkUsT0FBQTdGLEdBQ0FmLEVBQUFDLEVBQUE4QixHQUFBNkUsUUFFQTVHLEVBQUFDLEVBQUE4QixHQVFBcUUsQ0FBQSxLQUFBckUsRUFBQTZFLEVBQUE3RixJQWlCQWpCLEVBQUFRLFlBQUEsU0FBQXlCLEdBQ0EsT0FBQXpCLEVBQUEsS0FBQXlCLElBS0FqQyxFQUFBK0csZ0JBQUEsU0FBQTlFLEdBQ0EsT0FBQXpCLEVBQUEsS0FBQXlCLElBaUhBakMsRUFBQXVCLFNBQUEsU0FBQWtCLEdBQ0EsY0FBQUEsTUFBQXVFLFlBR0FoSCxFQUFBaUgsUUFBQSxTQUFBQyxFQUFBekUsR0FDQSxJQUFBekMsRUFBQXVCLFNBQUEyRixLQUFBbEgsRUFBQXVCLFNBQUFrQixHQUNBLFVBQUFuRSxVQUFBLDZCQUdBLEdBQUE0SSxJQUFBekUsRUFBQSxTQUtBLElBSEEsSUFBQTBFLEVBQUFELEVBQUF4SSxPQUNBMEksRUFBQTNFLEVBQUEvRCxPQUVBN0QsRUFBQSxFQUFBMkcsRUFBQStELEtBQUFDLElBQUEyQixFQUFBQyxHQUF1Q3ZNLEVBQUEyRyxJQUFTM0csRUFDaEQsR0FBQXFNLEVBQUFyTSxLQUFBNEgsRUFBQTVILEdBQUEsQ0FDQXNNLEVBQUFELEVBQUFyTSxHQUNBdU0sRUFBQTNFLEVBQUE1SCxHQUNBLE1BSUEsT0FBQXNNLEVBQUFDLEdBQUEsRUFDQUEsRUFBQUQsRUFBQSxFQUNBLEdBR0FuSCxFQUFBa0IsV0FBQSxTQUFBRCxHQUNBLE9BQUFtQyxPQUFBbkMsR0FBQXNCLGVBQ0EsVUFDQSxXQUNBLFlBQ0EsWUFDQSxhQUNBLGFBQ0EsYUFDQSxXQUNBLFlBQ0EsY0FDQSxlQUNBLFNBQ0EsUUFDQSxXQUlBdkMsRUFBQXFILE9BQUEsU0FBQUMsRUFBQTVJLEdBQ0EsSUFBQW9CLEVBQUF3SCxHQUNBLFVBQUFoSixVQUFBLCtDQUdBLE9BQUFnSixFQUFBNUksT0FDQSxPQUFBc0IsRUFBQXNHLE1BQUEsR0FHQSxJQUFBekwsRUFDQSxRQUFBbUQsSUFBQVUsRUFFQSxJQURBQSxFQUFBLEVBQ0E3RCxFQUFBLEVBQWVBLEVBQUF5TSxFQUFBNUksU0FBaUI3RCxFQUNoQzZELEdBQUE0SSxFQUFBek0sR0FBQTZELE9BSUEsSUFBQWlELEVBQUEzQixFQUFBUSxZQUFBOUIsR0FDQTZJLEVBQUEsRUFDQSxJQUFBMU0sRUFBQSxFQUFhQSxFQUFBeU0sRUFBQTVJLFNBQWlCN0QsRUFBQSxDQUM5QixJQUFBeUksRUFBQWdFLEVBQUF6TSxHQUNBLElBQUFtRixFQUFBdUIsU0FBQStCLEdBQ0EsVUFBQWhGLFVBQUEsK0NBRUFnRixFQUFBNUIsS0FBQUMsRUFBQTRGLEdBQ0FBLEdBQUFqRSxFQUFBNUUsT0FFQSxPQUFBaUQsR0E4Q0EzQixFQUFBYSxhQTBFQWIsRUFBQXZELFVBQUF1SyxXQUFBLEVBUUFoSCxFQUFBdkQsVUFBQStLLE9BQUEsV0FDQSxJQUFBaEcsRUFBQTdELEtBQUFlLE9BQ0EsR0FBQThDLEVBQUEsS0FDQSxVQUFBcEIsV0FBQSw2Q0FFQSxRQUFBdkYsRUFBQSxFQUFpQkEsRUFBQTJHLEVBQVMzRyxHQUFBLEVBQzFCMkgsRUFBQTdFLEtBQUE5QyxJQUFBLEdBRUEsT0FBQThDLE1BR0FxQyxFQUFBdkQsVUFBQWdMLE9BQUEsV0FDQSxJQUFBakcsRUFBQTdELEtBQUFlLE9BQ0EsR0FBQThDLEVBQUEsS0FDQSxVQUFBcEIsV0FBQSw2Q0FFQSxRQUFBdkYsRUFBQSxFQUFpQkEsRUFBQTJHLEVBQVMzRyxHQUFBLEVBQzFCMkgsRUFBQTdFLEtBQUE5QyxJQUFBLEdBQ0EySCxFQUFBN0UsS0FBQTlDLEVBQUEsRUFBQUEsRUFBQSxHQUVBLE9BQUE4QyxNQUdBcUMsRUFBQXZELFVBQUFpTCxPQUFBLFdBQ0EsSUFBQWxHLEVBQUE3RCxLQUFBZSxPQUNBLEdBQUE4QyxFQUFBLEtBQ0EsVUFBQXBCLFdBQUEsNkNBRUEsUUFBQXZGLEVBQUEsRUFBaUJBLEVBQUEyRyxFQUFTM0csR0FBQSxFQUMxQjJILEVBQUE3RSxLQUFBOUMsSUFBQSxHQUNBMkgsRUFBQTdFLEtBQUE5QyxFQUFBLEVBQUFBLEVBQUEsR0FDQTJILEVBQUE3RSxLQUFBOUMsRUFBQSxFQUFBQSxFQUFBLEdBQ0EySCxFQUFBN0UsS0FBQTlDLEVBQUEsRUFBQUEsRUFBQSxHQUVBLE9BQUE4QyxNQUdBcUMsRUFBQXZELFVBQUF5RixTQUFBLFdBQ0EsSUFBQXhELEVBQUEsRUFBQWYsS0FBQWUsT0FDQSxXQUFBQSxFQUFBLEdBQ0EsSUFBQWIsVUFBQWEsT0FBQTRHLEVBQUEzSCxLQUFBLEVBQUFlLEdBeEhBLFNBQUF1QyxFQUFBa0UsRUFBQUMsR0FDQSxJQUFBaEQsR0FBQSxFQWNBLFNBTEFwRSxJQUFBbUgsS0FBQSxLQUNBQSxFQUFBLEdBSUFBLEVBQUF4SCxLQUFBZSxPQUNBLFNBT0EsU0FKQVYsSUFBQW9ILEtBQUF6SCxLQUFBZSxVQUNBMEcsRUFBQXpILEtBQUFlLFFBR0EwRyxHQUFBLEVBQ0EsU0FPQSxJQUhBQSxLQUFBLEtBQ0FELEtBQUEsR0FHQSxTQUtBLElBRkFsRSxNQUFBLFVBR0EsT0FBQUEsR0FDQSxVQUNBLE9BQUEwRyxFQUFBaEssS0FBQXdILEVBQUFDLEdBRUEsV0FDQSxZQUNBLE9BQUFFLEVBQUEzSCxLQUFBd0gsRUFBQUMsR0FFQSxZQUNBLE9BQUF3QyxFQUFBakssS0FBQXdILEVBQUFDLEdBRUEsYUFDQSxhQUNBLE9BQUF5QyxFQUFBbEssS0FBQXdILEVBQUFDLEdBRUEsYUFDQSxPQUFBRixFQUFBdkgsS0FBQXdILEVBQUFDLEdBRUEsV0FDQSxZQUNBLGNBQ0EsZUFDQSxPQUFBMEMsRUFBQW5LLEtBQUF3SCxFQUFBQyxHQUVBLFFBQ0EsR0FBQWhELEVBQUEsVUFBQTlELFVBQUEscUJBQUEyQyxHQUNBQSxLQUFBLElBQUFzQixjQUNBSCxHQUFBLElBd0RBdEUsTUFBQUgsS0FBQUUsWUFHQW1DLEVBQUF2RCxVQUFBc0wsT0FBQSxTQUFBdEYsR0FDQSxJQUFBekMsRUFBQXVCLFNBQUFrQixHQUFBLFVBQUFuRSxVQUFBLDZCQUNBLE9BQUFYLE9BQUE4RSxHQUNBLElBQUF6QyxFQUFBaUgsUUFBQXRKLEtBQUE4RSxJQUdBekMsRUFBQXZELFVBQUF1TCxRQUFBLFdBQ0EsSUFBQTFELEVBQUEsR0FDQTJELEVBQUF0TixFQUFBNEwsa0JBS0EsT0FKQTVJLEtBQUFlLE9BQUEsSUFDQTRGLEVBQUEzRyxLQUFBdUUsU0FBQSxRQUFBK0YsR0FBQUMsTUFBQSxTQUFrREMsS0FBQSxLQUNsRHhLLEtBQUFlLE9BQUF1SixJQUFBM0QsR0FBQSxVQUVBLFdBQUFBLEVBQUEsS0FHQXRFLEVBQUF2RCxVQUFBd0ssUUFBQSxTQUFBekksRUFBQTJHLEVBQUFDLEVBQUFnRCxFQUFBQyxHQUNBLElBQUFySSxFQUFBdUIsU0FBQS9DLEdBQ0EsVUFBQUYsVUFBQSw2QkFnQkEsUUFiQU4sSUFBQW1ILElBQ0FBLEVBQUEsUUFFQW5ILElBQUFvSCxJQUNBQSxFQUFBNUcsSUFBQUUsT0FBQSxRQUVBVixJQUFBb0ssSUFDQUEsRUFBQSxRQUVBcEssSUFBQXFLLElBQ0FBLEVBQUExSyxLQUFBZSxRQUdBeUcsRUFBQSxHQUFBQyxFQUFBNUcsRUFBQUUsUUFBQTBKLEVBQUEsR0FBQUMsRUFBQTFLLEtBQUFlLE9BQ0EsVUFBQTBCLFdBQUEsc0JBR0EsR0FBQWdJLEdBQUFDLEdBQUFsRCxHQUFBQyxFQUNBLFNBRUEsR0FBQWdELEdBQUFDLEVBQ0EsU0FFQSxHQUFBbEQsR0FBQUMsRUFDQSxTQVFBLEdBQUF6SCxPQUFBYSxFQUFBLFNBU0EsSUFQQSxJQUFBMkksR0FKQWtCLEtBQUEsSUFEQUQsS0FBQSxHQU1BaEIsR0FQQWhDLEtBQUEsSUFEQUQsS0FBQSxHQVNBM0QsRUFBQStELEtBQUFDLElBQUEyQixFQUFBQyxHQUVBa0IsRUFBQTNLLEtBQUEwRCxNQUFBK0csRUFBQUMsR0FDQUUsRUFBQS9KLEVBQUE2QyxNQUFBOEQsRUFBQUMsR0FFQXZLLEVBQUEsRUFBaUJBLEVBQUEyRyxJQUFTM0csRUFDMUIsR0FBQXlOLEVBQUF6TixLQUFBME4sRUFBQTFOLEdBQUEsQ0FDQXNNLEVBQUFtQixFQUFBek4sR0FDQXVNLEVBQUFtQixFQUFBMU4sR0FDQSxNQUlBLE9BQUFzTSxFQUFBQyxHQUFBLEVBQ0FBLEVBQUFELEVBQUEsRUFDQSxHQTZIQW5ILEVBQUF2RCxVQUFBK0wsU0FBQSxTQUFBNUcsRUFBQWhCLEVBQUFLLEdBQ0EsV0FBQXRELEtBQUFtRixRQUFBbEIsRUFBQWhCLEVBQUFLLElBR0FqQixFQUFBdkQsVUFBQXFHLFFBQUEsU0FBQWxCLEVBQUFoQixFQUFBSyxHQUNBLE9BQUF5QixFQUFBL0UsS0FBQWlFLEVBQUFoQixFQUFBSyxHQUFBLElBR0FqQixFQUFBdkQsVUFBQXNHLFlBQUEsU0FBQW5CLEVBQUFoQixFQUFBSyxHQUNBLE9BQUF5QixFQUFBL0UsS0FBQWlFLEVBQUFoQixFQUFBSyxHQUFBLElBa0RBakIsRUFBQXZELFVBQUEyRSxNQUFBLFNBQUFKLEVBQUE0QyxFQUFBbEYsRUFBQXVDLEdBRUEsUUFBQWpELElBQUE0RixFQUNBM0MsRUFBQSxPQUNBdkMsRUFBQWYsS0FBQWUsT0FDQWtGLEVBQUEsT0FFRyxRQUFBNUYsSUFBQVUsR0FBQSxpQkFBQWtGLEVBQ0gzQyxFQUFBMkMsRUFDQWxGLEVBQUFmLEtBQUFlLE9BQ0FrRixFQUFBLE1BRUcsS0FBQTZFLFNBQUE3RSxHQVdILFVBQUFyRCxNQUNBLDJFQVhBcUQsR0FBQSxFQUNBNkUsU0FBQS9KLElBQ0FBLEdBQUEsT0FDQVYsSUFBQWlELE1BQUEsVUFFQUEsRUFBQXZDLEVBQ0FBLE9BQUFWLEdBU0EsSUFBQThGLEVBQUFuRyxLQUFBZSxPQUFBa0YsRUFHQSxTQUZBNUYsSUFBQVUsS0FBQW9GLEtBQUFwRixFQUFBb0YsR0FFQTlDLEVBQUF0QyxPQUFBLElBQUFBLEVBQUEsR0FBQWtGLEVBQUEsSUFBQUEsRUFBQWpHLEtBQUFlLE9BQ0EsVUFBQTBCLFdBQUEsMENBR0FhLE1BQUEsUUFHQSxJQURBLElBQUFtQixHQUFBLElBRUEsT0FBQW5CLEdBQ0EsVUFDQSxPQUFBMEMsRUFBQWhHLEtBQUFxRCxFQUFBNEMsRUFBQWxGLEdBRUEsV0FDQSxZQUNBLE9BQUF5RixFQUFBeEcsS0FBQXFELEVBQUE0QyxFQUFBbEYsR0FFQSxZQUNBLE9BQUEyRixFQUFBMUcsS0FBQXFELEVBQUE0QyxFQUFBbEYsR0FFQSxhQUNBLGFBQ0EsT0FBQWlHLEVBQUFoSCxLQUFBcUQsRUFBQTRDLEVBQUFsRixHQUVBLGFBRUEsT0FBQWtHLEVBQUFqSCxLQUFBcUQsRUFBQTRDLEVBQUFsRixHQUVBLFdBQ0EsWUFDQSxjQUNBLGVBQ0EsT0FBQW1HLEVBQUFsSCxLQUFBcUQsRUFBQTRDLEVBQUFsRixHQUVBLFFBQ0EsR0FBQTBELEVBQUEsVUFBQTlELFVBQUEscUJBQUEyQyxHQUNBQSxHQUFBLEdBQUFBLEdBQUFzQixjQUNBSCxHQUFBLElBS0FwQyxFQUFBdkQsVUFBQWlNLE9BQUEsV0FDQSxPQUNBN0csS0FBQSxTQUNBQyxLQUFBNkcsTUFBQWxNLFVBQUE0RSxNQUFBckcsS0FBQTJDLEtBQUFpTCxNQUFBakwsS0FBQSxLQXdGQSxJQUFBdUksRUFBQSxLQW9CQSxTQUFBMEIsRUFBQXRFLEVBQUE2QixFQUFBQyxHQUNBLElBQUF5RCxFQUFBLEdBQ0F6RCxFQUFBRyxLQUFBQyxJQUFBbEMsRUFBQTVFLE9BQUEwRyxHQUVBLFFBQUF2SyxFQUFBc0ssRUFBcUJ0SyxFQUFBdUssSUFBU3ZLLEVBQzlCZ08sR0FBQXpGLE9BQUErQyxhQUFBLElBQUE3QyxFQUFBekksSUFFQSxPQUFBZ08sRUFHQSxTQUFBaEIsRUFBQXZFLEVBQUE2QixFQUFBQyxHQUNBLElBQUF5RCxFQUFBLEdBQ0F6RCxFQUFBRyxLQUFBQyxJQUFBbEMsRUFBQTVFLE9BQUEwRyxHQUVBLFFBQUF2SyxFQUFBc0ssRUFBcUJ0SyxFQUFBdUssSUFBU3ZLLEVBQzlCZ08sR0FBQXpGLE9BQUErQyxhQUFBN0MsRUFBQXpJLElBRUEsT0FBQWdPLEVBR0EsU0FBQWxCLEVBQUFyRSxFQUFBNkIsRUFBQUMsR0FDQSxJQUFBNUQsRUFBQThCLEVBQUE1RSxTQUVBeUcsS0FBQSxLQUFBQSxFQUFBLEtBQ0FDLEtBQUEsR0FBQUEsRUFBQTVELEtBQUE0RCxFQUFBNUQsR0FHQSxJQURBLElBQUFzSCxFQUFBLEdBQ0FqTyxFQUFBc0ssRUFBcUJ0SyxFQUFBdUssSUFBU3ZLLEVBQzlCaU8sR0FBQUMsRUFBQXpGLEVBQUF6SSxJQUVBLE9BQUFpTyxFQUdBLFNBQUFoQixFQUFBeEUsRUFBQTZCLEVBQUFDLEdBR0EsSUFGQSxJQUFBNEQsRUFBQTFGLEVBQUFqQyxNQUFBOEQsRUFBQUMsR0FDQUssRUFBQSxHQUNBNUssRUFBQSxFQUFpQkEsRUFBQW1PLEVBQUF0SyxPQUFrQjdELEdBQUEsRUFDbkM0SyxHQUFBckMsT0FBQStDLGFBQUE2QyxFQUFBbk8sR0FBQSxJQUFBbU8sRUFBQW5PLEVBQUEsSUFFQSxPQUFBNEssRUEwQ0EsU0FBQXdELEVBQUFyRixFQUFBc0YsRUFBQXhLLEdBQ0EsR0FBQWtGLEVBQUEsTUFBQUEsRUFBQSxZQUFBeEQsV0FBQSxzQkFDQSxHQUFBd0QsRUFBQXNGLEVBQUF4SyxFQUFBLFVBQUEwQixXQUFBLHlDQStKQSxTQUFBK0ksRUFBQTdGLEVBQUF4SCxFQUFBOEgsRUFBQXNGLEVBQUFqQixFQUFBekMsR0FDQSxJQUFBeEYsRUFBQXVCLFNBQUErQixHQUFBLFVBQUFoRixVQUFBLCtDQUNBLEdBQUF4QyxFQUFBbU0sR0FBQW5NLEVBQUEwSixFQUFBLFVBQUFwRixXQUFBLHFDQUNBLEdBQUF3RCxFQUFBc0YsRUFBQTVGLEVBQUE1RSxPQUFBLFVBQUEwQixXQUFBLHNCQWtEQSxTQUFBZ0osRUFBQTlGLEVBQUF4SCxFQUFBOEgsRUFBQXlGLEdBQ0F2TixFQUFBLElBQUFBLEVBQUEsTUFBQUEsRUFBQSxHQUNBLFFBQUFqQixFQUFBLEVBQUE2SSxFQUFBNkIsS0FBQUMsSUFBQWxDLEVBQUE1RSxPQUFBa0YsRUFBQSxHQUF1RC9JLEVBQUE2SSxJQUFPN0ksRUFDOUR5SSxFQUFBTSxFQUFBL0ksSUFBQWlCLEVBQUEsUUFBQXVOLEVBQUF4TyxFQUFBLEVBQUFBLE1BQ0EsR0FBQXdPLEVBQUF4TyxFQUFBLEVBQUFBLEdBOEJBLFNBQUF5TyxFQUFBaEcsRUFBQXhILEVBQUE4SCxFQUFBeUYsR0FDQXZOLEVBQUEsSUFBQUEsRUFBQSxXQUFBQSxFQUFBLEdBQ0EsUUFBQWpCLEVBQUEsRUFBQTZJLEVBQUE2QixLQUFBQyxJQUFBbEMsRUFBQTVFLE9BQUFrRixFQUFBLEdBQXVEL0ksRUFBQTZJLElBQU83SSxFQUM5RHlJLEVBQUFNLEVBQUEvSSxHQUFBaUIsSUFBQSxHQUFBdU4sRUFBQXhPLEVBQUEsRUFBQUEsR0FBQSxJQW1KQSxTQUFBME8sRUFBQWpHLEVBQUF4SCxFQUFBOEgsRUFBQXNGLEVBQUFqQixFQUFBekMsR0FDQSxHQUFBNUIsRUFBQXNGLEVBQUE1RixFQUFBNUUsT0FBQSxVQUFBMEIsV0FBQSxzQkFDQSxHQUFBd0QsRUFBQSxZQUFBeEQsV0FBQSxzQkFHQSxTQUFBb0osRUFBQWxHLEVBQUF4SCxFQUFBOEgsRUFBQXlGLEVBQUFJLEdBS0EsT0FKQUEsR0FDQUYsRUFBQWpHLEVBQUF4SCxFQUFBOEgsRUFBQSxHQUVBL0QsRUFBQXVCLE1BQUFrQyxFQUFBeEgsRUFBQThILEVBQUF5RixFQUFBLE1BQ0F6RixFQUFBLEVBV0EsU0FBQThGLEVBQUFwRyxFQUFBeEgsRUFBQThILEVBQUF5RixFQUFBSSxHQUtBLE9BSkFBLEdBQ0FGLEVBQUFqRyxFQUFBeEgsRUFBQThILEVBQUEsR0FFQS9ELEVBQUF1QixNQUFBa0MsRUFBQXhILEVBQUE4SCxFQUFBeUYsRUFBQSxNQUNBekYsRUFBQSxFQS9jQTVELEVBQUF2RCxVQUFBNEUsTUFBQSxTQUFBOEQsRUFBQUMsR0FDQSxJQW9CQXVFLEVBcEJBbkksRUFBQTdELEtBQUFlLE9BcUJBLElBcEJBeUcsT0FHQSxHQUNBQSxHQUFBM0QsR0FDQSxJQUFBMkQsRUFBQSxHQUNHQSxFQUFBM0QsSUFDSDJELEVBQUEzRCxJQU5BNEQsT0FBQXBILElBQUFvSCxFQUFBNUQsSUFBQTRELEdBU0EsR0FDQUEsR0FBQTVELEdBQ0EsSUFBQTRELEVBQUEsR0FDR0EsRUFBQTVELElBQ0g0RCxFQUFBNUQsR0FHQTRELEVBQUFELElBQUFDLEVBQUFELEdBR0FuRixFQUFBQyxxQkFDQTBKLEVBQUFoTSxLQUFBOEksU0FBQXRCLEVBQUFDLElBQ0E3RixVQUFBUyxFQUFBdkQsY0FDRyxDQUNILElBQUFtTixFQUFBeEUsRUFBQUQsRUFDQXdFLEVBQUEsSUFBQTNKLEVBQUE0SixPQUFBNUwsR0FDQSxRQUFBbkQsRUFBQSxFQUFtQkEsRUFBQStPLElBQWMvTyxFQUNqQzhPLEVBQUE5TyxHQUFBOEMsS0FBQTlDLEVBQUFzSyxHQUlBLE9BQUF3RSxHQVdBM0osRUFBQXZELFVBQUFvTixXQUFBLFNBQUFqRyxFQUFBL0MsRUFBQTRJLEdBQ0E3RixHQUFBLEVBQ0EvQyxHQUFBLEVBQ0E0SSxHQUFBUixFQUFBckYsRUFBQS9DLEVBQUFsRCxLQUFBZSxRQUtBLElBSEEsSUFBQWtELEVBQUFqRSxLQUFBaUcsR0FDQWtHLEVBQUEsRUFDQWpQLEVBQUEsSUFDQUEsRUFBQWdHLElBQUFpSixHQUFBLE1BQ0FsSSxHQUFBakUsS0FBQWlHLEVBQUEvSSxHQUFBaVAsRUFHQSxPQUFBbEksR0FHQTVCLEVBQUF2RCxVQUFBc04sV0FBQSxTQUFBbkcsRUFBQS9DLEVBQUE0SSxHQUNBN0YsR0FBQSxFQUNBL0MsR0FBQSxFQUNBNEksR0FDQVIsRUFBQXJGLEVBQUEvQyxFQUFBbEQsS0FBQWUsUUFLQSxJQUZBLElBQUFrRCxFQUFBakUsS0FBQWlHLElBQUEvQyxHQUNBaUosRUFBQSxFQUNBakosRUFBQSxJQUFBaUosR0FBQSxNQUNBbEksR0FBQWpFLEtBQUFpRyxJQUFBL0MsR0FBQWlKLEVBR0EsT0FBQWxJLEdBR0E1QixFQUFBdkQsVUFBQXVOLFVBQUEsU0FBQXBHLEVBQUE2RixHQUVBLE9BREFBLEdBQUFSLEVBQUFyRixFQUFBLEVBQUFqRyxLQUFBZSxRQUNBZixLQUFBaUcsSUFHQTVELEVBQUF2RCxVQUFBd04sYUFBQSxTQUFBckcsRUFBQTZGLEdBRUEsT0FEQUEsR0FBQVIsRUFBQXJGLEVBQUEsRUFBQWpHLEtBQUFlLFFBQ0FmLEtBQUFpRyxHQUFBakcsS0FBQWlHLEVBQUEsT0FHQTVELEVBQUF2RCxVQUFBOEcsYUFBQSxTQUFBSyxFQUFBNkYsR0FFQSxPQURBQSxHQUFBUixFQUFBckYsRUFBQSxFQUFBakcsS0FBQWUsUUFDQWYsS0FBQWlHLElBQUEsRUFBQWpHLEtBQUFpRyxFQUFBLElBR0E1RCxFQUFBdkQsVUFBQXlOLGFBQUEsU0FBQXRHLEVBQUE2RixHQUdBLE9BRkFBLEdBQUFSLEVBQUFyRixFQUFBLEVBQUFqRyxLQUFBZSxTQUVBZixLQUFBaUcsR0FDQWpHLEtBQUFpRyxFQUFBLE1BQ0FqRyxLQUFBaUcsRUFBQSxRQUNBLFNBQUFqRyxLQUFBaUcsRUFBQSxJQUdBNUQsRUFBQXZELFVBQUEwTixhQUFBLFNBQUF2RyxFQUFBNkYsR0FHQSxPQUZBQSxHQUFBUixFQUFBckYsRUFBQSxFQUFBakcsS0FBQWUsUUFFQSxTQUFBZixLQUFBaUcsSUFDQWpHLEtBQUFpRyxFQUFBLE9BQ0FqRyxLQUFBaUcsRUFBQSxNQUNBakcsS0FBQWlHLEVBQUEsS0FHQTVELEVBQUF2RCxVQUFBMk4sVUFBQSxTQUFBeEcsRUFBQS9DLEVBQUE0SSxHQUNBN0YsR0FBQSxFQUNBL0MsR0FBQSxFQUNBNEksR0FBQVIsRUFBQXJGLEVBQUEvQyxFQUFBbEQsS0FBQWUsUUFLQSxJQUhBLElBQUFrRCxFQUFBakUsS0FBQWlHLEdBQ0FrRyxFQUFBLEVBQ0FqUCxFQUFBLElBQ0FBLEVBQUFnRyxJQUFBaUosR0FBQSxNQUNBbEksR0FBQWpFLEtBQUFpRyxFQUFBL0ksR0FBQWlQLEVBTUEsT0FGQWxJLElBRkFrSSxHQUFBLE9BRUFsSSxHQUFBMkQsS0FBQThFLElBQUEsSUFBQXhKLElBRUFlLEdBR0E1QixFQUFBdkQsVUFBQTZOLFVBQUEsU0FBQTFHLEVBQUEvQyxFQUFBNEksR0FDQTdGLEdBQUEsRUFDQS9DLEdBQUEsRUFDQTRJLEdBQUFSLEVBQUFyRixFQUFBL0MsRUFBQWxELEtBQUFlLFFBS0EsSUFIQSxJQUFBN0QsRUFBQWdHLEVBQ0FpSixFQUFBLEVBQ0FsSSxFQUFBakUsS0FBQWlHLElBQUEvSSxHQUNBQSxFQUFBLElBQUFpUCxHQUFBLE1BQ0FsSSxHQUFBakUsS0FBQWlHLElBQUEvSSxHQUFBaVAsRUFNQSxPQUZBbEksSUFGQWtJLEdBQUEsT0FFQWxJLEdBQUEyRCxLQUFBOEUsSUFBQSxJQUFBeEosSUFFQWUsR0FHQTVCLEVBQUF2RCxVQUFBOE4sU0FBQSxTQUFBM0csRUFBQTZGLEdBRUEsT0FEQUEsR0FBQVIsRUFBQXJGLEVBQUEsRUFBQWpHLEtBQUFlLFFBQ0EsSUFBQWYsS0FBQWlHLElBQ0EsT0FBQWpHLEtBQUFpRyxHQUFBLEdBREFqRyxLQUFBaUcsSUFJQTVELEVBQUF2RCxVQUFBK04sWUFBQSxTQUFBNUcsRUFBQTZGLEdBQ0FBLEdBQUFSLEVBQUFyRixFQUFBLEVBQUFqRyxLQUFBZSxRQUNBLElBQUFrRCxFQUFBakUsS0FBQWlHLEdBQUFqRyxLQUFBaUcsRUFBQSxNQUNBLGFBQUFoQyxFQUFBLFdBQUFBLEtBR0E1QixFQUFBdkQsVUFBQWdPLFlBQUEsU0FBQTdHLEVBQUE2RixHQUNBQSxHQUFBUixFQUFBckYsRUFBQSxFQUFBakcsS0FBQWUsUUFDQSxJQUFBa0QsRUFBQWpFLEtBQUFpRyxFQUFBLEdBQUFqRyxLQUFBaUcsSUFBQSxFQUNBLGFBQUFoQyxFQUFBLFdBQUFBLEtBR0E1QixFQUFBdkQsVUFBQWlPLFlBQUEsU0FBQTlHLEVBQUE2RixHQUdBLE9BRkFBLEdBQUFSLEVBQUFyRixFQUFBLEVBQUFqRyxLQUFBZSxRQUVBZixLQUFBaUcsR0FDQWpHLEtBQUFpRyxFQUFBLE1BQ0FqRyxLQUFBaUcsRUFBQSxPQUNBakcsS0FBQWlHLEVBQUEsUUFHQTVELEVBQUF2RCxVQUFBa08sWUFBQSxTQUFBL0csRUFBQTZGLEdBR0EsT0FGQUEsR0FBQVIsRUFBQXJGLEVBQUEsRUFBQWpHLEtBQUFlLFFBRUFmLEtBQUFpRyxJQUFBLEdBQ0FqRyxLQUFBaUcsRUFBQSxPQUNBakcsS0FBQWlHLEVBQUEsTUFDQWpHLEtBQUFpRyxFQUFBLElBR0E1RCxFQUFBdkQsVUFBQW1PLFlBQUEsU0FBQWhILEVBQUE2RixHQUVBLE9BREFBLEdBQUFSLEVBQUFyRixFQUFBLEVBQUFqRyxLQUFBZSxRQUNBbUIsRUFBQXdELEtBQUExRixLQUFBaUcsR0FBQSxTQUdBNUQsRUFBQXZELFVBQUFvTyxZQUFBLFNBQUFqSCxFQUFBNkYsR0FFQSxPQURBQSxHQUFBUixFQUFBckYsRUFBQSxFQUFBakcsS0FBQWUsUUFDQW1CLEVBQUF3RCxLQUFBMUYsS0FBQWlHLEdBQUEsU0FHQTVELEVBQUF2RCxVQUFBcU8sYUFBQSxTQUFBbEgsRUFBQTZGLEdBRUEsT0FEQUEsR0FBQVIsRUFBQXJGLEVBQUEsRUFBQWpHLEtBQUFlLFFBQ0FtQixFQUFBd0QsS0FBQTFGLEtBQUFpRyxHQUFBLFNBR0E1RCxFQUFBdkQsVUFBQXNPLGFBQUEsU0FBQW5ILEVBQUE2RixHQUVBLE9BREFBLEdBQUFSLEVBQUFyRixFQUFBLEVBQUFqRyxLQUFBZSxRQUNBbUIsRUFBQXdELEtBQUExRixLQUFBaUcsR0FBQSxTQVNBNUQsRUFBQXZELFVBQUF1TyxZQUFBLFNBQUFsUCxFQUFBOEgsRUFBQS9DLEVBQUE0SSxJQUNBM04sS0FDQThILEdBQUEsRUFDQS9DLEdBQUEsRUFDQTRJLElBRUFOLEVBQUF4TCxLQUFBN0IsRUFBQThILEVBQUEvQyxFQURBMEUsS0FBQThFLElBQUEsSUFBQXhKLEdBQUEsRUFDQSxHQUdBLElBQUFpSixFQUFBLEVBQ0FqUCxFQUFBLEVBRUEsSUFEQThDLEtBQUFpRyxHQUFBLElBQUE5SCxJQUNBakIsRUFBQWdHLElBQUFpSixHQUFBLE1BQ0FuTSxLQUFBaUcsRUFBQS9JLEdBQUFpQixFQUFBZ08sRUFBQSxJQUdBLE9BQUFsRyxFQUFBL0MsR0FHQWIsRUFBQXZELFVBQUF3TyxZQUFBLFNBQUFuUCxFQUFBOEgsRUFBQS9DLEVBQUE0SSxJQUNBM04sS0FDQThILEdBQUEsRUFDQS9DLEdBQUEsRUFDQTRJLElBRUFOLEVBQUF4TCxLQUFBN0IsRUFBQThILEVBQUEvQyxFQURBMEUsS0FBQThFLElBQUEsSUFBQXhKLEdBQUEsRUFDQSxHQUdBLElBQUFoRyxFQUFBZ0csRUFBQSxFQUNBaUosRUFBQSxFQUVBLElBREFuTSxLQUFBaUcsRUFBQS9JLEdBQUEsSUFBQWlCLElBQ0FqQixHQUFBLElBQUFpUCxHQUFBLE1BQ0FuTSxLQUFBaUcsRUFBQS9JLEdBQUFpQixFQUFBZ08sRUFBQSxJQUdBLE9BQUFsRyxFQUFBL0MsR0FHQWIsRUFBQXZELFVBQUF5TyxXQUFBLFNBQUFwUCxFQUFBOEgsRUFBQTZGLEdBTUEsT0FMQTNOLEtBQ0E4SCxHQUFBLEVBQ0E2RixHQUFBTixFQUFBeEwsS0FBQTdCLEVBQUE4SCxFQUFBLFNBQ0E1RCxFQUFBQyxzQkFBQW5FLEVBQUF5SixLQUFBNEYsTUFBQXJQLElBQ0E2QixLQUFBaUcsR0FBQSxJQUFBOUgsRUFDQThILEVBQUEsR0FXQTVELEVBQUF2RCxVQUFBMk8sY0FBQSxTQUFBdFAsRUFBQThILEVBQUE2RixHQVVBLE9BVEEzTixLQUNBOEgsR0FBQSxFQUNBNkYsR0FBQU4sRUFBQXhMLEtBQUE3QixFQUFBOEgsRUFBQSxXQUNBNUQsRUFBQUMscUJBQ0F0QyxLQUFBaUcsR0FBQSxJQUFBOUgsRUFDQTZCLEtBQUFpRyxFQUFBLEdBQUE5SCxJQUFBLEdBRUFzTixFQUFBekwsS0FBQTdCLEVBQUE4SCxHQUFBLEdBRUFBLEVBQUEsR0FHQTVELEVBQUF2RCxVQUFBNE8sY0FBQSxTQUFBdlAsRUFBQThILEVBQUE2RixHQVVBLE9BVEEzTixLQUNBOEgsR0FBQSxFQUNBNkYsR0FBQU4sRUFBQXhMLEtBQUE3QixFQUFBOEgsRUFBQSxXQUNBNUQsRUFBQUMscUJBQ0F0QyxLQUFBaUcsR0FBQTlILElBQUEsRUFDQTZCLEtBQUFpRyxFQUFBLE9BQUE5SCxHQUVBc04sRUFBQXpMLEtBQUE3QixFQUFBOEgsR0FBQSxHQUVBQSxFQUFBLEdBVUE1RCxFQUFBdkQsVUFBQTZPLGNBQUEsU0FBQXhQLEVBQUE4SCxFQUFBNkYsR0FZQSxPQVhBM04sS0FDQThILEdBQUEsRUFDQTZGLEdBQUFOLEVBQUF4TCxLQUFBN0IsRUFBQThILEVBQUEsZ0JBQ0E1RCxFQUFBQyxxQkFDQXRDLEtBQUFpRyxFQUFBLEdBQUE5SCxJQUFBLEdBQ0E2QixLQUFBaUcsRUFBQSxHQUFBOUgsSUFBQSxHQUNBNkIsS0FBQWlHLEVBQUEsR0FBQTlILElBQUEsRUFDQTZCLEtBQUFpRyxHQUFBLElBQUE5SCxHQUVBd04sRUFBQTNMLEtBQUE3QixFQUFBOEgsR0FBQSxHQUVBQSxFQUFBLEdBR0E1RCxFQUFBdkQsVUFBQThPLGNBQUEsU0FBQXpQLEVBQUE4SCxFQUFBNkYsR0FZQSxPQVhBM04sS0FDQThILEdBQUEsRUFDQTZGLEdBQUFOLEVBQUF4TCxLQUFBN0IsRUFBQThILEVBQUEsZ0JBQ0E1RCxFQUFBQyxxQkFDQXRDLEtBQUFpRyxHQUFBOUgsSUFBQSxHQUNBNkIsS0FBQWlHLEVBQUEsR0FBQTlILElBQUEsR0FDQTZCLEtBQUFpRyxFQUFBLEdBQUE5SCxJQUFBLEVBQ0E2QixLQUFBaUcsRUFBQSxPQUFBOUgsR0FFQXdOLEVBQUEzTCxLQUFBN0IsRUFBQThILEdBQUEsR0FFQUEsRUFBQSxHQUdBNUQsRUFBQXZELFVBQUErTyxXQUFBLFNBQUExUCxFQUFBOEgsRUFBQS9DLEVBQUE0SSxHQUdBLEdBRkEzTixLQUNBOEgsR0FBQSxHQUNBNkYsRUFBQSxDQUNBLElBQUFnQyxFQUFBbEcsS0FBQThFLElBQUEsSUFBQXhKLEVBQUEsR0FFQXNJLEVBQUF4TCxLQUFBN0IsRUFBQThILEVBQUEvQyxFQUFBNEssRUFBQSxHQUFBQSxHQUdBLElBQUE1USxFQUFBLEVBQ0FpUCxFQUFBLEVBQ0E0QixFQUFBLEVBRUEsSUFEQS9OLEtBQUFpRyxHQUFBLElBQUE5SCxJQUNBakIsRUFBQWdHLElBQUFpSixHQUFBLE1BQ0FoTyxFQUFBLE9BQUE0UCxHQUFBLElBQUEvTixLQUFBaUcsRUFBQS9JLEVBQUEsS0FDQTZRLEVBQUEsR0FFQS9OLEtBQUFpRyxFQUFBL0ksSUFBQWlCLEVBQUFnTyxHQUFBLEdBQUE0QixFQUFBLElBR0EsT0FBQTlILEVBQUEvQyxHQUdBYixFQUFBdkQsVUFBQWtQLFdBQUEsU0FBQTdQLEVBQUE4SCxFQUFBL0MsRUFBQTRJLEdBR0EsR0FGQTNOLEtBQ0E4SCxHQUFBLEdBQ0E2RixFQUFBLENBQ0EsSUFBQWdDLEVBQUFsRyxLQUFBOEUsSUFBQSxJQUFBeEosRUFBQSxHQUVBc0ksRUFBQXhMLEtBQUE3QixFQUFBOEgsRUFBQS9DLEVBQUE0SyxFQUFBLEdBQUFBLEdBR0EsSUFBQTVRLEVBQUFnRyxFQUFBLEVBQ0FpSixFQUFBLEVBQ0E0QixFQUFBLEVBRUEsSUFEQS9OLEtBQUFpRyxFQUFBL0ksR0FBQSxJQUFBaUIsSUFDQWpCLEdBQUEsSUFBQWlQLEdBQUEsTUFDQWhPLEVBQUEsT0FBQTRQLEdBQUEsSUFBQS9OLEtBQUFpRyxFQUFBL0ksRUFBQSxLQUNBNlEsRUFBQSxHQUVBL04sS0FBQWlHLEVBQUEvSSxJQUFBaUIsRUFBQWdPLEdBQUEsR0FBQTRCLEVBQUEsSUFHQSxPQUFBOUgsRUFBQS9DLEdBR0FiLEVBQUF2RCxVQUFBbVAsVUFBQSxTQUFBOVAsRUFBQThILEVBQUE2RixHQU9BLE9BTkEzTixLQUNBOEgsR0FBQSxFQUNBNkYsR0FBQU4sRUFBQXhMLEtBQUE3QixFQUFBOEgsRUFBQSxZQUNBNUQsRUFBQUMsc0JBQUFuRSxFQUFBeUosS0FBQTRGLE1BQUFyUCxJQUNBQSxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxHQUNBNkIsS0FBQWlHLEdBQUEsSUFBQTlILEVBQ0E4SCxFQUFBLEdBR0E1RCxFQUFBdkQsVUFBQW9QLGFBQUEsU0FBQS9QLEVBQUE4SCxFQUFBNkYsR0FVQSxPQVRBM04sS0FDQThILEdBQUEsRUFDQTZGLEdBQUFOLEVBQUF4TCxLQUFBN0IsRUFBQThILEVBQUEsZ0JBQ0E1RCxFQUFBQyxxQkFDQXRDLEtBQUFpRyxHQUFBLElBQUE5SCxFQUNBNkIsS0FBQWlHLEVBQUEsR0FBQTlILElBQUEsR0FFQXNOLEVBQUF6TCxLQUFBN0IsRUFBQThILEdBQUEsR0FFQUEsRUFBQSxHQUdBNUQsRUFBQXZELFVBQUFxUCxhQUFBLFNBQUFoUSxFQUFBOEgsRUFBQTZGLEdBVUEsT0FUQTNOLEtBQ0E4SCxHQUFBLEVBQ0E2RixHQUFBTixFQUFBeEwsS0FBQTdCLEVBQUE4SCxFQUFBLGdCQUNBNUQsRUFBQUMscUJBQ0F0QyxLQUFBaUcsR0FBQTlILElBQUEsRUFDQTZCLEtBQUFpRyxFQUFBLE9BQUE5SCxHQUVBc04sRUFBQXpMLEtBQUE3QixFQUFBOEgsR0FBQSxHQUVBQSxFQUFBLEdBR0E1RCxFQUFBdkQsVUFBQXNQLGFBQUEsU0FBQWpRLEVBQUE4SCxFQUFBNkYsR0FZQSxPQVhBM04sS0FDQThILEdBQUEsRUFDQTZGLEdBQUFOLEVBQUF4TCxLQUFBN0IsRUFBQThILEVBQUEsMEJBQ0E1RCxFQUFBQyxxQkFDQXRDLEtBQUFpRyxHQUFBLElBQUE5SCxFQUNBNkIsS0FBQWlHLEVBQUEsR0FBQTlILElBQUEsRUFDQTZCLEtBQUFpRyxFQUFBLEdBQUE5SCxJQUFBLEdBQ0E2QixLQUFBaUcsRUFBQSxHQUFBOUgsSUFBQSxJQUVBd04sRUFBQTNMLEtBQUE3QixFQUFBOEgsR0FBQSxHQUVBQSxFQUFBLEdBR0E1RCxFQUFBdkQsVUFBQXVQLGFBQUEsU0FBQWxRLEVBQUE4SCxFQUFBNkYsR0FhQSxPQVpBM04sS0FDQThILEdBQUEsRUFDQTZGLEdBQUFOLEVBQUF4TCxLQUFBN0IsRUFBQThILEVBQUEsMEJBQ0E5SCxFQUFBLElBQUFBLEVBQUEsV0FBQUEsRUFBQSxHQUNBa0UsRUFBQUMscUJBQ0F0QyxLQUFBaUcsR0FBQTlILElBQUEsR0FDQTZCLEtBQUFpRyxFQUFBLEdBQUE5SCxJQUFBLEdBQ0E2QixLQUFBaUcsRUFBQSxHQUFBOUgsSUFBQSxFQUNBNkIsS0FBQWlHLEVBQUEsT0FBQTlILEdBRUF3TixFQUFBM0wsS0FBQTdCLEVBQUE4SCxHQUFBLEdBRUFBLEVBQUEsR0FnQkE1RCxFQUFBdkQsVUFBQXdQLGFBQUEsU0FBQW5RLEVBQUE4SCxFQUFBNkYsR0FDQSxPQUFBRCxFQUFBN0wsS0FBQTdCLEVBQUE4SCxHQUFBLEVBQUE2RixJQUdBekosRUFBQXZELFVBQUF5UCxhQUFBLFNBQUFwUSxFQUFBOEgsRUFBQTZGLEdBQ0EsT0FBQUQsRUFBQTdMLEtBQUE3QixFQUFBOEgsR0FBQSxFQUFBNkYsSUFXQXpKLEVBQUF2RCxVQUFBMFAsY0FBQSxTQUFBclEsRUFBQThILEVBQUE2RixHQUNBLE9BQUFDLEVBQUEvTCxLQUFBN0IsRUFBQThILEdBQUEsRUFBQTZGLElBR0F6SixFQUFBdkQsVUFBQTJQLGNBQUEsU0FBQXRRLEVBQUE4SCxFQUFBNkYsR0FDQSxPQUFBQyxFQUFBL0wsS0FBQTdCLEVBQUE4SCxHQUFBLEVBQUE2RixJQUlBekosRUFBQXZELFVBQUFpRixLQUFBLFNBQUFsRCxFQUFBNk4sRUFBQWxILEVBQUFDLEdBUUEsR0FQQUQsTUFBQSxHQUNBQyxHQUFBLElBQUFBLE1BQUF6SCxLQUFBZSxRQUNBMk4sR0FBQTdOLEVBQUFFLFNBQUEyTixFQUFBN04sRUFBQUUsUUFDQTJOLE1BQUEsR0FDQWpILEVBQUEsR0FBQUEsRUFBQUQsSUFBQUMsRUFBQUQsR0FHQUMsSUFBQUQsRUFBQSxTQUNBLE9BQUEzRyxFQUFBRSxRQUFBLElBQUFmLEtBQUFlLE9BQUEsU0FHQSxHQUFBMk4sRUFBQSxFQUNBLFVBQUFqTSxXQUFBLDZCQUVBLEdBQUErRSxFQUFBLEdBQUFBLEdBQUF4SCxLQUFBZSxPQUFBLFVBQUEwQixXQUFBLDZCQUNBLEdBQUFnRixFQUFBLFlBQUFoRixXQUFBLDJCQUdBZ0YsRUFBQXpILEtBQUFlLFNBQUEwRyxFQUFBekgsS0FBQWUsUUFDQUYsRUFBQUUsT0FBQTJOLEVBQUFqSCxFQUFBRCxJQUNBQyxFQUFBNUcsRUFBQUUsT0FBQTJOLEVBQUFsSCxHQUdBLElBQ0F0SyxFQURBMkcsRUFBQTRELEVBQUFELEVBR0EsR0FBQXhILE9BQUFhLEdBQUEyRyxFQUFBa0gsS0FBQWpILEVBRUEsSUFBQXZLLEVBQUEyRyxFQUFBLEVBQXFCM0csR0FBQSxJQUFRQSxFQUM3QjJELEVBQUEzRCxFQUFBd1IsR0FBQTFPLEtBQUE5QyxFQUFBc0ssUUFFRyxHQUFBM0QsRUFBQSxNQUFBeEIsRUFBQUMsb0JBRUgsSUFBQXBGLEVBQUEsRUFBZUEsRUFBQTJHLElBQVMzRyxFQUN4QjJELEVBQUEzRCxFQUFBd1IsR0FBQTFPLEtBQUE5QyxFQUFBc0ssUUFHQTlFLFdBQUE1RCxVQUFBNlAsSUFBQXRSLEtBQ0F3RCxFQUNBYixLQUFBOEksU0FBQXRCLElBQUEzRCxHQUNBNkssR0FJQSxPQUFBN0ssR0FPQXhCLEVBQUF2RCxVQUFBcUssS0FBQSxTQUFBbEYsRUFBQXVELEVBQUFDLEVBQUFuRSxHQUVBLG9CQUFBVyxFQUFBLENBU0EsR0FSQSxpQkFBQXVELEdBQ0FsRSxFQUFBa0UsRUFDQUEsRUFBQSxFQUNBQyxFQUFBekgsS0FBQWUsUUFDSyxpQkFBQTBHLElBQ0xuRSxFQUFBbUUsRUFDQUEsRUFBQXpILEtBQUFlLFFBRUEsSUFBQWtELEVBQUFsRCxPQUFBLENBQ0EsSUFBQTZOLEVBQUEzSyxFQUFBNkMsV0FBQSxHQUNBOEgsRUFBQSxNQUNBM0ssRUFBQTJLLEdBR0EsUUFBQXZPLElBQUFpRCxHQUFBLGlCQUFBQSxFQUNBLFVBQUEzQyxVQUFBLDZCQUVBLG9CQUFBMkMsSUFBQWpCLEVBQUFrQixXQUFBRCxHQUNBLFVBQUEzQyxVQUFBLHFCQUFBMkMsT0FFRyxpQkFBQVcsSUFDSEEsR0FBQSxLQUlBLEdBQUF1RCxFQUFBLEdBQUF4SCxLQUFBZSxPQUFBeUcsR0FBQXhILEtBQUFlLE9BQUEwRyxFQUNBLFVBQUFoRixXQUFBLHNCQUdBLEdBQUFnRixHQUFBRCxFQUNBLE9BQUF4SCxLQVFBLElBQUE5QyxFQUNBLEdBTkFzSyxLQUFBLEVBQ0FDLE9BQUFwSCxJQUFBb0gsRUFBQXpILEtBQUFlLE9BQUEwRyxJQUFBLEVBRUF4RCxNQUFBLEdBR0EsaUJBQUFBLEVBQ0EsSUFBQS9HLEVBQUFzSyxFQUFtQnRLLEVBQUF1SyxJQUFTdkssRUFDNUI4QyxLQUFBOUMsR0FBQStHLE1BRUcsQ0FDSCxJQUFBb0gsRUFBQWhKLEVBQUF1QixTQUFBSyxHQUNBQSxFQUNBUyxFQUFBLElBQUFyQyxFQUFBNEIsRUFBQVgsR0FBQWlCLFlBQ0FWLEVBQUF3SCxFQUFBdEssT0FDQSxJQUFBN0QsRUFBQSxFQUFlQSxFQUFBdUssRUFBQUQsSUFBaUJ0SyxFQUNoQzhDLEtBQUE5QyxFQUFBc0ssR0FBQTZELEVBQUFuTyxFQUFBMkcsR0FJQSxPQUFBN0QsTUFNQSxJQUFBNk8sRUFBQSxxQkFtQkEsU0FBQXpELEVBQUF6TSxHQUNBLE9BQUFBLEVBQUEsT0FBQUEsRUFBQTRGLFNBQUEsSUFDQTVGLEVBQUE0RixTQUFBLElBR0EsU0FBQUcsRUFBQXJCLEVBQUE4RCxHQUVBLElBQUFpQixFQURBakIsS0FBQTJILElBTUEsSUFKQSxJQUFBL04sRUFBQXNDLEVBQUF0QyxPQUNBZ08sRUFBQSxLQUNBMUQsRUFBQSxHQUVBbk8sRUFBQSxFQUFpQkEsRUFBQTZELElBQVk3RCxFQUFBLENBSTdCLElBSEFrTCxFQUFBL0UsRUFBQXlELFdBQUE1SixJQUdBLE9BQUFrTCxFQUFBLE9BRUEsSUFBQTJHLEVBQUEsQ0FFQSxHQUFBM0csRUFBQSxRQUVBakIsR0FBQSxPQUFBa0UsRUFBQXhFLEtBQUEsYUFDQSxTQUNTLEdBQUEzSixFQUFBLElBQUE2RCxFQUFBLEVBRVRvRyxHQUFBLE9BQUFrRSxFQUFBeEUsS0FBQSxhQUNBLFNBSUFrSSxFQUFBM0csRUFFQSxTQUlBLEdBQUFBLEVBQUEsUUFDQWpCLEdBQUEsT0FBQWtFLEVBQUF4RSxLQUFBLGFBQ0FrSSxFQUFBM0csRUFDQSxTQUlBQSxFQUFBLE9BQUEyRyxFQUFBLFVBQUEzRyxFQUFBLFlBQ0syRyxJQUVMNUgsR0FBQSxPQUFBa0UsRUFBQXhFLEtBQUEsYUFNQSxHQUhBa0ksRUFBQSxLQUdBM0csRUFBQSxLQUNBLElBQUFqQixHQUFBLFdBQ0FrRSxFQUFBeEUsS0FBQXVCLFFBQ0ssR0FBQUEsRUFBQSxNQUNMLElBQUFqQixHQUFBLFdBQ0FrRSxFQUFBeEUsS0FDQXVCLEdBQUEsTUFDQSxHQUFBQSxFQUFBLFVBRUssR0FBQUEsRUFBQSxPQUNMLElBQUFqQixHQUFBLFdBQ0FrRSxFQUFBeEUsS0FDQXVCLEdBQUEsT0FDQUEsR0FBQSxTQUNBLEdBQUFBLEVBQUEsU0FFSyxNQUFBQSxFQUFBLFNBU0wsVUFBQXhGLE1BQUEsc0JBUkEsSUFBQXVFLEdBQUEsV0FDQWtFLEVBQUF4RSxLQUNBdUIsR0FBQSxPQUNBQSxHQUFBLFVBQ0FBLEdBQUEsU0FDQSxHQUFBQSxFQUFBLE1BT0EsT0FBQWlELEVBNEJBLFNBQUExRyxFQUFBZ0MsR0FDQSxPQUFBMUUsRUFBQStNLFlBaElBLFNBQUFySSxHQUlBLElBRkFBLEVBVUEsU0FBQUEsR0FDQSxPQUFBQSxFQUFBc0ksS0FBQXRJLEVBQUFzSSxPQUNBdEksRUFBQXVJLFFBQUEsaUJBWkFDLENBQUF4SSxHQUFBdUksUUFBQUwsRUFBQSxLQUVBOU4sT0FBQSxXQUVBLEtBQUE0RixFQUFBNUYsT0FBQSxNQUNBNEYsR0FBQSxJQUVBLE9BQUFBLEVBdUhBeUksQ0FBQXpJLElBR0EsU0FBQUYsRUFBQTRJLEVBQUFDLEVBQUFySixFQUFBbEYsR0FDQSxRQUFBN0QsRUFBQSxFQUFpQkEsRUFBQTZELEtBQ2pCN0QsRUFBQStJLEdBQUFxSixFQUFBdk8sUUFBQTdELEdBQUFtUyxFQUFBdE8sVUFENkI3RCxFQUU3Qm9TLEVBQUFwUyxFQUFBK0ksR0FBQW9KLEVBQUFuUyxHQUVBLE9BQUFBLG1EQ3p0REEsSUFBQXFTLEVBQVV6UyxFQUFRLElBSWxCMFMsRUFBQTVSLE9BQUE2UixNQUFBLFNBQUFuUCxHQUNBLElBQUFtUCxFQUFBLEdBQ0EsUUFBQWhSLEtBQUE2QixFQUNBbVAsRUFBQTVJLEtBQUFwSSxHQUNHLE9BQUFnUixHQUlIeFMsRUFBQUQsUUFBQTBTLEVBR0EsSUFBQUMsRUFBVzdTLEVBQVEsSUFDbkI2UyxFQUFBQyxTQUFnQjlTLEVBQVEsSUFHeEIsSUFBQStTLEVBQWUvUyxFQUFRLElBQ3ZCZ1QsRUFBZWhULEVBQVEsSUFFdkI2UyxFQUFBQyxTQUFBRixFQUFBRyxHQUtBLElBREEsSUFBQUosRUFBQUQsRUFBQU0sRUFBQWhSLFdBQ0FpUixFQUFBLEVBQWlCQSxFQUFBTixFQUFBMU8sT0FBaUJnUCxJQUFBLENBQ2xDLElBQUFDLEVBQUFQLEVBQUFNLEdBQ0FMLEVBQUE1USxVQUFBa1IsS0FBQU4sRUFBQTVRLFVBQUFrUixHQUFBRixFQUFBaFIsVUFBQWtSLElBSUEsU0FBQU4sRUFBQU8sR0FDQSxLQUFBalEsZ0JBQUEwUCxHQUFBLFdBQUFBLEVBQUFPLEdBRUFKLEVBQUF4UyxLQUFBMkMsS0FBQWlRLEdBQ0FILEVBQUF6UyxLQUFBMkMsS0FBQWlRLEdBRUFBLElBQUEsSUFBQUEsRUFBQUMsV0FBQWxRLEtBQUFrUSxVQUFBLEdBRUFELElBQUEsSUFBQUEsRUFBQXpQLFdBQUFSLEtBQUFRLFVBQUEsR0FFQVIsS0FBQW1RLGVBQUEsRUFDQUYsSUFBQSxJQUFBQSxFQUFBRSxnQkFBQW5RLEtBQUFtUSxlQUFBLEdBRUFuUSxLQUFBb1EsS0FBQSxNQUFBQyxHQWNBLFNBQUFBLElBR0FyUSxLQUFBbVEsZUFBQW5RLEtBQUFzUSxlQUFBQyxPQUlBaEIsRUFBQWlCLFNBQUFDLEVBQUF6USxNQUdBLFNBQUF5USxFQUFBMVEsR0FDQUEsRUFBQTBILE1BdEJBN0osT0FBQUMsZUFBQTZSLEVBQUE1USxVQUFBLHlCQUlBaEIsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWlDLEtBQUFzUSxlQUFBSSxpQkFtQkE5UyxPQUFBQyxlQUFBNlIsRUFBQTVRLFVBQUEsYUFDQWYsSUFBQSxXQUNBLFlBQUFzQyxJQUFBTCxLQUFBMlEscUJBQUF0USxJQUFBTCxLQUFBc1EsaUJBR0F0USxLQUFBMlEsZUFBQUMsV0FBQTVRLEtBQUFzUSxlQUFBTSxZQUVBakMsSUFBQSxTQUFBeFEsUUFHQWtDLElBQUFMLEtBQUEyUSxxQkFBQXRRLElBQUFMLEtBQUFzUSxpQkFNQXRRLEtBQUEyUSxlQUFBQyxVQUFBelMsRUFDQTZCLEtBQUFzUSxlQUFBTSxVQUFBelMsTUFJQXVSLEVBQUE1USxVQUFBK1IsU0FBQSxTQUFBelEsRUFBQTBRLEdBQ0E5USxLQUFBNkcsS0FBQSxNQUNBN0csS0FBQXlILE1BRUE4SCxFQUFBaUIsU0FBQU0sRUFBQTFRLGtDQzFHQSxJQU9BMlEsRUFQQUMsRUFBQSxpQkFBQUMsZ0JBQUEsS0FDQUMsRUFBQUYsR0FBQSxtQkFBQUEsRUFBQTdRLE1BQ0E2USxFQUFBN1EsTUFDQSxTQUFBVSxFQUFBc1EsRUFBQWxSLEdBQ0EsT0FBQXFCLFNBQUF4QyxVQUFBcUIsTUFBQTlDLEtBQUF3RCxFQUFBc1EsRUFBQWxSLElBS0E4USxFQURBQyxHQUFBLG1CQUFBQSxFQUFBSSxRQUNBSixFQUFBSSxRQUNDeFQsT0FBQXlULHNCQUNELFNBQUF4USxHQUNBLE9BQUFqRCxPQUFBMFQsb0JBQUF6USxHQUNBNkksT0FBQTlMLE9BQUF5VCxzQkFBQXhRLEtBR0EsU0FBQUEsR0FDQSxPQUFBakQsT0FBQTBULG9CQUFBelEsSUFRQSxJQUFBMFEsRUFBQXJMLE9BQUFqQixPQUFBLFNBQUE5RyxHQUNBLE9BQUFBLE1BR0EsU0FBQXFULElBQ0FBLEVBQUFDLEtBQUFwVSxLQUFBMkMsTUFFQS9DLEVBQUFELFFBQUF3VSxFQUdBQSxpQkFFQUEsRUFBQTFTLFVBQUE0UyxhQUFBclIsRUFDQW1SLEVBQUExUyxVQUFBNlMsYUFBQSxFQUNBSCxFQUFBMVMsVUFBQThTLG1CQUFBdlIsRUFJQSxJQUFBd1IsRUFBQSxHQW9DQSxTQUFBQyxFQUFBdFAsR0FDQSxZQUFBbkMsSUFBQW1DLEVBQUFvUCxjQUNBSixFQUFBSyxvQkFDQXJQLEVBQUFvUCxjQW1EQSxTQUFBRyxFQUFBbFIsRUFBQXFELEVBQUE4TixFQUFBQyxHQUNBLElBQUEzVSxFQUNBNFUsRUFDQUMsRUFuSEFDLEVBcUhBLHNCQUFBSixFQUNBLFVBQUFyUixVQUFBLDBFQUFBcVIsR0FxQkEsUUFqQkEzUixLQURBNlIsRUFBQXJSLEVBQUE2USxVQUVBUSxFQUFBclIsRUFBQTZRLFFBQUE5VCxPQUFBWSxPQUFBLE1BQ0FxQyxFQUFBOFEsYUFBQSxTQUlBdFIsSUFBQTZSLEVBQUFHLGNBQ0F4UixFQUFBeVIsS0FBQSxjQUFBcE8sRUFDQThOLHlCQUlBRSxFQUFBclIsRUFBQTZRLFNBRUFTLEVBQUFELEVBQUFoTyxTQUdBN0QsSUFBQThSLEVBRUFBLEVBQUFELEVBQUFoTyxHQUFBOE4sSUFDQW5SLEVBQUE4USxrQkFlQSxHQWJBLG1CQUFBUSxFQUVBQSxFQUFBRCxFQUFBaE8sR0FDQStOLEVBQUEsQ0FBQUQsRUFBQUcsR0FBQSxDQUFBQSxFQUFBSCxHQUVLQyxFQUNMRSxFQUFBSSxRQUFBUCxHQUVBRyxFQUFBdEwsS0FBQW1MLElBSUExVSxFQUFBd1UsRUFBQWpSLElBQ0EsR0FBQXNSLEVBQUFwUixPQUFBekQsSUFBQTZVLEVBQUFLLE9BQUEsQ0FDQUwsRUFBQUssUUFBQSxFQUdBLElBQUFDLEVBQUEsSUFBQTdQLE1BQUEsK0NBQ0F1UCxFQUFBcFIsT0FBQSxJQUFBMEUsT0FBQXZCLEdBQUEscUVBR0F1TyxFQUFBaFYsS0FBQSw4QkFDQWdWLEVBQUFDLFFBQUE3UixFQUNBNFIsRUFBQXZPLE9BQ0F1TyxFQUFBRSxNQUFBUixFQUFBcFIsT0F4S0FxUixFQXlLQUssRUF4S0FHLGlCQUFBQyxNQUFBRCxRQUFBQyxLQUFBVCxHQTRLQSxPQUFBdlIsRUF3QkEsU0FBQWlTLEVBQUFqUyxFQUFBcUQsRUFBQThOLEdBQ0EsSUFBQWUsRUFBQSxDQUFlQyxPQUFBLEVBQUFDLFlBQUE1UyxFQUFBUSxTQUFBcUQsT0FBQThOLFlBQ2ZrQixFQVpBLFdBRUEsSUFEQSxJQUFBalQsRUFBQSxHQUNBL0MsRUFBQSxFQUFpQkEsRUFBQWdELFVBQUFhLE9BQXNCN0QsSUFBQStDLEVBQUE0RyxLQUFBM0csVUFBQWhELElBQ3ZDOEMsS0FBQWdULFFBQ0FoVCxLQUFBYSxPQUFBc1MsZUFBQW5ULEtBQUFrRSxLQUFBbEUsS0FBQWlULFFBQ0FqVCxLQUFBZ1QsT0FBQSxFQUNBOUIsRUFBQWxSLEtBQUFnUyxTQUFBaFMsS0FBQWEsT0FBQVosS0FNQXZCLEtBQUFxVSxHQUdBLE9BRkFHLEVBQUFsQixXQUNBZSxFQUFBRSxPQUFBQyxFQUNBQSxFQWdJQSxTQUFBRSxFQUFBdlMsRUFBQXFELEVBQUFtUCxHQUNBLElBQUFuQixFQUFBclIsRUFBQTZRLFFBRUEsUUFBQXJSLElBQUE2UixFQUNBLFNBRUEsSUFBQW9CLEVBQUFwQixFQUFBaE8sR0FDQSxZQUFBN0QsSUFBQWlULEVBQ0EsR0FFQSxtQkFBQUEsRUFDQUQsRUFBQSxDQUFBQyxFQUFBdEIsVUFBQXNCLEdBQUEsQ0FBQUEsR0FFQUQsRUFzREEsU0FBQWhPLEdBRUEsSUFEQSxJQUFBNkYsRUFBQSxJQUFBRixNQUFBM0YsRUFBQXRFLFFBQ0E3RCxFQUFBLEVBQWlCQSxFQUFBZ08sRUFBQW5LLFNBQWdCN0QsRUFDakNnTyxFQUFBaE8sR0FBQW1JLEVBQUFuSSxHQUFBOFUsVUFBQTNNLEVBQUFuSSxHQUVBLE9BQUFnTyxFQTFEQXFJLENBQUFELEdBQUFFLEVBQUFGLElBQUF2UyxRQW9CQSxTQUFBMFMsRUFBQXZQLEdBQ0EsSUFBQWdPLEVBQUFsUyxLQUFBMFIsUUFFQSxRQUFBclIsSUFBQTZSLEVBQUEsQ0FDQSxJQUFBb0IsRUFBQXBCLEVBQUFoTyxHQUVBLHNCQUFBb1AsRUFDQSxTQUNLLFFBQUFqVCxJQUFBaVQsRUFDTCxPQUFBQSxFQUFBdlMsT0FJQSxTQU9BLFNBQUF5UyxFQUFBbk8sRUFBQTFHLEdBRUEsSUFEQSxJQUFBb0YsRUFBQSxJQUFBaUgsTUFBQXJNLEdBQ0F6QixFQUFBLEVBQWlCQSxFQUFBeUIsSUFBT3pCLEVBQ3hCNkcsRUFBQTdHLEdBQUFtSSxFQUFBbkksR0FDQSxPQUFBNkcsRUE1V0FuRyxPQUFBQyxlQUFBMlQsRUFBQSx1QkFDQTFULFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUE4VCxHQUVBbEQsSUFBQSxTQUFBblAsR0FDQSxvQkFBQUEsS0FBQSxHQUFBK1IsRUFBQS9SLEdBQ0EsVUFBQWlELFdBQUEsa0dBQUFqRCxFQUFBLEtBRUFxUyxFQUFBclMsS0FJQWdTLEVBQUFDLEtBQUEsZ0JBRUFwUixJQUFBTCxLQUFBMFIsU0FDQTFSLEtBQUEwUixVQUFBOVQsT0FBQStELGVBQUEzQixNQUFBMFIsVUFDQTFSLEtBQUEwUixRQUFBOVQsT0FBQVksT0FBQSxNQUNBd0IsS0FBQTJSLGFBQUEsR0FHQTNSLEtBQUE0UixjQUFBNVIsS0FBQTRSLG9CQUFBdlIsR0FLQW1SLEVBQUExUyxVQUFBNFUsZ0JBQUEsU0FBQS9VLEdBQ0Esb0JBQUFBLEtBQUEsR0FBQTRTLEVBQUE1UyxHQUNBLFVBQUE4RCxXQUFBLGdGQUFBOUQsRUFBQSxLQUdBLE9BREFxQixLQUFBNFIsY0FBQWpULEVBQ0FxQixNQVNBd1IsRUFBQTFTLFVBQUE2VSxnQkFBQSxXQUNBLE9BQUE3QixFQUFBOVIsT0FHQXdSLEVBQUExUyxVQUFBd1QsS0FBQSxTQUFBcE8sR0FFQSxJQURBLElBQUFqRSxFQUFBLEdBQ0EvQyxFQUFBLEVBQWlCQSxFQUFBZ0QsVUFBQWEsT0FBc0I3RCxJQUFBK0MsRUFBQTRHLEtBQUEzRyxVQUFBaEQsSUFDdkMsSUFBQTBXLEVBQUEsVUFBQTFQLEVBRUFnTyxFQUFBbFMsS0FBQTBSLFFBQ0EsUUFBQXJSLElBQUE2UixFQUNBMEIsVUFBQXZULElBQUE2UixFQUFBeFMsV0FDQSxJQUFBa1UsRUFDQSxTQUdBLEdBQUFBLEVBQUEsQ0FDQSxJQUFBQyxFQUdBLEdBRkE1VCxFQUFBYyxPQUFBLElBQ0E4UyxFQUFBNVQsRUFBQSxJQUNBNFQsYUFBQWpSLE1BR0EsTUFBQWlSLEVBR0EsSUFBQXpULEVBQUEsSUFBQXdDLE1BQUEsb0JBQUFpUixFQUFBLEtBQUFBLEVBQUFDLFFBQUEsU0FFQSxNQURBMVQsRUFBQTJULFFBQUFGLEVBQ0F6VCxFQUdBLElBQUE0VCxFQUFBOUIsRUFBQWhPLEdBRUEsUUFBQTdELElBQUEyVCxFQUNBLFNBRUEsc0JBQUFBLEVBQ0E5QyxFQUFBOEMsRUFBQWhVLEtBQUFDLE9BRUEsS0FBQTRELEVBQUFtUSxFQUFBalQsT0FDQWtULEVBQUFULEVBQUFRLEVBQUFuUSxHQUNBLElBQUEzRyxFQUFBLEVBQW1CQSxFQUFBMkcsSUFBUzNHLEVBQzVCZ1UsRUFBQStDLEVBQUEvVyxHQUFBOEMsS0FBQUMsR0FHQSxVQW1FQXVSLEVBQUExUyxVQUFBb1YsWUFBQSxTQUFBaFEsRUFBQThOLEdBQ0EsT0FBQUQsRUFBQS9SLEtBQUFrRSxFQUFBOE4sR0FBQSxJQUdBUixFQUFBMVMsVUFBQXFWLEdBQUEzQyxFQUFBMVMsVUFBQW9WLFlBRUExQyxFQUFBMVMsVUFBQXNWLGdCQUNBLFNBQUFsUSxFQUFBOE4sR0FDQSxPQUFBRCxFQUFBL1IsS0FBQWtFLEVBQUE4TixHQUFBLElBcUJBUixFQUFBMVMsVUFBQXNSLEtBQUEsU0FBQWxNLEVBQUE4TixHQUNBLHNCQUFBQSxFQUNBLFVBQUFyUixVQUFBLDBFQUFBcVIsR0FHQSxPQURBaFMsS0FBQW1VLEdBQUFqUSxFQUFBNE8sRUFBQTlTLEtBQUFrRSxFQUFBOE4sSUFDQWhTLE1BR0F3UixFQUFBMVMsVUFBQXVWLG9CQUNBLFNBQUFuUSxFQUFBOE4sR0FDQSxzQkFBQUEsRUFDQSxVQUFBclIsVUFBQSwwRUFBQXFSLEdBR0EsT0FEQWhTLEtBQUFvVSxnQkFBQWxRLEVBQUE0TyxFQUFBOVMsS0FBQWtFLEVBQUE4TixJQUNBaFMsTUFJQXdSLEVBQUExUyxVQUFBcVUsZUFDQSxTQUFBalAsRUFBQThOLEdBQ0EsSUFBQXJJLEVBQUF1SSxFQUFBb0MsRUFBQXBYLEVBQUFxWCxFQUVBLHNCQUFBdkMsRUFDQSxVQUFBclIsVUFBQSwwRUFBQXFSLEdBSUEsUUFBQTNSLEtBREE2UixFQUFBbFMsS0FBQTBSLFNBRUEsT0FBQTFSLEtBR0EsUUFBQUssS0FEQXNKLEVBQUF1SSxFQUFBaE8sSUFFQSxPQUFBbEUsS0FFQSxHQUFBMkosSUFBQXFJLEdBQUFySSxFQUFBcUksYUFDQSxLQUFBaFMsS0FBQTJSLGFBQ0EzUixLQUFBMFIsUUFBQTlULE9BQUFZLE9BQUEsY0FFQTBULEVBQUFoTyxHQUNBZ08sRUFBQWlCLGdCQUNBblQsS0FBQXNTLEtBQUEsaUJBQUFwTyxFQUFBeUYsRUFBQXFJLG1CQUVPLHNCQUFBckksRUFBQSxDQUdQLElBRkEySyxHQUFBLEVBRUFwWCxFQUFBeU0sRUFBQTVJLE9BQUEsRUFBaUM3RCxHQUFBLEVBQVFBLElBQ3pDLEdBQUF5TSxFQUFBek0sS0FBQThVLEdBQUFySSxFQUFBek0sR0FBQThVLGFBQUEsQ0FDQXVDLEVBQUE1SyxFQUFBek0sR0FBQThVLFNBQ0FzQyxFQUFBcFgsRUFDQSxNQUlBLEdBQUFvWCxFQUFBLEVBQ0EsT0FBQXRVLEtBRUEsSUFBQXNVLEVBQ0EzSyxFQUFBNkssUUFpSUEsU0FBQTdLLEVBQUE4SyxHQUNBLEtBQVFBLEVBQUEsRUFBQTlLLEVBQUE1SSxPQUF5QjBULElBQ2pDOUssRUFBQThLLEdBQUE5SyxFQUFBOEssRUFBQSxHQUNBOUssRUFBQStLLE1BbElBQyxDQUFBaEwsRUFBQTJLLEdBR0EsSUFBQTNLLEVBQUE1SSxTQUNBbVIsRUFBQWhPLEdBQUF5RixFQUFBLFNBRUF0SixJQUFBNlIsRUFBQWlCLGdCQUNBblQsS0FBQXNTLEtBQUEsaUJBQUFwTyxFQUFBcVEsR0FBQXZDLEdBR0EsT0FBQWhTLE1BR0F3UixFQUFBMVMsVUFBQThWLElBQUFwRCxFQUFBMVMsVUFBQXFVLGVBRUEzQixFQUFBMVMsVUFBQStWLG1CQUNBLFNBQUEzUSxHQUNBLElBQUErUCxFQUFBL0IsRUFBQWhWLEVBR0EsUUFBQW1ELEtBREE2UixFQUFBbFMsS0FBQTBSLFNBRUEsT0FBQTFSLEtBR0EsUUFBQUssSUFBQTZSLEVBQUFpQixlQVVBLE9BVEEsSUFBQWpULFVBQUFhLFFBQ0FmLEtBQUEwUixRQUFBOVQsT0FBQVksT0FBQSxNQUNBd0IsS0FBQTJSLGFBQUEsUUFDU3RSLElBQUE2UixFQUFBaE8sS0FDVCxLQUFBbEUsS0FBQTJSLGFBQ0EzUixLQUFBMFIsUUFBQTlULE9BQUFZLE9BQUEsYUFFQTBULEVBQUFoTyxJQUVBbEUsS0FJQSxPQUFBRSxVQUFBYSxPQUFBLENBQ0EsSUFDQXRDLEVBREFnUixFQUFBN1IsT0FBQTZSLEtBQUF5QyxHQUVBLElBQUFoVixFQUFBLEVBQW1CQSxFQUFBdVMsRUFBQTFPLFNBQWlCN0QsRUFFcEMsb0JBREF1QixFQUFBZ1IsRUFBQXZTLEtBRUE4QyxLQUFBNlUsbUJBQUFwVyxHQUtBLE9BSEF1QixLQUFBNlUsbUJBQUEsa0JBQ0E3VSxLQUFBMFIsUUFBQTlULE9BQUFZLE9BQUEsTUFDQXdCLEtBQUEyUixhQUFBLEVBQ0EzUixLQUtBLHNCQUZBaVUsRUFBQS9CLEVBQUFoTyxJQUdBbEUsS0FBQW1ULGVBQUFqUCxFQUFBK1AsUUFDTyxRQUFBNVQsSUFBQTRULEVBRVAsSUFBQS9XLEVBQUErVyxFQUFBbFQsT0FBQSxFQUFzQzdELEdBQUEsRUFBUUEsSUFDOUM4QyxLQUFBbVQsZUFBQWpQLEVBQUErUCxFQUFBL1csSUFJQSxPQUFBOEMsTUFvQkF3UixFQUFBMVMsVUFBQW1WLFVBQUEsU0FBQS9QLEdBQ0EsT0FBQWtQLEVBQUFwVCxLQUFBa0UsR0FBQSxJQUdBc04sRUFBQTFTLFVBQUFnVyxhQUFBLFNBQUE1USxHQUNBLE9BQUFrUCxFQUFBcFQsS0FBQWtFLEdBQUEsSUFHQXNOLEVBQUFpQyxjQUFBLFNBQUFmLEVBQUF4TyxHQUNBLHlCQUFBd08sRUFBQWUsY0FDQWYsRUFBQWUsY0FBQXZQLEdBRUF1UCxFQUFBcFcsS0FBQXFWLEVBQUF4TyxJQUlBc04sRUFBQTFTLFVBQUEyVSxnQkFpQkFqQyxFQUFBMVMsVUFBQWlXLFdBQUEsV0FDQSxPQUFBL1UsS0FBQTJSLGFBQUEsRUFBQVosRUFBQS9RLEtBQUEwUixTQUFBLG1CQ3phQSxtQkFBQTlULE9BQUFZLE9BRUF2QixFQUFBRCxRQUFBLFNBQUFnWSxFQUFBQyxHQUNBRCxFQUFBRSxPQUFBRCxFQUNBRCxFQUFBbFcsVUFBQWxCLE9BQUFZLE9BQUF5VyxFQUFBblcsVUFBQSxDQUNBaUQsWUFBQSxDQUNBNUQsTUFBQTZXLEVBQ0FsWCxZQUFBLEVBQ0EwQyxVQUFBLEVBQ0FELGNBQUEsTUFNQXRELEVBQUFELFFBQUEsU0FBQWdZLEVBQUFDLEdBQ0FELEVBQUFFLE9BQUFELEVBQ0EsSUFBQUUsRUFBQSxhQUNBQSxFQUFBclcsVUFBQW1XLEVBQUFuVyxVQUNBa1csRUFBQWxXLFVBQUEsSUFBQXFXLEVBQ0FILEVBQUFsVyxVQUFBaUQsWUFBQWlULG1CQ25CQSxJQU9BSSxFQUNBQyxFQVJBQyxFQUFBclksRUFBQUQsUUFBQSxHQVVBLFNBQUF1WSxJQUNBLFVBQUEzUyxNQUFBLG1DQUVBLFNBQUE0UyxJQUNBLFVBQUE1UyxNQUFBLHFDQXNCQSxTQUFBNlMsRUFBQUMsR0FDQSxHQUFBTixJQUFBTyxXQUVBLE9BQUFBLFdBQUFELEVBQUEsR0FHQSxJQUFBTixJQUFBRyxJQUFBSCxJQUFBTyxXQUVBLE9BREFQLEVBQUFPLFdBQ0FBLFdBQUFELEVBQUEsR0FFQSxJQUVBLE9BQUFOLEVBQUFNLEVBQUEsR0FDSyxNQUFBblUsR0FDTCxJQUVBLE9BQUE2VCxFQUFBL1gsS0FBQSxLQUFBcVksRUFBQSxHQUNTLE1BQUFuVSxHQUVULE9BQUE2VCxFQUFBL1gsS0FBQTJDLEtBQUEwVixFQUFBLE1BdkNBLFdBQ0EsSUFFQU4sRUFEQSxtQkFBQU8sV0FDQUEsV0FFQUosRUFFSyxNQUFBaFUsR0FDTDZULEVBQUFHLEVBRUEsSUFFQUYsRUFEQSxtQkFBQU8sYUFDQUEsYUFFQUosRUFFSyxNQUFBalUsR0FDTDhULEVBQUFHLEdBakJBLEdBd0VBLElBRUFLLEVBRkFDLEVBQUEsR0FDQUMsR0FBQSxFQUVBQyxHQUFBLEVBRUEsU0FBQUMsSUFDQUYsR0FBQUYsSUFHQUUsR0FBQSxFQUNBRixFQUFBOVUsT0FDQStVLEVBQUFELEVBQUFuTSxPQUFBb00sR0FFQUUsR0FBQSxFQUVBRixFQUFBL1UsUUFDQW1WLEtBSUEsU0FBQUEsSUFDQSxJQUFBSCxFQUFBLENBR0EsSUFBQUksRUFBQVYsRUFBQVEsR0FDQUYsR0FBQSxFQUdBLElBREEsSUFBQWxTLEVBQUFpUyxFQUFBL1UsT0FDQThDLEdBQUEsQ0FHQSxJQUZBZ1MsRUFBQUMsRUFDQUEsRUFBQSxLQUNBRSxFQUFBblMsR0FDQWdTLEdBQ0FBLEVBQUFHLEdBQUFJLE1BR0FKLEdBQUEsRUFDQW5TLEVBQUFpUyxFQUFBL1UsT0FFQThVLEVBQUEsS0FDQUUsR0FBQSxFQW5FQSxTQUFBTSxHQUNBLEdBQUFoQixJQUFBTyxhQUVBLE9BQUFBLGFBQUFTLEdBR0EsSUFBQWhCLElBQUFHLElBQUFILElBQUFPLGFBRUEsT0FEQVAsRUFBQU8sYUFDQUEsYUFBQVMsR0FFQSxJQUVBaEIsRUFBQWdCLEdBQ0ssTUFBQTlVLEdBQ0wsSUFFQSxPQUFBOFQsRUFBQWhZLEtBQUEsS0FBQWdaLEdBQ1MsTUFBQTlVLEdBR1QsT0FBQThULEVBQUFoWSxLQUFBMkMsS0FBQXFXLEtBZ0RBQyxDQUFBSCxJQWlCQSxTQUFBSSxFQUFBYixFQUFBMVMsR0FDQWhELEtBQUEwVixNQUNBMVYsS0FBQWdELFFBWUEsU0FBQXdULEtBNUJBbEIsRUFBQTlFLFNBQUEsU0FBQWtGLEdBQ0EsSUFBQXpWLEVBQUEsSUFBQStLLE1BQUE5SyxVQUFBYSxPQUFBLEdBQ0EsR0FBQWIsVUFBQWEsT0FBQSxFQUNBLFFBQUE3RCxFQUFBLEVBQXVCQSxFQUFBZ0QsVUFBQWEsT0FBc0I3RCxJQUM3QytDLEVBQUEvQyxFQUFBLEdBQUFnRCxVQUFBaEQsR0FHQTRZLEVBQUFqUCxLQUFBLElBQUEwUCxFQUFBYixFQUFBelYsSUFDQSxJQUFBNlYsRUFBQS9VLFFBQUFnVixHQUNBTixFQUFBUyxJQVNBSyxFQUFBelgsVUFBQXNYLElBQUEsV0FDQXBXLEtBQUEwVixJQUFBdlYsTUFBQSxLQUFBSCxLQUFBZ0QsUUFFQXNTLEVBQUFtQixNQUFBLFVBQ0FuQixFQUFBb0IsU0FBQSxFQUNBcEIsRUFBQXFCLElBQUEsR0FDQXJCLEVBQUFzQixLQUFBLEdBQ0F0QixFQUFBdUIsUUFBQSxHQUNBdkIsRUFBQXdCLFNBQUEsR0FJQXhCLEVBQUFuQixHQUFBcUMsRUFDQWxCLEVBQUFwQixZQUFBc0MsRUFDQWxCLEVBQUFsRixLQUFBb0csRUFDQWxCLEVBQUFWLElBQUE0QixFQUNBbEIsRUFBQW5DLGVBQUFxRCxFQUNBbEIsRUFBQVQsbUJBQUEyQixFQUNBbEIsRUFBQWhELEtBQUFrRSxFQUNBbEIsRUFBQWxCLGdCQUFBb0MsRUFDQWxCLEVBQUFqQixvQkFBQW1DLEVBRUFsQixFQUFBckIsVUFBQSxTQUFBeFcsR0FBcUMsVUFFckM2WCxFQUFBeUIsUUFBQSxTQUFBdFosR0FDQSxVQUFBbUYsTUFBQSxxQ0FHQTBTLEVBQUEwQixJQUFBLFdBQTJCLFdBQzNCMUIsRUFBQTJCLE1BQUEsU0FBQWpTLEdBQ0EsVUFBQXBDLE1BQUEsbUNBRUEwUyxFQUFBNEIsTUFBQSxXQUE0QiwwQkN2TDVCLFNBQUFDLEVBQUE3VyxHQUE2VSxPQUExTzZXLEVBQTNFLG1CQUFBbFosUUFBQSxpQkFBQUEsT0FBQW1aLFNBQTJFLFNBQUE5VyxHQUFvQyxjQUFBQSxHQUErQixTQUFBQSxHQUFvQyxPQUFBQSxHQUFBLG1CQUFBckMsUUFBQXFDLEVBQUF5QixjQUFBOUQsUUFBQXFDLElBQUFyQyxPQUFBYSxVQUFBLGdCQUFBd0IsSUFBbUlBLEdBRTdVLFNBQUFhLEVBQUFiLEdBV0EsTUFWQSxtQkFBQXJDLFFBQUEsV0FBQWtaLEVBQUFsWixPQUFBbVosVUFDQW5hLEVBQUFELFFBQUFtRSxFQUFBLFNBQUFiLEdBQ0EsT0FBQTZXLEVBQUE3VyxJQUdBckQsRUFBQUQsUUFBQW1FLEVBQUEsU0FBQWIsR0FDQSxPQUFBQSxHQUFBLG1CQUFBckMsUUFBQXFDLEVBQUF5QixjQUFBOUQsUUFBQXFDLElBQUFyQyxPQUFBYSxVQUFBLFNBQUFxWSxFQUFBN1csSUFJQWEsRUFBQWIsR0FHQXJELEVBQUFELFFBQUFtRSxrQkNoQkEsbUJBQUF2RCxPQUFBWSxPQUVBdkIsRUFBQUQsUUFBQSxTQUFBZ1ksRUFBQUMsR0FDQUQsRUFBQUUsT0FBQUQsRUFDQUQsRUFBQWxXLFVBQUFsQixPQUFBWSxPQUFBeVcsRUFBQW5XLFVBQUEsQ0FDQWlELFlBQUEsQ0FDQTVELE1BQUE2VyxFQUNBbFgsWUFBQSxFQUNBMEMsVUFBQSxFQUNBRCxjQUFBLE1BTUF0RCxFQUFBRCxRQUFBLFNBQUFnWSxFQUFBQyxHQUNBRCxFQUFBRSxPQUFBRCxFQUNBLElBQUFFLEVBQUEsYUFDQUEsRUFBQXJXLFVBQUFtVyxFQUFBblcsVUFDQWtXLEVBQUFsVyxVQUFBLElBQUFxVyxFQUNBSCxFQUFBbFcsVUFBQWlELFlBQUFpVCxxQkNwQkEsU0FBQTNTLEdBd0dBLFNBQUFnVixFQUFBMVosR0FDQSxPQUFBQyxPQUFBa0IsVUFBQXlGLFNBQUFsSCxLQUFBTSxHQTNFQVgsRUFBQW1GLFFBTkEsU0FBQTNDLEdBQ0EsT0FBQXdMLE1BQUE3SSxRQUNBNkksTUFBQTdJLFFBQUEzQyxHQUVBLG1CQUFBNlgsRUFBQTdYLElBT0F4QyxFQUFBc2EsVUFIQSxTQUFBOVgsR0FDQSx3QkFBQUEsR0FPQXhDLEVBQUF1YSxPQUhBLFNBQUEvWCxHQUNBLGNBQUFBLEdBT0F4QyxFQUFBd2Esa0JBSEEsU0FBQWhZLEdBQ0EsYUFBQUEsR0FPQXhDLEVBQUF5YSxTQUhBLFNBQUFqWSxHQUNBLHVCQUFBQSxHQU9BeEMsRUFBQTBhLFNBSEEsU0FBQWxZLEdBQ0EsdUJBQUFBLEdBT0F4QyxFQUFBMmEsU0FIQSxTQUFBblksR0FDQSx1QkFBQUEsR0FPQXhDLEVBQUE0YSxZQUhBLFNBQUFwWSxHQUNBLGdCQUFBQSxHQU9BeEMsRUFBQTZhLFNBSEEsU0FBQUMsR0FDQSwwQkFBQVQsRUFBQVMsSUFPQTlhLEVBQUErYSxTQUhBLFNBQUF2WSxHQUNBLHVCQUFBQSxHQUFBLE9BQUFBLEdBT0F4QyxFQUFBZ2IsT0FIQSxTQUFBeGEsR0FDQSx3QkFBQTZaLEVBQUE3WixJQU9BUixFQUFBaWIsUUFIQSxTQUFBMVcsR0FDQSx5QkFBQThWLEVBQUE5VixpQkFBQXFCLE9BT0E1RixFQUFBa2IsV0FIQSxTQUFBMVksR0FDQSx5QkFBQUEsR0FZQXhDLEVBQUFtYixZQVJBLFNBQUEzWSxHQUNBLGNBQUFBLEdBQ0Esa0JBQUFBLEdBQ0EsaUJBQUFBLEdBQ0EsaUJBQUFBLEdBQ0EsaUJBQUFBLFFBQ0EsSUFBQUEsR0FJQXhDLEVBQUE0RyxTQUFBdkIsRUFBQXVCLGtEQzlGQTNHLEVBQUFELFFBUkEsU0FBQStDLEdBQ0EsWUFBQUEsRUFDQSxVQUFBcVksZUFBQSw2REFHQSxPQUFBclksa0JDTEEsU0FBQXNZLEVBQUExYSxFQUFBcUIsR0FNQSxPQUxBL0IsRUFBQUQsUUFBQXFiLEVBQUF6YSxPQUFBOEQsZ0JBQUEsU0FBQS9ELEVBQUFxQixHQUVBLE9BREFyQixFQUFBaUUsVUFBQTVDLEVBQ0FyQixHQUdBMGEsRUFBQTFhLEVBQUFxQixHQUdBL0IsRUFBQUQsUUFBQXFiLG1CQ1JBLElBQUFyVSxFQUFhbEgsRUFBUSxJQUNyQnVGLEVBQUEyQixFQUFBM0IsT0FHQSxTQUFBaVcsRUFBQWpKLEVBQUFDLEdBQ0EsUUFBQTdRLEtBQUE0USxFQUNBQyxFQUFBN1EsR0FBQTRRLEVBQUE1USxHQVdBLFNBQUE4WixFQUFBL1ksRUFBQW1ELEVBQUE1QixHQUNBLE9BQUFzQixFQUFBN0MsRUFBQW1ELEVBQUE1QixHQVRBc0IsRUFBQVMsTUFBQVQsRUFBQXNHLE9BQUF0RyxFQUFBUSxhQUFBUixFQUFBK0csZ0JBQ0FuTSxFQUFBRCxRQUFBZ0gsR0FHQXNVLEVBQUF0VSxFQUFBaEgsR0FDQUEsRUFBQXFGLE9BQUFrVyxHQVFBRCxFQUFBalcsRUFBQWtXLEdBRUFBLEVBQUF6VixLQUFBLFNBQUF0RCxFQUFBbUQsRUFBQTVCLEdBQ0Esb0JBQUF2QixFQUNBLFVBQUFtQixVQUFBLGlDQUVBLE9BQUEwQixFQUFBN0MsRUFBQW1ELEVBQUE1QixJQUdBd1gsRUFBQTVQLE1BQUEsU0FBQXJFLEVBQUE2RSxFQUFBN0YsR0FDQSxvQkFBQWdCLEVBQ0EsVUFBQTNELFVBQUEsNkJBRUEsSUFBQWdGLEVBQUF0RCxFQUFBaUMsR0FVQSxZQVRBakUsSUFBQThJLEVBQ0EsaUJBQUE3RixFQUNBcUMsRUFBQXdELE9BQUE3RixHQUVBcUMsRUFBQXdELFFBR0F4RCxFQUFBd0QsS0FBQSxHQUVBeEQsR0FHQTRTLEVBQUExVixZQUFBLFNBQUF5QixHQUNBLG9CQUFBQSxFQUNBLFVBQUEzRCxVQUFBLDZCQUVBLE9BQUEwQixFQUFBaUMsSUFHQWlVLEVBQUFuUCxnQkFBQSxTQUFBOUUsR0FDQSxvQkFBQUEsRUFDQSxVQUFBM0QsVUFBQSw2QkFFQSxPQUFBcUQsRUFBQTBFLFdBQUFwRSxzQkNyREEsSUFBQWtVLEVBQUEsU0FBQXhiLEdBQ0EsYUFFQSxJQUVBcUQsRUFGQW9ZLEVBQUE3YSxPQUFBa0IsVUFDQTRaLEVBQUFELEVBQUExWixlQUVBNFosRUFBQSxtQkFBQTFhLGNBQUEsR0FDQTJhLEVBQUFELEVBQUF2QixVQUFBLGFBQ0F5QixFQUFBRixFQUFBRyxlQUFBLGtCQUNBQyxFQUFBSixFQUFBemEsYUFBQSxnQkFFQSxTQUFBOGEsRUFBQUMsRUFBQUMsRUFBQW5aLEVBQUFvWixHQUVBLElBQUFDLEVBQUFGLEtBQUFwYSxxQkFBQXVhLEVBQUFILEVBQUFHLEVBQ0FDLEVBQUExYixPQUFBWSxPQUFBNGEsRUFBQXRhLFdBQ0FpVixFQUFBLElBQUF3RixFQUFBSixHQUFBLElBTUEsT0FGQUcsRUFBQUUsUUFrTUEsU0FBQVAsRUFBQWxaLEVBQUFnVSxHQUNBLElBQUFoQixFQUFBMEcsRUFFQSxnQkFBQXpKLEVBQUF4USxHQUNBLEdBQUF1VCxJQUFBMkcsRUFDQSxVQUFBOVcsTUFBQSxnQ0FHQSxHQUFBbVEsSUFBQTRHLEVBQUEsQ0FDQSxhQUFBM0osRUFDQSxNQUFBeFEsRUFLQSxPQUFBb2EsSUFNQSxJQUhBN0YsRUFBQS9ELFNBQ0ErRCxFQUFBdlUsUUFFQSxDQUNBLElBQUFxYSxFQUFBOUYsRUFBQThGLFNBQ0EsR0FBQUEsRUFBQSxDQUNBLElBQUFDLEVBQUFDLEVBQUFGLEVBQUE5RixHQUNBLEdBQUErRixFQUFBLENBQ0EsR0FBQUEsSUFBQUUsRUFBQSxTQUNBLE9BQUFGLEdBSUEsWUFBQS9GLEVBQUEvRCxPQUdBK0QsRUFBQWtHLEtBQUFsRyxFQUFBbUcsTUFBQW5HLEVBQUF2VSxTQUVTLGFBQUF1VSxFQUFBL0QsT0FBQSxDQUNULEdBQUErQyxJQUFBMEcsRUFFQSxNQURBMUcsRUFBQTRHLEVBQ0E1RixFQUFBdlUsSUFHQXVVLEVBQUFvRyxrQkFBQXBHLEVBQUF2VSxTQUVTLFdBQUF1VSxFQUFBL0QsUUFDVCtELEVBQUFxRyxPQUFBLFNBQUFyRyxFQUFBdlUsS0FHQXVULEVBQUEyRyxFQUVBLElBQUFXLEVBQUFDLEVBQUFyQixFQUFBbFosRUFBQWdVLEdBQ0EsY0FBQXNHLEVBQUFuVyxLQUFBLENBT0EsR0FKQTZPLEVBQUFnQixFQUFBcFUsS0FDQWdhLEVBQ0FZLEVBRUFGLEVBQUE3YSxNQUFBd2EsRUFDQSxTQUdBLE9BQ0E3YixNQUFBa2MsRUFBQTdhLElBQ0FHLEtBQUFvVSxFQUFBcFUsTUFHUyxVQUFBMGEsRUFBQW5XLE9BQ1Q2TyxFQUFBNEcsRUFHQTVGLEVBQUEvRCxPQUFBLFFBQ0ErRCxFQUFBdlUsSUFBQTZhLEVBQUE3YSxPQTFRQWdiLENBQUF2QixFQUFBbFosRUFBQWdVLEdBRUF1RixFQWNBLFNBQUFnQixFQUFBeGEsRUFBQVEsRUFBQWQsR0FDQSxJQUNBLE9BQWMwRSxLQUFBLFNBQUExRSxJQUFBTSxFQUFBekMsS0FBQWlELEVBQUFkLElBQ1QsTUFBQVksR0FDTCxPQUFjOEQsS0FBQSxRQUFBMUUsSUFBQVksSUFoQmRwRCxFQUFBZ2MsT0FvQkEsSUFBQVMsRUFBQSxpQkFDQWMsRUFBQSxpQkFDQWIsRUFBQSxZQUNBQyxFQUFBLFlBSUFLLEVBQUEsR0FNQSxTQUFBWCxLQUNBLFNBQUFvQixLQUNBLFNBQUFDLEtBSUEsSUFBQUMsRUFBQSxHQUNBQSxFQUFBL0IsR0FBQSxXQUNBLE9BQUE1WSxNQUdBLElBQUE0YSxFQUFBaGQsT0FBQStELGVBQ0FrWixFQUFBRCxPQUFBRSxFQUFBLE1BQ0FELEdBQ0FBLElBQUFwQyxHQUNBQyxFQUFBcmIsS0FBQXdkLEVBQUFqQyxLQUdBK0IsRUFBQUUsR0FHQSxJQUFBRSxFQUFBTCxFQUFBNWIsVUFDQXVhLEVBQUF2YSxVQUFBbEIsT0FBQVksT0FBQW1jLEdBUUEsU0FBQUssRUFBQWxjLEdBQ0EsMEJBQUFtYyxRQUFBLFNBQUFqTCxHQUNBbFIsRUFBQWtSLEdBQUEsU0FBQXhRLEdBQ0EsT0FBQVEsS0FBQXdaLFFBQUF4SixFQUFBeFEsTUFvQ0EsU0FBQTBiLEVBQUE1QixHQWdDQSxJQUFBNkIsRUFnQ0FuYixLQUFBd1osUUE5QkEsU0FBQXhKLEVBQUF4USxHQUNBLFNBQUE0YixJQUNBLFdBQUF4YixRQUFBLFNBQUFSLEVBQUFDLElBbkNBLFNBQUFnYyxFQUFBckwsRUFBQXhRLEVBQUFKLEVBQUFDLEdBQ0EsSUFBQWdiLEVBQUFDLEVBQUFoQixFQUFBdEosR0FBQXNKLEVBQUE5WixHQUNBLGFBQUE2YSxFQUFBblcsS0FFTyxDQUNQLElBQUFvWCxFQUFBakIsRUFBQTdhLElBQ0FyQixFQUFBbWQsRUFBQW5kLE1BQ0EsT0FBQUEsR0FDQSxpQkFBQUEsR0FDQXVhLEVBQUFyYixLQUFBYyxFQUFBLFdBQ0F5QixRQUFBUixRQUFBakIsRUFBQW9kLFNBQUExYixLQUFBLFNBQUExQixHQUNBa2QsRUFBQSxPQUFBbGQsRUFBQWlCLEVBQUFDLElBQ1csU0FBQWUsR0FDWGliLEVBQUEsUUFBQWpiLEVBQUFoQixFQUFBQyxLQUlBTyxRQUFBUixRQUFBakIsR0FBQTBCLEtBQUEsU0FBQTJiLEdBSUFGLEVBQUFuZCxNQUFBcWQsRUFDQXBjLEVBQUFrYyxJQUNTLFNBQUE1YixHQUdULE9BQUEyYixFQUFBLFFBQUEzYixFQUFBTixFQUFBQyxLQXZCQUEsRUFBQWdiLEVBQUE3YSxLQWlDQTZiLENBQUFyTCxFQUFBeFEsRUFBQUosRUFBQUMsS0FJQSxPQUFBOGIsRUFhQUEsSUFBQXRiLEtBQ0F1YixFQUdBQSxHQUNBQSxLQStHQSxTQUFBckIsRUFBQUYsRUFBQTlGLEdBQ0EsSUFBQS9ELEVBQUE2SixFQUFBekMsU0FBQXJELEVBQUEvRCxRQUNBLEdBQUFBLElBQUEzUCxFQUFBLENBS0EsR0FGQTBULEVBQUE4RixTQUFBLEtBRUEsVUFBQTlGLEVBQUEvRCxPQUFBLENBRUEsR0FBQTZKLEVBQUF6QyxTQUFBLFNBR0FyRCxFQUFBL0QsT0FBQSxTQUNBK0QsRUFBQXZVLElBQUFhLEVBQ0EwWixFQUFBRixFQUFBOUYsR0FFQSxVQUFBQSxFQUFBL0QsUUFHQSxPQUFBZ0ssRUFJQWpHLEVBQUEvRCxPQUFBLFFBQ0ErRCxFQUFBdlUsSUFBQSxJQUFBbUIsVUFDQSxrREFHQSxPQUFBcVosRUFHQSxJQUFBSyxFQUFBQyxFQUFBdEssRUFBQTZKLEVBQUF6QyxTQUFBckQsRUFBQXZVLEtBRUEsYUFBQTZhLEVBQUFuVyxLQUlBLE9BSEE2UCxFQUFBL0QsT0FBQSxRQUNBK0QsRUFBQXZVLElBQUE2YSxFQUFBN2EsSUFDQXVVLEVBQUE4RixTQUFBLEtBQ0FHLEVBR0EsSUFBQXZhLEVBQUE0YSxFQUFBN2EsSUFFQSxPQUFBQyxFQU9BQSxFQUFBRSxNQUdBb1UsRUFBQThGLEVBQUE0QixZQUFBaGMsRUFBQXRCLE1BR0E0VixFQUFBMkgsS0FBQTdCLEVBQUE4QixRQVFBLFdBQUE1SCxFQUFBL0QsU0FDQStELEVBQUEvRCxPQUFBLE9BQ0ErRCxFQUFBdlUsSUFBQWEsR0FVQTBULEVBQUE4RixTQUFBLEtBQ0FHLEdBTkF2YSxHQTNCQXNVLEVBQUEvRCxPQUFBLFFBQ0ErRCxFQUFBdlUsSUFBQSxJQUFBbUIsVUFBQSxvQ0FDQW9ULEVBQUE4RixTQUFBLEtBQ0FHLEdBb0RBLFNBQUE0QixFQUFBQyxHQUNBLElBQUFDLEVBQUEsQ0FBaUJDLE9BQUFGLEVBQUEsSUFFakIsS0FBQUEsSUFDQUMsRUFBQUUsU0FBQUgsRUFBQSxJQUdBLEtBQUFBLElBQ0FDLEVBQUFHLFdBQUFKLEVBQUEsR0FDQUMsRUFBQUksU0FBQUwsRUFBQSxJQUdBN2IsS0FBQW1jLFdBQUF0VixLQUFBaVYsR0FHQSxTQUFBTSxFQUFBTixHQUNBLElBQUF6QixFQUFBeUIsRUFBQU8sWUFBQSxHQUNBaEMsRUFBQW5XLEtBQUEsZ0JBQ0FtVyxFQUFBN2EsSUFDQXNjLEVBQUFPLFdBQUFoQyxFQUdBLFNBQUFkLEVBQUFKLEdBSUFuWixLQUFBbWMsV0FBQSxFQUF3QkosT0FBQSxTQUN4QjVDLEVBQUE4QixRQUFBVyxFQUFBNWIsTUFDQUEsS0FBQXNjLE9BQUEsR0E4QkEsU0FBQXhCLEVBQUF5QixHQUNBLEdBQUFBLEVBQUEsQ0FDQSxJQUFBQyxFQUFBRCxFQUFBM0QsR0FDQSxHQUFBNEQsRUFDQSxPQUFBQSxFQUFBbmYsS0FBQWtmLEdBR0Esc0JBQUFBLEVBQUFiLEtBQ0EsT0FBQWEsRUFHQSxJQUFBdFgsTUFBQXNYLEVBQUF4YixRQUFBLENBQ0EsSUFBQTdELEdBQUEsRUFBQXdlLEVBQUEsU0FBQUEsSUFDQSxPQUFBeGUsRUFBQXFmLEVBQUF4YixRQUNBLEdBQUEyWCxFQUFBcmIsS0FBQWtmLEVBQUFyZixHQUdBLE9BRkF3ZSxFQUFBdmQsTUFBQW9lLEVBQUFyZixHQUNBd2UsRUFBQS9iLE1BQUEsRUFDQStiLEVBT0EsT0FIQUEsRUFBQXZkLE1BQUFrQyxFQUNBcWIsRUFBQS9iLE1BQUEsRUFFQStiLEdBR0EsT0FBQUEsVUFLQSxPQUFZQSxLQUFBOUIsR0FJWixTQUFBQSxJQUNBLE9BQVl6YixNQUFBa0MsRUFBQVYsTUFBQSxHQStNWixPQXhtQkE4YSxFQUFBM2IsVUFBQWljLEVBQUFoWixZQUFBMlksRUFDQUEsRUFBQTNZLFlBQUEwWSxFQUNBQyxFQUFBM0IsR0FDQTBCLEVBQUFnQyxZQUFBLG9CQVlBemYsRUFBQTBmLG9CQUFBLFNBQUFDLEdBQ0EsSUFBQTNILEVBQUEsbUJBQUEySCxLQUFBNWEsWUFDQSxRQUFBaVQsSUFDQUEsSUFBQXlGLEdBR0EsdUJBQUF6RixFQUFBeUgsYUFBQXpILEVBQUF2WCxRQUlBVCxFQUFBNGYsS0FBQSxTQUFBRCxHQVVBLE9BVEEvZSxPQUFBOEQsZUFDQTlELE9BQUE4RCxlQUFBaWIsRUFBQWpDLElBRUFpQyxFQUFBL2EsVUFBQThZLEVBQ0EzQixLQUFBNEQsSUFDQUEsRUFBQTVELEdBQUEsc0JBR0E0RCxFQUFBN2QsVUFBQWxCLE9BQUFZLE9BQUF1YyxHQUNBNEIsR0FPQTNmLEVBQUE2ZixNQUFBLFNBQUFyZCxHQUNBLE9BQVkrYixRQUFBL2IsSUFzRVp3YixFQUFBRSxFQUFBcGMsV0FDQW9jLEVBQUFwYyxVQUFBK1osR0FBQSxXQUNBLE9BQUE3WSxNQUVBaEQsRUFBQWtlLGdCQUtBbGUsRUFBQThmLE1BQUEsU0FBQTdELEVBQUFDLEVBQUFuWixFQUFBb1osR0FDQSxJQUFBNEQsRUFBQSxJQUFBN0IsRUFDQWxDLEVBQUFDLEVBQUFDLEVBQUFuWixFQUFBb1osSUFHQSxPQUFBbmMsRUFBQTBmLG9CQUFBeEQsR0FDQTZELEVBQ0FBLEVBQUFyQixPQUFBN2IsS0FBQSxTQUFBeWIsR0FDQSxPQUFBQSxFQUFBM2IsS0FBQTJiLEVBQUFuZCxNQUFBNGUsRUFBQXJCLFVBdUtBVixFQUFBRCxHQUVBQSxFQUFBaEMsR0FBQSxZQU9BZ0MsRUFBQW5DLEdBQUEsV0FDQSxPQUFBNVksTUFHQSthLEVBQUF4VyxTQUFBLFdBQ0EsNEJBa0NBdkgsRUFBQXlTLEtBQUEsU0FBQTdRLEdBQ0EsSUFBQTZRLEVBQUEsR0FDQSxRQUFBaFIsS0FBQUcsRUFDQTZRLEVBQUE1SSxLQUFBcEksR0FNQSxPQUpBZ1IsRUFBQXVOLFVBSUEsU0FBQXRCLElBQ0EsS0FBQWpNLEVBQUExTyxRQUFBLENBQ0EsSUFBQXRDLEVBQUFnUixFQUFBaUYsTUFDQSxHQUFBalcsS0FBQUcsRUFHQSxPQUZBOGMsRUFBQXZkLE1BQUFNLEVBQ0FpZCxFQUFBL2IsTUFBQSxFQUNBK2IsRUFRQSxPQURBQSxFQUFBL2IsTUFBQSxFQUNBK2IsSUFzQ0ExZSxFQUFBOGQsU0FNQXZCLEVBQUF6YSxVQUFBLENBQ0FpRCxZQUFBd1gsRUFFQStDLE1BQUEsU0FBQVcsR0FjQSxHQWJBamQsS0FBQWtkLEtBQUEsRUFDQWxkLEtBQUEwYixLQUFBLEVBR0ExYixLQUFBaWEsS0FBQWphLEtBQUFrYSxNQUFBN1osRUFDQUwsS0FBQUwsTUFBQSxFQUNBSyxLQUFBNlosU0FBQSxLQUVBN1osS0FBQWdRLE9BQUEsT0FDQWhRLEtBQUFSLElBQUFhLEVBRUFMLEtBQUFtYyxXQUFBbEIsUUFBQW1CLElBRUFhLEVBQ0EsUUFBQXhmLEtBQUF1QyxLQUVBLE1BQUF2QyxFQUFBMGYsT0FBQSxJQUNBekUsRUFBQXJiLEtBQUEyQyxLQUFBdkMsS0FDQXdILE9BQUF4SCxFQUFBaUcsTUFBQSxNQUNBMUQsS0FBQXZDLEdBQUE0QyxJQU1BK2MsS0FBQSxXQUNBcGQsS0FBQUwsTUFBQSxFQUVBLElBQ0EwZCxFQURBcmQsS0FBQW1jLFdBQUEsR0FDQUUsV0FDQSxhQUFBZ0IsRUFBQW5aLEtBQ0EsTUFBQW1aLEVBQUE3ZCxJQUdBLE9BQUFRLEtBQUFzZCxNQUdBbkQsa0JBQUEsU0FBQW9ELEdBQ0EsR0FBQXZkLEtBQUFMLEtBQ0EsTUFBQTRkLEVBR0EsSUFBQXhKLEVBQUEvVCxLQUNBLFNBQUF3ZCxFQUFBQyxFQUFBQyxHQVlBLE9BWEFyRCxFQUFBblcsS0FBQSxRQUNBbVcsRUFBQTdhLElBQUErZCxFQUNBeEosRUFBQTJILEtBQUErQixFQUVBQyxJQUdBM0osRUFBQS9ELE9BQUEsT0FDQStELEVBQUF2VSxJQUFBYSxLQUdBcWQsRUFHQSxRQUFBeGdCLEVBQUE4QyxLQUFBbWMsV0FBQXBiLE9BQUEsRUFBOEM3RCxHQUFBLElBQVFBLEVBQUEsQ0FDdEQsSUFBQTRlLEVBQUE5YixLQUFBbWMsV0FBQWpmLEdBQ0FtZCxFQUFBeUIsRUFBQU8sV0FFQSxZQUFBUCxFQUFBQyxPQUlBLE9BQUF5QixFQUFBLE9BR0EsR0FBQTFCLEVBQUFDLFFBQUEvYixLQUFBa2QsS0FBQSxDQUNBLElBQUFTLEVBQUFqRixFQUFBcmIsS0FBQXllLEVBQUEsWUFDQThCLEVBQUFsRixFQUFBcmIsS0FBQXllLEVBQUEsY0FFQSxHQUFBNkIsR0FBQUMsRUFBQSxDQUNBLEdBQUE1ZCxLQUFBa2QsS0FBQXBCLEVBQUFFLFNBQ0EsT0FBQXdCLEVBQUExQixFQUFBRSxVQUFBLEdBQ2EsR0FBQWhjLEtBQUFrZCxLQUFBcEIsRUFBQUcsV0FDYixPQUFBdUIsRUFBQTFCLEVBQUFHLGlCQUdXLEdBQUEwQixHQUNYLEdBQUEzZCxLQUFBa2QsS0FBQXBCLEVBQUFFLFNBQ0EsT0FBQXdCLEVBQUExQixFQUFBRSxVQUFBLE9BR1csS0FBQTRCLEVBTVgsVUFBQWhiLE1BQUEsMENBTEEsR0FBQTVDLEtBQUFrZCxLQUFBcEIsRUFBQUcsV0FDQSxPQUFBdUIsRUFBQTFCLEVBQUFHLGdCQVVBN0IsT0FBQSxTQUFBbFcsRUFBQTFFLEdBQ0EsUUFBQXRDLEVBQUE4QyxLQUFBbWMsV0FBQXBiLE9BQUEsRUFBOEM3RCxHQUFBLElBQVFBLEVBQUEsQ0FDdEQsSUFBQTRlLEVBQUE5YixLQUFBbWMsV0FBQWpmLEdBQ0EsR0FBQTRlLEVBQUFDLFFBQUEvYixLQUFBa2QsTUFDQXhFLEVBQUFyYixLQUFBeWUsRUFBQSxlQUNBOWIsS0FBQWtkLEtBQUFwQixFQUFBRyxXQUFBLENBQ0EsSUFBQTRCLEVBQUEvQixFQUNBLE9BSUErQixJQUNBLFVBQUEzWixHQUNBLGFBQUFBLElBQ0EyWixFQUFBOUIsUUFBQXZjLEdBQ0FBLEdBQUFxZSxFQUFBNUIsYUFHQTRCLEVBQUEsTUFHQSxJQUFBeEQsRUFBQXdELElBQUF4QixXQUFBLEdBSUEsT0FIQWhDLEVBQUFuVyxPQUNBbVcsRUFBQTdhLE1BRUFxZSxHQUNBN2QsS0FBQWdRLE9BQUEsT0FDQWhRLEtBQUEwYixLQUFBbUMsRUFBQTVCLFdBQ0FqQyxHQUdBaGEsS0FBQThkLFNBQUF6RCxJQUdBeUQsU0FBQSxTQUFBekQsRUFBQTZCLEdBQ0EsYUFBQTdCLEVBQUFuVyxLQUNBLE1BQUFtVyxFQUFBN2EsSUFjQSxNQVhBLFVBQUE2YSxFQUFBblcsTUFDQSxhQUFBbVcsRUFBQW5XLEtBQ0FsRSxLQUFBMGIsS0FBQXJCLEVBQUE3YSxJQUNPLFdBQUE2YSxFQUFBblcsTUFDUGxFLEtBQUFzZCxLQUFBdGQsS0FBQVIsSUFBQTZhLEVBQUE3YSxJQUNBUSxLQUFBZ1EsT0FBQSxTQUNBaFEsS0FBQTBiLEtBQUEsT0FDTyxXQUFBckIsRUFBQW5XLE1BQUFnWSxJQUNQbGMsS0FBQTBiLEtBQUFRLEdBR0FsQyxHQUdBK0QsT0FBQSxTQUFBOUIsR0FDQSxRQUFBL2UsRUFBQThDLEtBQUFtYyxXQUFBcGIsT0FBQSxFQUE4QzdELEdBQUEsSUFBUUEsRUFBQSxDQUN0RCxJQUFBNGUsRUFBQTliLEtBQUFtYyxXQUFBamYsR0FDQSxHQUFBNGUsRUFBQUcsZUFHQSxPQUZBamMsS0FBQThkLFNBQUFoQyxFQUFBTyxXQUFBUCxFQUFBSSxVQUNBRSxFQUFBTixHQUNBOUIsSUFLQWdFLE1BQUEsU0FBQWpDLEdBQ0EsUUFBQTdlLEVBQUE4QyxLQUFBbWMsV0FBQXBiLE9BQUEsRUFBOEM3RCxHQUFBLElBQVFBLEVBQUEsQ0FDdEQsSUFBQTRlLEVBQUE5YixLQUFBbWMsV0FBQWpmLEdBQ0EsR0FBQTRlLEVBQUFDLFdBQUEsQ0FDQSxJQUFBMUIsRUFBQXlCLEVBQUFPLFdBQ0EsYUFBQWhDLEVBQUFuVyxLQUFBLENBQ0EsSUFBQStaLEVBQUE1RCxFQUFBN2EsSUFDQTRjLEVBQUFOLEdBRUEsT0FBQW1DLEdBTUEsVUFBQXJiLE1BQUEsMEJBR0FzYixjQUFBLFNBQUEzQixFQUFBZCxFQUFBRSxHQWFBLE9BWkEzYixLQUFBNlosU0FBQSxDQUNBekMsU0FBQTBELEVBQUF5QixHQUNBZCxhQUNBRSxXQUdBLFNBQUEzYixLQUFBZ1EsU0FHQWhRLEtBQUFSLElBQUFhLEdBR0EyWixJQVFBaGQsRUF2ckJBLENBOHJCNEJDLEVBQUFELFNBRzVCLElBQ0FtaEIsbUJBQUEzRixFQUNDLE1BQUE0RixHQVVEOWMsU0FBQSw2QkFBQUEsQ0FBQWtYLG1DQ3B0QkEsU0FBQWxELElBRUFBLEVBQUF1QixTQUNBLElBQUF2QixFQUFBdUIsUUFBQTFSLFFBQUEsUUFDQSxJQUFBbVEsRUFBQXVCLFFBQUExUixRQUFBLFlBQUFtUSxFQUFBdUIsUUFBQTFSLFFBQUEsU0FDQWxJLEVBQUFELFFBQUEsQ0FBb0J3VCxTQUtwQixTQUFBMVEsRUFBQXVlLEVBQUFDLEVBQUFDLEdBQ0Esc0JBQUF6ZSxFQUNBLFVBQUFhLFVBQUEsMENBRUEsSUFDQVYsRUFBQS9DLEVBREEyRyxFQUFBM0QsVUFBQWEsT0FFQSxPQUFBOEMsR0FDQSxPQUNBLE9BQ0EsT0FBQXlSLEVBQUE5RSxTQUFBMVEsR0FDQSxPQUNBLE9BQUF3VixFQUFBOUUsU0FBQSxXQUNBMVEsRUFBQXpDLEtBQUEsS0FBQWdoQixLQUVBLE9BQ0EsT0FBQS9JLEVBQUE5RSxTQUFBLFdBQ0ExUSxFQUFBekMsS0FBQSxLQUFBZ2hCLEVBQUFDLEtBRUEsT0FDQSxPQUFBaEosRUFBQTlFLFNBQUEsV0FDQTFRLEVBQUF6QyxLQUFBLEtBQUFnaEIsRUFBQUMsRUFBQUMsS0FFQSxRQUdBLElBRkF0ZSxFQUFBLElBQUErSyxNQUFBbkgsRUFBQSxHQUNBM0csRUFBQSxFQUNBQSxFQUFBK0MsRUFBQWMsUUFDQWQsRUFBQS9DLEtBQUFnRCxVQUFBaEQsR0FFQSxPQUFBb1ksRUFBQTlFLFNBQUEsV0FDQTFRLEVBQUFLLE1BQUEsS0FBQUYsUUFoQ0FoRCxFQUFBRCxRQUFBc1ksc0NDTkEsSUFBQXRSLEVBQWFsSCxFQUFRLElBQ3JCdUYsRUFBQTJCLEVBQUEzQixPQUdBLFNBQUFpVyxFQUFBakosRUFBQUMsR0FDQSxRQUFBN1EsS0FBQTRRLEVBQ0FDLEVBQUE3USxHQUFBNFEsRUFBQTVRLEdBV0EsU0FBQThaLEVBQUEvWSxFQUFBbUQsRUFBQTVCLEdBQ0EsT0FBQXNCLEVBQUE3QyxFQUFBbUQsRUFBQTVCLEdBVEFzQixFQUFBUyxNQUFBVCxFQUFBc0csT0FBQXRHLEVBQUFRLGFBQUFSLEVBQUErRyxnQkFDQW5NLEVBQUFELFFBQUFnSCxHQUdBc1UsRUFBQXRVLEVBQUFoSCxHQUNBQSxFQUFBcUYsT0FBQWtXLEdBUUFELEVBQUFqVyxFQUFBa1csR0FFQUEsRUFBQXpWLEtBQUEsU0FBQXRELEVBQUFtRCxFQUFBNUIsR0FDQSxvQkFBQXZCLEVBQ0EsVUFBQW1CLFVBQUEsaUNBRUEsT0FBQTBCLEVBQUE3QyxFQUFBbUQsRUFBQTVCLElBR0F3WCxFQUFBNVAsTUFBQSxTQUFBckUsRUFBQTZFLEVBQUE3RixHQUNBLG9CQUFBZ0IsRUFDQSxVQUFBM0QsVUFBQSw2QkFFQSxJQUFBZ0YsRUFBQXRELEVBQUFpQyxHQVVBLFlBVEFqRSxJQUFBOEksRUFDQSxpQkFBQTdGLEVBQ0FxQyxFQUFBd0QsT0FBQTdGLEdBRUFxQyxFQUFBd0QsUUFHQXhELEVBQUF3RCxLQUFBLEdBRUF4RCxHQUdBNFMsRUFBQTFWLFlBQUEsU0FBQXlCLEdBQ0Esb0JBQUFBLEVBQ0EsVUFBQTNELFVBQUEsNkJBRUEsT0FBQTBCLEVBQUFpQyxJQUdBaVUsRUFBQW5QLGdCQUFBLFNBQUE5RSxHQUNBLG9CQUFBQSxFQUNBLFVBQUEzRCxVQUFBLDZCQUVBLE9BQUFxRCxFQUFBMEUsV0FBQXBFLG1CQzVEQSxJQUFBQyxFQUFBLEdBQWlCQSxTQUVqQnRILEVBQUFELFFBQUFnTyxNQUFBN0ksU0FBQSxTQUFBa0QsR0FDQSx3QkFBQWQsRUFBQWxILEtBQUFnSSxxQkNrQkFwSSxFQUFBRCxRQUFBd2hCLEVBRUEsSUFBQUMsRUFBUzNoQixFQUFRLElBQVEwVSxhQWtCekIsU0FBQWdOLElBQ0FDLEVBQUFwaEIsS0FBQTJDLE1BbEJlbEQsRUFBUSxHQUV2QjhTLENBQUE0TyxFQUFBQyxHQUNBRCxFQUFBM08sU0FBa0IvUyxFQUFRLElBQzFCMGhCLEVBQUExTyxTQUFrQmhULEVBQVEsSUFDMUIwaEIsRUFBQTlPLE9BQWdCNVMsRUFBUSxJQUN4QjBoQixFQUFBRSxVQUFtQjVoQixFQUFRLElBQzNCMGhCLEVBQUFHLFlBQXFCN2hCLEVBQVEsSUFHN0IwaEIsV0FXQUEsRUFBQTFmLFVBQUE4ZixLQUFBLFNBQUFDLEVBQUE1TyxHQUNBLElBQUE2TyxFQUFBOWUsS0FFQSxTQUFBK2UsRUFBQUMsR0FDQUgsRUFBQXJlLFdBQ0EsSUFBQXFlLEVBQUFwYixNQUFBdWIsSUFBQUYsRUFBQUcsT0FDQUgsRUFBQUcsUUFPQSxTQUFBQyxJQUNBSixFQUFBNU8sVUFBQTRPLEVBQUFLLFFBQ0FMLEVBQUFLLFNBSkFMLEVBQUEzSyxHQUFBLE9BQUE0SyxHQVFBRixFQUFBMUssR0FBQSxRQUFBK0ssR0FJQUwsRUFBQU8sVUFBQW5QLElBQUEsSUFBQUEsRUFBQXhJLE1BQ0FxWCxFQUFBM0ssR0FBQSxNQUFBOUQsR0FDQXlPLEVBQUEzSyxHQUFBLFFBQUFrTCxJQUdBLElBQUFDLEdBQUEsRUFDQSxTQUFBalAsSUFDQWlQLElBQ0FBLEdBQUEsRUFFQVQsRUFBQXBYLE9BSUEsU0FBQTRYLElBQ0FDLElBQ0FBLEdBQUEsRUFFQSxtQkFBQVQsRUFBQVUsU0FBQVYsRUFBQVUsV0FJQSxTQUFBQyxFQUFBM0wsR0FFQSxHQURBNEwsSUFDQSxJQUFBaEIsRUFBQWhMLGNBQUF6VCxLQUFBLFNBQ0EsTUFBQTZULEVBUUEsU0FBQTRMLElBQ0FYLEVBQUEzTCxlQUFBLE9BQUE0TCxHQUNBRixFQUFBMUwsZUFBQSxRQUFBK0wsR0FFQUosRUFBQTNMLGVBQUEsTUFBQTlDLEdBQ0F5TyxFQUFBM0wsZUFBQSxRQUFBa00sR0FFQVAsRUFBQTNMLGVBQUEsUUFBQXFNLEdBQ0FYLEVBQUExTCxlQUFBLFFBQUFxTSxHQUVBVixFQUFBM0wsZUFBQSxNQUFBc00sR0FDQVgsRUFBQTNMLGVBQUEsUUFBQXNNLEdBRUFaLEVBQUExTCxlQUFBLFFBQUFzTSxHQVdBLE9BNUJBWCxFQUFBM0ssR0FBQSxRQUFBcUwsR0FDQVgsRUFBQTFLLEdBQUEsUUFBQXFMLEdBbUJBVixFQUFBM0ssR0FBQSxNQUFBc0wsR0FDQVgsRUFBQTNLLEdBQUEsUUFBQXNMLEdBRUFaLEVBQUExSyxHQUFBLFFBQUFzTCxHQUVBWixFQUFBdk0sS0FBQSxPQUFBd00sR0FHQUQscUJDN0hBN2hCLEVBQUFDLEVBQUFELFFBQTJCRixFQUFRLEtBQ25DMGhCLE9BQUF4aEIsRUFDQUEsRUFBQTZTLFNBQUE3UyxFQUNBQSxFQUFBOFMsU0FBbUJoVCxFQUFRLElBQzNCRSxFQUFBMFMsT0FBaUI1UyxFQUFRLElBQ3pCRSxFQUFBMGhCLFVBQW9CNWhCLEVBQVEsSUFDNUJFLEVBQUEyaEIsWUFBc0I3aEIsRUFBUSxtQ0NOOUIsU0FBQXdZLEVBQUFvSyxFQUFBMWQsR0E2QkEsSUFBQXVOLEVBQVV6UyxFQUFRLElBZWxCLFNBQUE2aUIsRUFBQTVNLEdBQ0EsSUFBQTZNLEVBQUE1ZixLQUVBQSxLQUFBMGIsS0FBQSxLQUNBMWIsS0FBQThiLE1BQUEsS0FDQTliLEtBQUErZCxPQUFBLFlBb2xCQSxTQUFBOEIsRUFBQTlNLEVBQUEzUyxHQUNBLElBQUEwYixFQUFBK0QsRUFBQS9ELE1BQ0ErRCxFQUFBL0QsTUFBQSxLQUNBLEtBQUFBLEdBQUEsQ0FDQSxJQUFBaEwsRUFBQWdMLEVBQUFnRSxTQUNBL00sRUFBQWdOLFlBQ0FqUCxFQUFBMVEsR0FDQTBiLElBQUFKLEtBRUEzSSxFQUFBaU4sbUJBQ0FqTixFQUFBaU4sbUJBQUF0RSxLQUFBbUUsRUFFQTlNLEVBQUFpTixtQkFBQUgsRUEvbEJBSSxDQUFBTCxFQUFBN00sSUFsQkE5VixFQUFBRCxRQUFBOFMsRUF3QkEsSUFJQUosRUFKQXdRLEdBQUE1SyxFQUFBb0IsU0FBQSxrQkFBQXZSLFFBQUFtUSxFQUFBdUIsUUFBQW5ULE1BQUEsU0FBQWdjLEVBQUFuUSxFQUFBaUIsU0FPQVYsRUFBQXFRLGdCQUdBLElBQUF4USxFQUFXN1MsRUFBUSxJQUNuQjZTLEVBQUFDLFNBQWdCOVMsRUFBUSxJQUl4QixJQUFBc2pCLEVBQUEsQ0FDQUMsVUFBYXZqQixFQUFRLEtBS3JCMGhCLEVBQWExaEIsRUFBUSxJQUtyQnVGLEVBQWF2RixFQUFRLElBQWF1RixPQUNsQ2llLEVBQUF0ZSxFQUFBVSxZQUFBLGFBVUEsSUEySUE2ZCxFQTNJQUMsRUFBa0IxakIsRUFBUSxJQUkxQixTQUFBMmpCLEtBRUEsU0FBQU4sRUFBQWxRLEVBQUF5USxHQUNBaFIsS0FBcUI1UyxFQUFRLElBRTdCbVQsS0FBQSxHQU9BLElBQUEwUSxFQUFBRCxhQUFBaFIsRUFJQTFQLEtBQUE0Z0IsYUFBQTNRLEVBQUEyUSxXQUVBRCxJQUFBM2dCLEtBQUE0Z0IsV0FBQTVnQixLQUFBNGdCLGNBQUEzUSxFQUFBNFEsb0JBS0EsSUFBQUMsRUFBQTdRLEVBQUFTLGNBQ0FxUSxFQUFBOVEsRUFBQStRLHNCQUNBQyxFQUFBamhCLEtBQUE0Z0IsV0FBQSxTQUVBNWdCLEtBQUEwUSxjQUFBb1EsR0FBQSxJQUFBQSxJQUFpREgsSUFBQUksR0FBQSxJQUFBQSxLQUEwRkUsRUFHM0lqaEIsS0FBQTBRLGNBQUE5SSxLQUFBNEYsTUFBQXhOLEtBQUEwUSxlQUdBMVEsS0FBQWtoQixhQUFBLEVBR0FsaEIsS0FBQW1oQixXQUFBLEVBRUFuaEIsS0FBQW9oQixRQUFBLEVBRUFwaEIsS0FBQXVRLE9BQUEsRUFFQXZRLEtBQUFxaEIsVUFBQSxFQUdBcmhCLEtBQUE0USxXQUFBLEVBS0EsSUFBQTBRLEdBQUEsSUFBQXJSLEVBQUFzUixjQUNBdmhCLEtBQUF1aEIsZUFBQUQsRUFLQXRoQixLQUFBd2hCLGdCQUFBdlIsRUFBQXVSLGlCQUFBLE9BS0F4aEIsS0FBQWUsT0FBQSxFQUdBZixLQUFBeWhCLFNBQUEsRUFHQXpoQixLQUFBMGhCLE9BQUEsRUFNQTFoQixLQUFBMmhCLE1BQUEsRUFLQTNoQixLQUFBNGhCLGtCQUFBLEVBR0E1aEIsS0FBQTZoQixRQUFBLFNBQUFoTyxJQTRSQSxTQUFBNk0sRUFBQTdNLEdBQ0EsSUFBQWQsRUFBQTJOLEVBQUFwUSxlQUNBcVIsRUFBQTVPLEVBQUE0TyxLQUNBN1EsRUFBQWlDLEVBQUErTyxRQUlBLEdBZEEsU0FBQS9PLEdBQ0FBLEVBQUEwTyxTQUFBLEVBQ0ExTyxFQUFBK08sUUFBQSxLQUNBL08sRUFBQWhTLFFBQUFnUyxFQUFBZ1AsU0FDQWhQLEVBQUFnUCxTQUFBLEVBUUFDLENBQUFqUCxHQUVBYyxHQXRDQSxTQUFBNk0sRUFBQTNOLEVBQUE0TyxFQUFBOU4sRUFBQS9DLEtBQ0FpQyxFQUFBZ04sVUFFQTRCLEdBR0FwUyxFQUFBaUIsU0FBQU0sRUFBQStDLEdBR0F0RSxFQUFBaUIsU0FBQXlSLEVBQUF2QixFQUFBM04sR0FDQTJOLEVBQUFwUSxlQUFBNFIsY0FBQSxFQUNBeEIsRUFBQXBPLEtBQUEsUUFBQXVCLEtBSUEvQyxFQUFBK0MsR0FDQTZNLEVBQUFwUSxlQUFBNFIsY0FBQSxFQUNBeEIsRUFBQXBPLEtBQUEsUUFBQXVCLEdBR0FvTyxFQUFBdkIsRUFBQTNOLElBa0JBb1AsQ0FBQXpCLEVBQUEzTixFQUFBNE8sRUFBQTlOLEVBQUEvQyxPQUFvRCxDQUVwRCxJQUFBdVEsRUFBQWUsRUFBQXJQLEdBRUFzTyxHQUFBdE8sRUFBQTJPLFFBQUEzTyxFQUFBNk8sbUJBQUE3TyxFQUFBc1AsaUJBQ0FDLEVBQUE1QixFQUFBM04sR0FHQTRPLEVBRUF6QixFQUFBcUMsRUFBQTdCLEVBQUEzTixFQUFBc08sRUFBQXZRLEdBR0F5UixFQUFBN0IsRUFBQTNOLEVBQUFzTyxFQUFBdlEsSUEvU0ErUSxDQUFBbkIsRUFBQTdNLElBSUE3VCxLQUFBOGhCLFFBQUEsS0FHQTloQixLQUFBK2hCLFNBQUEsRUFFQS9oQixLQUFBcWlCLGdCQUFBLEtBQ0FyaUIsS0FBQXdpQixvQkFBQSxLQUlBeGlCLEtBQUErZixVQUFBLEVBSUEvZixLQUFBeWlCLGFBQUEsRUFHQXppQixLQUFBa2lCLGNBQUEsRUFHQWxpQixLQUFBMGlCLHFCQUFBLEVBSUExaUIsS0FBQWdnQixtQkFBQSxJQUFBTCxFQUFBM2YsTUEwQ0EsU0FBQThQLEVBQUFHLEdBVUEsR0FUQVAsS0FBcUI1UyxFQUFRLE1BUzdCeWpCLEVBQUFsakIsS0FBQXlTLEVBQUE5UCx1QkFBQTBQLEdBQ0EsV0FBQUksRUFBQUcsR0FHQWpRLEtBQUFzUSxlQUFBLElBQUE2UCxFQUFBbFEsRUFBQWpRLE1BR0FBLEtBQUFRLFVBQUEsRUFFQXlQLElBQ0EsbUJBQUFBLEVBQUF4TSxRQUFBekQsS0FBQTJpQixPQUFBMVMsRUFBQXhNLE9BRUEsbUJBQUF3TSxFQUFBMlMsU0FBQTVpQixLQUFBNmlCLFFBQUE1UyxFQUFBMlMsUUFFQSxtQkFBQTNTLEVBQUFzUCxVQUFBdmYsS0FBQTZRLFNBQUFaLEVBQUFzUCxTQUVBLG1CQUFBdFAsRUFBQTZTLFFBQUE5aUIsS0FBQStpQixPQUFBOVMsRUFBQTZTLFFBR0F0RSxFQUFBbmhCLEtBQUEyQyxNQWdKQSxTQUFBZ2pCLEVBQUF0QyxFQUFBM04sRUFBQTZQLEVBQUEvZSxFQUFBbWIsRUFBQTFiLEVBQUF3TixHQUNBaUMsRUFBQWdQLFNBQUFsZSxFQUNBa1AsRUFBQStPLFFBQUFoUixFQUNBaUMsRUFBQTBPLFNBQUEsRUFDQTFPLEVBQUE0TyxNQUFBLEVBQ0FpQixFQUFBbEMsRUFBQW1DLFFBQUE3RCxFQUFBak0sRUFBQThPLFNBQW1EbkIsRUFBQWlDLE9BQUEzRCxFQUFBMWIsRUFBQXlQLEVBQUE4TyxTQUNuRDlPLEVBQUE0TyxNQUFBLEVBMkRBLFNBQUFZLEVBQUE3QixFQUFBM04sRUFBQXNPLEVBQUF2USxHQUNBdVEsR0FTQSxTQUFBWCxFQUFBM04sR0FDQSxJQUFBQSxFQUFBaFMsUUFBQWdTLEVBQUFvTyxZQUNBcE8sRUFBQW9PLFdBQUEsRUFDQVQsRUFBQXBPLEtBQUEsVUFaQTJRLENBQUF2QyxFQUFBM04sR0FDQUEsRUFBQWdOLFlBQ0FqUCxJQUNBbVIsRUFBQXZCLEVBQUEzTixHQWNBLFNBQUF1UCxFQUFBNUIsRUFBQTNOLEdBQ0FBLEVBQUE2TyxrQkFBQSxFQUNBLElBQUE5RixFQUFBL0ksRUFBQXNQLGdCQUVBLEdBQUEzQixFQUFBbUMsU0FBQS9HLEtBQUFKLEtBQUEsQ0FFQSxJQUFBdmUsRUFBQTRWLEVBQUEyUCxxQkFDQTFlLEVBQUEsSUFBQWdILE1BQUE3TixHQUNBK2xCLEVBQUFuUSxFQUFBaU4sbUJBQ0FrRCxFQUFBcEgsUUFJQSxJQUZBLElBQUFuSixFQUFBLEVBQ0F3USxHQUFBLEVBQ0FySCxHQUNBOVgsRUFBQTJPLEdBQUFtSixFQUNBQSxFQUFBc0gsUUFBQUQsR0FBQSxHQUNBckgsSUFBQUosS0FDQS9JLEdBQUEsRUFFQTNPLEVBQUFtZixhQUVBSCxFQUFBdEMsRUFBQTNOLEdBQUEsRUFBQUEsRUFBQWhTLE9BQUFpRCxFQUFBLEdBQUFrZixFQUFBbkYsUUFJQWhMLEVBQUFnTixZQUNBaE4sRUFBQXlQLG9CQUFBLEtBQ0FVLEVBQUF4SCxNQUNBM0ksRUFBQWlOLG1CQUFBa0QsRUFBQXhILEtBQ0F3SCxFQUFBeEgsS0FBQSxNQUVBM0ksRUFBQWlOLG1CQUFBLElBQUFMLEVBQUE1TSxHQUVBQSxFQUFBMlAscUJBQUEsTUFDRyxDQUVILEtBQUE1RyxHQUFBLENBQ0EsSUFBQWtELEVBQUFsRCxFQUFBa0QsTUFDQTFiLEVBQUF3WSxFQUFBeFksU0FDQXdOLEVBQUFnTCxFQUFBZ0UsU0FVQSxHQVBBa0QsRUFBQXRDLEVBQUEzTixHQUFBLEVBRkFBLEVBQUE2TixXQUFBLEVBQUE1QixFQUFBamUsT0FFQWllLEVBQUExYixFQUFBd04sR0FDQWdMLElBQUFKLEtBQ0EzSSxFQUFBMlAsdUJBS0EzUCxFQUFBME8sUUFDQSxNQUlBLE9BQUEzRixJQUFBL0ksRUFBQXlQLG9CQUFBLE1BR0F6UCxFQUFBc1AsZ0JBQUF2RyxFQUNBL0ksRUFBQTZPLGtCQUFBLEVBaUNBLFNBQUFRLEVBQUFyUCxHQUNBLE9BQUFBLEVBQUFxTyxRQUFBLElBQUFyTyxFQUFBaFMsUUFBQSxPQUFBZ1MsRUFBQXNQLGtCQUFBdFAsRUFBQXNPLFdBQUF0TyxFQUFBME8sUUFFQSxTQUFBNEIsRUFBQTNDLEVBQUEzTixHQUNBMk4sRUFBQXFDLE9BQUEsU0FBQTNpQixHQUNBMlMsRUFBQWdOLFlBQ0EzZixHQUNBc2dCLEVBQUFwTyxLQUFBLFFBQUFsUyxHQUVBMlMsRUFBQTBQLGFBQUEsRUFDQS9CLEVBQUFwTyxLQUFBLGFBQ0EyUCxFQUFBdkIsRUFBQTNOLEtBZ0JBLFNBQUFrUCxFQUFBdkIsRUFBQTNOLEdBQ0EsSUFBQXVRLEVBQUFsQixFQUFBclAsR0FRQSxPQVBBdVEsS0FmQSxTQUFBNUMsRUFBQTNOLEdBQ0FBLEVBQUEwUCxhQUFBMVAsRUFBQW1PLGNBQ0EsbUJBQUFSLEVBQUFxQyxRQUNBaFEsRUFBQWdOLFlBQ0FoTixFQUFBbU8sYUFBQSxFQUNBM1IsRUFBQWlCLFNBQUE2UyxFQUFBM0MsRUFBQTNOLEtBRUFBLEVBQUEwUCxhQUFBLEVBQ0EvQixFQUFBcE8sS0FBQSxlQVFBaVIsQ0FBQTdDLEVBQUEzTixHQUNBLElBQUFBLEVBQUFnTixZQUNBaE4sRUFBQXNPLFVBQUEsRUFDQVgsRUFBQXBPLEtBQUEsWUFHQWdSLEVBemhCQTNULEVBQUFDLFNBQUFFLEVBQUEwTyxHQW1IQTJCLEVBQUFyaEIsVUFBQTBrQixVQUFBLFdBR0EsSUFGQSxJQUFBQyxFQUFBempCLEtBQUFxaUIsZ0JBQ0FsWCxFQUFBLEdBQ0FzWSxHQUNBdFksRUFBQXRFLEtBQUE0YyxHQUNBQSxJQUFBL0gsS0FFQSxPQUFBdlEsR0FHQSxXQUNBLElBQ0F2TixPQUFBQyxlQUFBc2lCLEVBQUFyaEIsVUFBQSxVQUNBZixJQUFBcWlCLEVBQUFDLFVBQUEsV0FDQSxPQUFBcmdCLEtBQUF3akIsYUFDTywwRkFFSixNQUFBRSxLQVBILEdBYUEsbUJBQUF6bEIsZUFBQTBsQixhQUFBLG1CQUFBcmlCLFNBQUF4QyxVQUFBYixPQUFBMGxCLGNBQ0FwRCxFQUFBamYsU0FBQXhDLFVBQUFiLE9BQUEwbEIsYUFDQS9sQixPQUFBQyxlQUFBaVMsRUFBQTdSLE9BQUEwbEIsWUFBQSxDQUNBeGxCLE1BQUEsU0FBQVMsR0FDQSxRQUFBMmhCLEVBQUFsakIsS0FBQTJDLEtBQUFwQixJQUNBb0IsT0FBQThQLElBRUFsUixLQUFBMFIsMEJBQUE2UCxPQUlBSSxFQUFBLFNBQUEzaEIsR0FDQSxPQUFBQSxhQUFBb0IsTUFxQ0E4UCxFQUFBaFIsVUFBQThmLEtBQUEsV0FDQTVlLEtBQUFzUyxLQUFBLFlBQUExUCxNQUFBLCtCQThCQWtOLEVBQUFoUixVQUFBMkUsTUFBQSxTQUFBdWIsRUFBQTFiLEVBQUF3TixHQUNBLElBbk9BeFEsRUFtT0F5UyxFQUFBL1MsS0FBQXNRLGVBQ0FwRixHQUFBLEVBQ0FrWSxHQUFBclEsRUFBQTZOLGFBck9BdGdCLEVBcU9BMGUsRUFwT0EzYyxFQUFBdUIsU0FBQXRELGlCQUFBZ2dCLEdBd1BBLE9BbEJBOEMsSUFBQS9nQixFQUFBdUIsU0FBQW9iLEtBQ0FBLEVBM09BLFNBQUFBLEdBQ0EsT0FBQTNjLEVBQUFTLEtBQUFrYyxHQTBPQTRFLENBQUE1RSxJQUdBLG1CQUFBMWIsSUFDQXdOLEVBQUF4TixFQUNBQSxFQUFBLE1BR0E4ZixFQUFBOWYsRUFBQSxTQUFpQ0EsTUFBQXlQLEVBQUF5TyxpQkFFakMsbUJBQUExUSxNQUFBMlAsR0FFQTFOLEVBQUF4QyxNQTdDQSxTQUFBbVEsRUFBQTVQLEdBQ0EsSUFBQStDLEVBQUEsSUFBQWpSLE1BQUEsbUJBRUE4ZCxFQUFBcE8sS0FBQSxRQUFBdUIsR0FDQXRFLEVBQUFpQixTQUFBTSxFQUFBK0MsR0F5Q0FnUSxDQUFBN2pCLEtBQUE4USxJQUEyQ3NTLEdBbkMzQyxTQUFBMUMsRUFBQTNOLEVBQUFpTSxFQUFBbE8sR0FDQSxJQUFBZ1QsR0FBQSxFQUNBalEsR0FBQSxFQVlBLE9BVkEsT0FBQW1MLEVBQ0FuTCxFQUFBLElBQUFsVCxVQUFBLHVDQUNHLGlCQUFBcWUsUUFBQTNlLElBQUEyZSxHQUFBak0sRUFBQTZOLGFBQ0gvTSxFQUFBLElBQUFsVCxVQUFBLG9DQUVBa1QsSUFDQTZNLEVBQUFwTyxLQUFBLFFBQUF1QixHQUNBdEUsRUFBQWlCLFNBQUFNLEVBQUErQyxHQUNBaVEsR0FBQSxHQUVBQSxFQXFCMkNDLENBQUEvakIsS0FBQStTLEVBQUFpTSxFQUFBbE8sTUFDM0NpQyxFQUFBZ04sWUFDQTdVLEVBa0RBLFNBQUF3VixFQUFBM04sRUFBQXFRLEVBQUFwRSxFQUFBMWIsRUFBQXdOLEdBQ0EsSUFBQXNTLEVBQUEsQ0FDQSxJQUFBWSxFQXRCQSxTQUFBalIsRUFBQWlNLEVBQUExYixHQUNBeVAsRUFBQTZOLGFBQUEsSUFBQTdOLEVBQUF3TyxlQUFBLGlCQUFBdkMsSUFDQUEsRUFBQTNjLEVBQUFTLEtBQUFrYyxFQUFBMWIsSUFFQSxPQUFBMGIsRUFrQkFpRixDQUFBbFIsRUFBQWlNLEVBQUExYixHQUNBMGIsSUFBQWdGLElBQ0FaLEdBQUEsRUFDQTlmLEVBQUEsU0FDQTBiLEVBQUFnRixHQUdBLElBQUFuZ0IsRUFBQWtQLEVBQUE2TixXQUFBLEVBQUE1QixFQUFBamUsT0FFQWdTLEVBQUFoUyxRQUFBOEMsRUFFQSxJQUFBcUgsRUFBQTZILEVBQUFoUyxPQUFBZ1MsRUFBQXJDLGNBRUF4RixJQUFBNkgsRUFBQW9PLFdBQUEsR0FFQSxHQUFBcE8sRUFBQTBPLFNBQUExTyxFQUFBMk8sT0FBQSxDQUNBLElBQUF3QyxFQUFBblIsRUFBQXlQLG9CQUNBelAsRUFBQXlQLG9CQUFBLENBQ0F4RCxRQUNBMWIsV0FDQThmLFFBQ0F0RCxTQUFBaFAsRUFDQTRLLEtBQUEsTUFFQXdJLEVBQ0FBLEVBQUF4SSxLQUFBM0ksRUFBQXlQLG9CQUVBelAsRUFBQXNQLGdCQUFBdFAsRUFBQXlQLG9CQUVBelAsRUFBQTJQLHNCQUFBLE9BRUFNLEVBQUF0QyxFQUFBM04sR0FBQSxFQUFBbFAsRUFBQW1iLEVBQUExYixFQUFBd04sR0FHQSxPQUFBNUYsRUF0RkFpWixDQUFBbmtCLEtBQUErUyxFQUFBcVEsRUFBQXBFLEVBQUExYixFQUFBd04sSUFHQTVGLEdBR0E0RSxFQUFBaFIsVUFBQXNsQixLQUFBLFdBQ0Fwa0IsS0FBQXNRLGVBRUFvUixVQUdBNVIsRUFBQWhSLFVBQUF1bEIsT0FBQSxXQUNBLElBQUF0UixFQUFBL1MsS0FBQXNRLGVBRUF5QyxFQUFBMk8sU0FDQTNPLEVBQUEyTyxTQUVBM08sRUFBQTBPLFNBQUExTyxFQUFBMk8sUUFBQTNPLEVBQUFzTyxVQUFBdE8sRUFBQTZPLG1CQUFBN08sRUFBQXNQLGlCQUFBQyxFQUFBdGlCLEtBQUErUyxLQUlBakQsRUFBQWhSLFVBQUF3bEIsbUJBQUEsU0FBQWhoQixHQUdBLEdBREEsaUJBQUFBLFFBQUFzQixpQkFDQSwyRkFBQU8sU0FBQTdCLEVBQUEsSUFBQXNCLGdCQUFBLGFBQUFqRSxVQUFBLHFCQUFBMkMsR0FFQSxPQURBdEQsS0FBQXNRLGVBQUFrUixnQkFBQWxlLEVBQ0F0RCxNQVVBcEMsT0FBQUMsZUFBQWlTLEVBQUFoUixVQUFBLHlCQUlBaEIsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWlDLEtBQUFzUSxlQUFBSSxpQkE4TEFaLEVBQUFoUixVQUFBNmpCLE9BQUEsU0FBQTNELEVBQUExYixFQUFBd04sR0FDQUEsRUFBQSxJQUFBbE8sTUFBQSxpQ0FHQWtOLEVBQUFoUixVQUFBK2pCLFFBQUEsS0FFQS9TLEVBQUFoUixVQUFBMkksSUFBQSxTQUFBdVgsRUFBQTFiLEVBQUF3TixHQUNBLElBQUFpQyxFQUFBL1MsS0FBQXNRLGVBRUEsbUJBQUEwTyxHQUNBbE8sRUFBQWtPLEVBQ0FBLEVBQUEsS0FDQTFiLEVBQUEsTUFDRyxtQkFBQUEsSUFDSHdOLEVBQUF4TixFQUNBQSxFQUFBLE1BR0EwYixTQUFBaGYsS0FBQXlELE1BQUF1YixFQUFBMWIsR0FHQXlQLEVBQUEyTyxTQUNBM08sRUFBQTJPLE9BQUEsRUFDQTFoQixLQUFBcWtCLFVBSUF0UixFQUFBcU8sUUFBQXJPLEVBQUFzTyxVQTBDQSxTQUFBWCxFQUFBM04sRUFBQWpDLEdBQ0FpQyxFQUFBcU8sUUFBQSxFQUNBYSxFQUFBdkIsRUFBQTNOLEdBQ0FqQyxJQUNBaUMsRUFBQXNPLFNBQUE5UixFQUFBaUIsU0FBQU0sR0FBeUM0UCxFQUFBdFEsS0FBQSxTQUFBVSxJQUV6Q2lDLEVBQUF4QyxPQUFBLEVBQ0FtUSxFQUFBbGdCLFVBQUEsRUFqREErakIsQ0FBQXZrQixLQUFBK1MsRUFBQWpDLElBb0VBbFQsT0FBQUMsZUFBQWlTLEVBQUFoUixVQUFBLGFBQ0FmLElBQUEsV0FDQSxZQUFBc0MsSUFBQUwsS0FBQXNRLGdCQUdBdFEsS0FBQXNRLGVBQUFNLFdBRUFqQyxJQUFBLFNBQUF4USxHQUdBNkIsS0FBQXNRLGlCQU1BdFEsS0FBQXNRLGVBQUFNLFVBQUF6UyxNQUlBMlIsRUFBQWhSLFVBQUF5Z0IsUUFBQWlCLEVBQUFqQixRQUNBelAsRUFBQWhSLFVBQUEwbEIsV0FBQWhFLEVBQUFpRSxVQUNBM1UsRUFBQWhSLFVBQUErUixTQUFBLFNBQUF6USxFQUFBMFEsR0FDQTlRLEtBQUF5SCxNQUNBcUosRUFBQTFRLDZFQ3BwQkEsSUFBQWlDLEVBQWF2RixFQUFRLElBQWF1RixPQUdsQ2tCLEVBQUFsQixFQUFBa0IsWUFBQSxTQUFBRCxHQUVBLFFBREFBLEVBQUEsR0FBQUEsSUFDQUEsRUFBQXNCLGVBQ0EscUlBQ0EsU0FDQSxRQUNBLFdBNENBLFNBQUE4ZixFQUFBcGhCLEdBRUEsSUFBQXFoQixFQUNBLE9BRkEza0IsS0FBQXNELFNBWEEsU0FBQXNoQixHQUNBLElBQUFDLEVBL0JBLFNBQUFELEdBQ0EsSUFBQUEsRUFBQSxhQUVBLElBREEsSUFBQUUsSUFFQSxPQUFBRixHQUNBLFdBQ0EsWUFDQSxhQUNBLFdBQ0EsWUFDQSxjQUNBLGVBQ0EsZ0JBQ0EsYUFDQSxhQUNBLGVBQ0EsYUFDQSxZQUNBLFVBQ0EsT0FBQUEsRUFDQSxRQUNBLEdBQUFFLEVBQUEsT0FDQUYsR0FBQSxHQUFBQSxHQUFBaGdCLGNBQ0FrZ0IsR0FBQSxHQVFBQyxDQUFBSCxHQUNBLG9CQUFBQyxJQUFBeGlCLEVBQUFrQixtQkFBQXFoQixJQUFBLFVBQUFoaUIsTUFBQSxxQkFBQWdpQixHQUNBLE9BQUFDLEdBQUFELEVBUUFJLENBQUExaEIsR0FFQXRELEtBQUFzRCxVQUNBLGNBQ0F0RCxLQUFBaWxCLEtBQUFDLEVBQ0FsbEIsS0FBQXlILElBQUEwZCxFQUNBUixFQUFBLEVBQ0EsTUFDQSxXQUNBM2tCLEtBQUFvbEIsU0FBQUMsRUFDQVYsRUFBQSxFQUNBLE1BQ0EsYUFDQTNrQixLQUFBaWxCLEtBQUFLLEVBQ0F0bEIsS0FBQXlILElBQUE4ZCxFQUNBWixFQUFBLEVBQ0EsTUFDQSxRQUdBLE9BRkEza0IsS0FBQXlELE1BQUEraEIsT0FDQXhsQixLQUFBeUgsSUFBQWdlLEdBR0F6bEIsS0FBQTBsQixTQUFBLEVBQ0ExbEIsS0FBQTJsQixVQUFBLEVBQ0EzbEIsS0FBQTRsQixTQUFBdmpCLEVBQUFRLFlBQUE4aEIsR0FvQ0EsU0FBQWtCLEVBQUFDLEdBQ0EsT0FBQUEsR0FBQSxNQUE2QkEsR0FBQSxPQUFzQ0EsR0FBQSxRQUFzQ0EsR0FBQSxRQUN6R0EsR0FBQSxXQTJEQSxTQUFBVCxFQUFBMWYsR0FDQSxJQUFBM0csRUFBQWdCLEtBQUEybEIsVUFBQTNsQixLQUFBMGxCLFNBQ0ExbkIsRUF0QkEsU0FBQStCLEVBQUE0RixFQUFBM0csR0FDQSxhQUFBMkcsRUFBQSxJQUVBLE9BREE1RixFQUFBMmxCLFNBQUEsRUFDQSxJQUVBLEdBQUEzbEIsRUFBQTJsQixTQUFBLEdBQUEvZixFQUFBNUUsT0FBQSxHQUNBLGFBQUE0RSxFQUFBLElBRUEsT0FEQTVGLEVBQUEybEIsU0FBQSxFQUNBLElBRUEsR0FBQTNsQixFQUFBMmxCLFNBQUEsR0FBQS9mLEVBQUE1RSxPQUFBLEdBQ0EsVUFBQTRFLEVBQUEsSUFFQSxPQURBNUYsRUFBQTJsQixTQUFBLEVBQ0EsS0FTQUssQ0FBQS9sQixLQUFBMkYsR0FDQSxZQUFBdEYsSUFBQXJDLElBQ0FnQyxLQUFBMGxCLFVBQUEvZixFQUFBNUUsUUFDQTRFLEVBQUE1QixLQUFBL0QsS0FBQTRsQixTQUFBNW1CLEVBQUEsRUFBQWdCLEtBQUEwbEIsVUFDQTFsQixLQUFBNGxCLFNBQUFyaEIsU0FBQXZFLEtBQUFzRCxTQUFBLEVBQUF0RCxLQUFBMmxCLGFBRUFoZ0IsRUFBQTVCLEtBQUEvRCxLQUFBNGxCLFNBQUE1bUIsRUFBQSxFQUFBMkcsRUFBQTVFLGFBQ0FmLEtBQUEwbEIsVUFBQS9mLEVBQUE1RSxTQTJCQSxTQUFBbWtCLEVBQUF2ZixFQUFBekksR0FDQSxJQUFBeUksRUFBQTVFLE9BQUE3RCxHQUFBLE1BQ0EsSUFBQWMsRUFBQTJILEVBQUFwQixTQUFBLFVBQUFySCxHQUNBLEdBQUFjLEVBQUEsQ0FDQSxJQUFBVCxFQUFBUyxFQUFBOEksV0FBQTlJLEVBQUErQyxPQUFBLEdBQ0EsR0FBQXhELEdBQUEsT0FBQUEsR0FBQSxNQUtBLE9BSkF5QyxLQUFBMGxCLFNBQUEsRUFDQTFsQixLQUFBMmxCLFVBQUEsRUFDQTNsQixLQUFBNGxCLFNBQUEsR0FBQWpnQixJQUFBNUUsT0FBQSxHQUNBZixLQUFBNGxCLFNBQUEsR0FBQWpnQixJQUFBNUUsT0FBQSxHQUNBL0MsRUFBQTBGLE1BQUEsTUFHQSxPQUFBMUYsRUFLQSxPQUhBZ0MsS0FBQTBsQixTQUFBLEVBQ0ExbEIsS0FBQTJsQixVQUFBLEVBQ0EzbEIsS0FBQTRsQixTQUFBLEdBQUFqZ0IsSUFBQTVFLE9BQUEsR0FDQTRFLEVBQUFwQixTQUFBLFVBQUFySCxFQUFBeUksRUFBQTVFLE9BQUEsR0FLQSxTQUFBb2tCLEVBQUF4ZixHQUNBLElBQUEzSCxFQUFBMkgsS0FBQTVFLE9BQUFmLEtBQUF5RCxNQUFBa0MsR0FBQSxHQUNBLEdBQUEzRixLQUFBMGxCLFNBQUEsQ0FDQSxJQUFBamUsRUFBQXpILEtBQUEybEIsVUFBQTNsQixLQUFBMGxCLFNBQ0EsT0FBQTFuQixFQUFBZ0MsS0FBQTRsQixTQUFBcmhCLFNBQUEsWUFBQWtELEdBRUEsT0FBQXpKLEVBR0EsU0FBQXNuQixFQUFBM2YsRUFBQXpJLEdBQ0EsSUFBQXlCLEdBQUFnSCxFQUFBNUUsT0FBQTdELEdBQUEsRUFDQSxXQUFBeUIsRUFBQWdILEVBQUFwQixTQUFBLFNBQUFySCxJQUNBOEMsS0FBQTBsQixTQUFBLEVBQUEvbUIsRUFDQXFCLEtBQUEybEIsVUFBQSxFQUNBLElBQUFobkIsRUFDQXFCLEtBQUE0bEIsU0FBQSxHQUFBamdCLElBQUE1RSxPQUFBLElBRUFmLEtBQUE0bEIsU0FBQSxHQUFBamdCLElBQUE1RSxPQUFBLEdBQ0FmLEtBQUE0bEIsU0FBQSxHQUFBamdCLElBQUE1RSxPQUFBLElBRUE0RSxFQUFBcEIsU0FBQSxTQUFBckgsRUFBQXlJLEVBQUE1RSxPQUFBcEMsSUFHQSxTQUFBNG1CLEVBQUE1ZixHQUNBLElBQUEzSCxFQUFBMkgsS0FBQTVFLE9BQUFmLEtBQUF5RCxNQUFBa0MsR0FBQSxHQUNBLE9BQUEzRixLQUFBMGxCLFNBQUExbkIsRUFBQWdDLEtBQUE0bEIsU0FBQXJoQixTQUFBLGFBQUF2RSxLQUFBMGxCLFVBQ0ExbkIsRUFJQSxTQUFBd25CLEVBQUE3ZixHQUNBLE9BQUFBLEVBQUFwQixTQUFBdkUsS0FBQXNELFVBR0EsU0FBQW1pQixFQUFBOWYsR0FDQSxPQUFBQSxLQUFBNUUsT0FBQWYsS0FBQXlELE1BQUFrQyxHQUFBLEdBek5BM0ksRUFBQTBuQixnQkE2QkFBLEVBQUE1bEIsVUFBQTJFLE1BQUEsU0FBQWtDLEdBQ0EsT0FBQUEsRUFBQTVFLE9BQUEsU0FDQSxJQUFBL0MsRUFDQWQsRUFDQSxHQUFBOEMsS0FBQTBsQixTQUFBLENBRUEsUUFBQXJsQixLQURBckMsRUFBQWdDLEtBQUFvbEIsU0FBQXpmLElBQ0EsU0FDQXpJLEVBQUE4QyxLQUFBMGxCLFNBQ0ExbEIsS0FBQTBsQixTQUFBLE9BRUF4b0IsRUFBQSxFQUVBLE9BQUFBLEVBQUF5SSxFQUFBNUUsT0FBQS9DLElBQUFnQyxLQUFBaWxCLEtBQUF0ZixFQUFBekksR0FBQThDLEtBQUFpbEIsS0FBQXRmLEVBQUF6SSxHQUNBYyxHQUFBLElBR0EwbUIsRUFBQTVsQixVQUFBMkksSUF3R0EsU0FBQTlCLEdBQ0EsSUFBQTNILEVBQUEySCxLQUFBNUUsT0FBQWYsS0FBQXlELE1BQUFrQyxHQUFBLEdBQ0EsT0FBQTNGLEtBQUEwbEIsU0FBQTFuQixFQUFBLElBQ0FBLEdBeEdBMG1CLEVBQUE1bEIsVUFBQW1tQixLQTBGQSxTQUFBdGYsRUFBQXpJLEdBQ0EsSUFBQThvQixFQXJFQSxTQUFBam1CLEVBQUE0RixFQUFBekksR0FDQSxJQUFBNkksRUFBQUosRUFBQTVFLE9BQUEsRUFDQSxHQUFBZ0YsRUFBQTdJLEVBQUEsU0FDQSxJQUFBeW5CLEVBQUFrQixFQUFBbGdCLEVBQUFJLElBQ0EsR0FBQTRlLEdBQUEsRUFFQSxPQURBQSxFQUFBLElBQUE1a0IsRUFBQTJsQixTQUFBZixFQUFBLEdBQ0FBLEVBRUEsS0FBQTVlLEVBQUE3SSxJQUFBLElBQUF5bkIsRUFBQSxTQUVBLElBREFBLEVBQUFrQixFQUFBbGdCLEVBQUFJLE1BQ0EsRUFFQSxPQURBNGUsRUFBQSxJQUFBNWtCLEVBQUEybEIsU0FBQWYsRUFBQSxHQUNBQSxFQUVBLEtBQUE1ZSxFQUFBN0ksSUFBQSxJQUFBeW5CLEVBQUEsU0FFQSxJQURBQSxFQUFBa0IsRUFBQWxnQixFQUFBSSxNQUNBLEVBSUEsT0FIQTRlLEVBQUEsSUFDQSxJQUFBQSxJQUFBLEVBQTJCNWtCLEVBQUEybEIsU0FBQWYsRUFBQSxHQUUzQkEsRUFFQSxTQStDQXNCLENBQUFqbUIsS0FBQTJGLEVBQUF6SSxHQUNBLElBQUE4QyxLQUFBMGxCLFNBQUEsT0FBQS9mLEVBQUFwQixTQUFBLE9BQUFySCxHQUNBOEMsS0FBQTJsQixVQUFBSyxFQUNBLElBQUF2ZSxFQUFBOUIsRUFBQTVFLFFBQUFpbEIsRUFBQWhtQixLQUFBMGxCLFVBRUEsT0FEQS9mLEVBQUE1QixLQUFBL0QsS0FBQTRsQixTQUFBLEVBQUFuZSxHQUNBOUIsRUFBQXBCLFNBQUEsT0FBQXJILEVBQUF1SyxJQTdGQWlkLEVBQUE1bEIsVUFBQXNtQixTQUFBLFNBQUF6ZixHQUNBLEdBQUEzRixLQUFBMGxCLFVBQUEvZixFQUFBNUUsT0FFQSxPQURBNEUsRUFBQTVCLEtBQUEvRCxLQUFBNGxCLFNBQUE1bEIsS0FBQTJsQixVQUFBM2xCLEtBQUEwbEIsU0FBQSxFQUFBMWxCLEtBQUEwbEIsVUFDQTFsQixLQUFBNGxCLFNBQUFyaEIsU0FBQXZFLEtBQUFzRCxTQUFBLEVBQUF0RCxLQUFBMmxCLFdBRUFoZ0IsRUFBQTVCLEtBQUEvRCxLQUFBNGxCLFNBQUE1bEIsS0FBQTJsQixVQUFBM2xCLEtBQUEwbEIsU0FBQSxFQUFBL2YsRUFBQTVFLFFBQ0FmLEtBQUEwbEIsVUFBQS9mLEVBQUE1RSwyQkN0SUEsSUFBQXNCLEVBQWF2RixFQUFRLElBQWF1RixPQUdsQyxTQUFBNmpCLEVBQUFDLEVBQUFDLEdBQ0FwbUIsS0FBQXFtQixPQUFBaGtCLEVBQUFzRyxNQUFBd2QsR0FDQW5tQixLQUFBc21CLFdBQUFGLEVBQ0FwbUIsS0FBQXVtQixXQUFBSixFQUNBbm1CLEtBQUF3bUIsS0FBQSxFQUdBTixFQUFBcG5CLFVBQUEybkIsT0FBQSxTQUFBdGlCLEVBQUF5Z0IsR0FDQSxpQkFBQXpnQixJQUNBeWdCLEtBQUEsT0FDQXpnQixFQUFBOUIsRUFBQVMsS0FBQXFCLEVBQUF5Z0IsSUFRQSxJQUxBLElBQUE4QixFQUFBMW1CLEtBQUFxbUIsT0FDQUYsRUFBQW5tQixLQUFBdW1CLFdBQ0F4bEIsRUFBQW9ELEVBQUFwRCxPQUNBNGxCLEVBQUEzbUIsS0FBQXdtQixLQUVBdmdCLEVBQUEsRUFBc0JBLEVBQUFsRixHQUFpQixDQUl2QyxJQUhBLElBQUE2bEIsRUFBQUQsRUFBQVIsRUFDQVUsRUFBQWpmLEtBQUFDLElBQUE5RyxFQUFBa0YsRUFBQWtnQixFQUFBUyxHQUVBMXBCLEVBQUEsRUFBbUJBLEVBQUEycEIsRUFBZTNwQixJQUNsQ3dwQixFQUFBRSxFQUFBMXBCLEdBQUFpSCxFQUFBOEIsRUFBQS9JLEdBSUErSSxHQUFBNGdCLEdBREFGLEdBQUFFLEdBR0FWLEdBQUEsR0FDQW5tQixLQUFBOG1CLFFBQUFKLEdBS0EsT0FEQTFtQixLQUFBd21CLE1BQUF6bEIsRUFDQWYsTUFHQWttQixFQUFBcG5CLFVBQUFpb0IsT0FBQSxTQUFBbkMsR0FDQSxJQUFBb0MsRUFBQWhuQixLQUFBd21CLEtBQUF4bUIsS0FBQXVtQixXQUVBdm1CLEtBQUFxbUIsT0FBQVcsR0FBQSxJQUlBaG5CLEtBQUFxbUIsT0FBQWxkLEtBQUEsRUFBQTZkLEVBQUEsR0FFQUEsR0FBQWhuQixLQUFBc21CLGFBQ0F0bUIsS0FBQThtQixRQUFBOW1CLEtBQUFxbUIsUUFDQXJtQixLQUFBcW1CLE9BQUFsZCxLQUFBLElBR0EsSUFBQThkLEVBQUEsRUFBQWpuQixLQUFBd21CLEtBR0EsR0FBQVMsR0FBQSxXQUNBam5CLEtBQUFxbUIsT0FBQXpZLGNBQUFxWixFQUFBam5CLEtBQUF1bUIsV0FBQSxPQUdHLENBQ0gsSUFBQVcsR0FBQSxXQUFBRCxLQUFBLEVBQ0FFLEdBQUFGLEVBQUFDLEdBQUEsV0FFQWxuQixLQUFBcW1CLE9BQUF6WSxjQUFBdVosRUFBQW5uQixLQUFBdW1CLFdBQUEsR0FDQXZtQixLQUFBcW1CLE9BQUF6WSxjQUFBc1osRUFBQWxuQixLQUFBdW1CLFdBQUEsR0FHQXZtQixLQUFBOG1CLFFBQUE5bUIsS0FBQXFtQixRQUNBLElBQUFlLEVBQUFwbkIsS0FBQXFuQixRQUVBLE9BQUF6QyxFQUFBd0MsRUFBQTdpQixTQUFBcWdCLEdBQUF3QyxHQUdBbEIsRUFBQXBuQixVQUFBZ29CLFFBQUEsV0FDQSxVQUFBbGtCLE1BQUEsNENBR0EzRixFQUFBRCxRQUFBa3BCLGlDQzlFQWxwQixFQUFBa0csV0F1Q0EsU0FBQW9rQixHQUNBLElBQUFDLEVBQUFDLEVBQUFGLEdBQ0FHLEVBQUFGLEVBQUEsR0FDQUcsRUFBQUgsRUFBQSxHQUNBLFVBQUFFLEVBQUFDLEdBQUEsRUFBQUEsR0ExQ0ExcUIsRUFBQWdTLFlBaURBLFNBQUFzWSxHQWVBLElBZEEsSUFBQUssRUFDQUosRUFBQUMsRUFBQUYsR0FDQUcsRUFBQUYsRUFBQSxHQUNBRyxFQUFBSCxFQUFBLEdBRUFsaUIsRUFBQSxJQUFBdWlCLEVBVkEsU0FBQU4sRUFBQUcsRUFBQUMsR0FDQSxVQUFBRCxFQUFBQyxHQUFBLEVBQUFBLEVBU0FHLENBQUFQLEVBQUFHLEVBQUFDLElBRUFJLEVBQUEsRUFHQWprQixFQUFBNmpCLEVBQUEsRUFDQUQsRUFBQSxFQUNBQSxFQUVBdnFCLEVBQUEsRUFBaUJBLEVBQUEyRyxFQUFTM0csR0FBQSxFQUMxQnlxQixFQUNBSSxFQUFBVCxFQUFBeGdCLFdBQUE1SixLQUFBLEdBQ0E2cUIsRUFBQVQsRUFBQXhnQixXQUFBNUosRUFBQSxRQUNBNnFCLEVBQUFULEVBQUF4Z0IsV0FBQTVKLEVBQUEsT0FDQTZxQixFQUFBVCxFQUFBeGdCLFdBQUE1SixFQUFBLElBQ0FtSSxFQUFBeWlCLEtBQUFILEdBQUEsT0FDQXRpQixFQUFBeWlCLEtBQUFILEdBQUEsTUFDQXRpQixFQUFBeWlCLEtBQUEsSUFBQUgsRUFHQSxJQUFBRCxJQUNBQyxFQUNBSSxFQUFBVCxFQUFBeGdCLFdBQUE1SixLQUFBLEVBQ0E2cUIsRUFBQVQsRUFBQXhnQixXQUFBNUosRUFBQSxPQUNBbUksRUFBQXlpQixLQUFBLElBQUFILEdBR0EsSUFBQUQsSUFDQUMsRUFDQUksRUFBQVQsRUFBQXhnQixXQUFBNUosS0FBQSxHQUNBNnFCLEVBQUFULEVBQUF4Z0IsV0FBQTVKLEVBQUEsT0FDQTZxQixFQUFBVCxFQUFBeGdCLFdBQUE1SixFQUFBLE9BQ0FtSSxFQUFBeWlCLEtBQUFILEdBQUEsTUFDQXRpQixFQUFBeWlCLEtBQUEsSUFBQUgsR0FHQSxPQUFBdGlCLEdBMUZBckksRUFBQTBLLGNBaUhBLFNBQUFzZ0IsR0FRQSxJQVBBLElBQUFMLEVBQ0E5akIsRUFBQW1rQixFQUFBam5CLE9BQ0FrbkIsRUFBQXBrQixFQUFBLEVBQ0Fxa0IsRUFBQSxHQUlBaHJCLEVBQUEsRUFBQWlyQixFQUFBdGtCLEVBQUFva0IsRUFBMEMvcUIsRUFBQWlyQixFQUFVanJCLEdBSHBELE1BSUFnckIsRUFBQXJoQixLQUFBdWhCLEVBQ0FKLEVBQUE5cUIsSUFMQSxNQUtBaXJCLElBQUFqckIsRUFMQSxRQVVBLElBQUErcUIsR0FDQU4sRUFBQUssRUFBQW5rQixFQUFBLEdBQ0Fxa0IsRUFBQXJoQixLQUNBd2hCLEVBQUFWLEdBQUEsR0FDQVUsRUFBQVYsR0FBQSxNQUNBLE9BRUcsSUFBQU0sSUFDSE4sR0FBQUssRUFBQW5rQixFQUFBLE9BQUFta0IsRUFBQW5rQixFQUFBLEdBQ0Fxa0IsRUFBQXJoQixLQUNBd2hCLEVBQUFWLEdBQUEsSUFDQVUsRUFBQVYsR0FBQSxNQUNBVSxFQUFBVixHQUFBLE1BQ0EsTUFJQSxPQUFBTyxFQUFBMWQsS0FBQSxLQTFJQSxJQUxBLElBQUE2ZCxFQUFBLEdBQ0FOLEVBQUEsR0FDQUgsRUFBQSxvQkFBQWxsQixzQkFBQXNJLE1BRUE0RCxFQUFBLG1FQUNBMVIsRUFBQSxFQUFBMkcsRUFBQStLLEVBQUE3TixPQUFrQzdELEVBQUEyRyxJQUFTM0csRUFDM0NtckIsRUFBQW5yQixHQUFBMFIsRUFBQTFSLEdBQ0E2cUIsRUFBQW5aLEVBQUE5SCxXQUFBNUosTUFRQSxTQUFBc3FCLEVBQUFGLEdBQ0EsSUFBQXpqQixFQUFBeWpCLEVBQUF2bUIsT0FFQSxHQUFBOEMsRUFBQSxJQUNBLFVBQUFqQixNQUFBLGtEQUtBLElBQUE2a0IsRUFBQUgsRUFBQW5pQixRQUFBLEtBT0EsT0FOQSxJQUFBc2lCLE1BQUE1akIsR0FNQSxDQUFBNGpCLEVBSkFBLElBQUE1akIsRUFDQSxFQUNBLEVBQUE0akIsRUFBQSxHQXFFQSxTQUFBVyxFQUFBSixFQUFBeGdCLEVBQUFDLEdBR0EsSUFGQSxJQUFBa2dCLEVBUkFXLEVBU0FDLEVBQUEsR0FDQXJyQixFQUFBc0ssRUFBcUJ0SyxFQUFBdUssRUFBU3ZLLEdBQUEsRUFDOUJ5cUIsR0FDQUssRUFBQTlxQixJQUFBLGNBQ0E4cUIsRUFBQTlxQixFQUFBLGNBQ0EsSUFBQThxQixFQUFBOXFCLEVBQUEsSUFDQXFyQixFQUFBMWhCLEtBZEF3aEIsR0FEQUMsRUFlQVgsSUFkQSxPQUNBVSxFQUFBQyxHQUFBLE9BQ0FELEVBQUFDLEdBQUEsTUFDQUQsRUFBQSxHQUFBQyxJQWFBLE9BQUFDLEVBQUEvZCxLQUFBLElBaEdBdWQsRUFBQSxJQUFBamhCLFdBQUEsT0FDQWloQixFQUFBLElBQUFqaEIsV0FBQSxzQkNuQkE5SixFQUFBMEksS0FBQSxTQUFBMUIsRUFBQWlDLEVBQUF1aUIsRUFBQUMsRUFBQUMsR0FDQSxJQUFBbm5CLEVBQUFqRSxFQUNBcXJCLEVBQUEsRUFBQUQsRUFBQUQsRUFBQSxFQUNBRyxHQUFBLEdBQUFELEdBQUEsRUFDQUUsRUFBQUQsR0FBQSxFQUNBRSxHQUFBLEVBQ0E1ckIsRUFBQXNyQixFQUFBRSxFQUFBLElBQ0FsckIsRUFBQWdyQixHQUFBLElBQ0F2cEIsRUFBQStFLEVBQUFpQyxFQUFBL0ksR0FPQSxJQUxBQSxHQUFBTSxFQUVBK0QsRUFBQXRDLEdBQUEsSUFBQTZwQixHQUFBLEVBQ0E3cEIsS0FBQTZwQixFQUNBQSxHQUFBSCxFQUNRRyxFQUFBLEVBQVd2bkIsRUFBQSxJQUFBQSxFQUFBeUMsRUFBQWlDLEVBQUEvSSxNQUFBTSxFQUFBc3JCLEdBQUEsR0FLbkIsSUFIQXhyQixFQUFBaUUsR0FBQSxJQUFBdW5CLEdBQUEsRUFDQXZuQixLQUFBdW5CLEVBQ0FBLEdBQUFMLEVBQ1FLLEVBQUEsRUFBV3hyQixFQUFBLElBQUFBLEVBQUEwRyxFQUFBaUMsRUFBQS9JLE1BQUFNLEVBQUFzckIsR0FBQSxHQUVuQixPQUFBdm5CLEVBQ0FBLEVBQUEsRUFBQXNuQixNQUNHLElBQUF0bkIsSUFBQXFuQixFQUNILE9BQUF0ckIsRUFBQXlyQixJQUFBamEsS0FBQTdQLEdBQUEsS0FFQTNCLEdBQUFzSyxLQUFBOEUsSUFBQSxFQUFBK2IsR0FDQWxuQixHQUFBc25CLEVBRUEsT0FBQTVwQixHQUFBLEtBQUEzQixFQUFBc0ssS0FBQThFLElBQUEsRUFBQW5MLEVBQUFrbkIsSUFHQXpyQixFQUFBeUcsTUFBQSxTQUFBTyxFQUFBN0YsRUFBQThILEVBQUF1aUIsRUFBQUMsRUFBQUMsR0FDQSxJQUFBbm5CLEVBQUFqRSxFQUFBQyxFQUNBb3JCLEVBQUEsRUFBQUQsRUFBQUQsRUFBQSxFQUNBRyxHQUFBLEdBQUFELEdBQUEsRUFDQUUsRUFBQUQsR0FBQSxFQUNBSSxFQUFBLEtBQUFQLEVBQUE3Z0IsS0FBQThFLElBQUEsT0FBQTlFLEtBQUE4RSxJQUFBLFNBQ0F4UCxFQUFBc3JCLEVBQUEsRUFBQUUsRUFBQSxFQUNBbHJCLEVBQUFnckIsRUFBQSxLQUNBdnBCLEVBQUFkLEVBQUEsT0FBQUEsR0FBQSxFQUFBQSxFQUFBLE1BbUNBLElBakNBQSxFQUFBeUosS0FBQXFoQixJQUFBOXFCLEdBRUE4RyxNQUFBOUcsUUFBQTJRLEtBQ0F4UixFQUFBMkgsTUFBQTlHLEdBQUEsSUFDQW9ELEVBQUFxbkIsSUFFQXJuQixFQUFBcUcsS0FBQTRGLE1BQUE1RixLQUFBc2hCLElBQUEvcUIsR0FBQXlKLEtBQUF1aEIsS0FDQWhyQixHQUFBWixFQUFBcUssS0FBQThFLElBQUEsR0FBQW5MLElBQUEsSUFDQUEsSUFDQWhFLEdBQUEsSUFHQVksR0FEQW9ELEVBQUFzbkIsR0FBQSxFQUNBRyxFQUFBenJCLEVBRUF5ckIsRUFBQXBoQixLQUFBOEUsSUFBQSxJQUFBbWMsSUFFQXRyQixHQUFBLElBQ0FnRSxJQUNBaEUsR0FBQSxHQUdBZ0UsRUFBQXNuQixHQUFBRCxHQUNBdHJCLEVBQUEsRUFDQWlFLEVBQUFxbkIsR0FDS3JuQixFQUFBc25CLEdBQUEsR0FDTHZyQixHQUFBYSxFQUFBWixFQUFBLEdBQUFxSyxLQUFBOEUsSUFBQSxFQUFBK2IsR0FDQWxuQixHQUFBc25CLElBRUF2ckIsRUFBQWEsRUFBQXlKLEtBQUE4RSxJQUFBLEVBQUFtYyxFQUFBLEdBQUFqaEIsS0FBQThFLElBQUEsRUFBQStiLEdBQ0FsbkIsRUFBQSxJQUlRa25CLEdBQUEsRUFBV3prQixFQUFBaUMsRUFBQS9JLEdBQUEsSUFBQUksRUFBQUosR0FBQU0sRUFBQUYsR0FBQSxJQUFBbXJCLEdBQUEsR0FJbkIsSUFGQWxuQixLQUFBa25CLEVBQUFuckIsRUFDQXFyQixHQUFBRixFQUNRRSxFQUFBLEVBQVUza0IsRUFBQWlDLEVBQUEvSSxHQUFBLElBQUFxRSxFQUFBckUsR0FBQU0sRUFBQStELEdBQUEsSUFBQW9uQixHQUFBLEdBRWxCM2tCLEVBQUFpQyxFQUFBL0ksRUFBQU0sSUFBQSxJQUFBeUIsa0NDbEZBLFNBQUErQyxFQUFBc1QsR0F5QkEsSUFBQS9GLEVBQVV6UyxFQUFRLElBR2xCRyxFQUFBRCxRQUFBNlMsRUFHQSxJQUlBSCxFQUpBdk4sRUFBY3JGLEVBQVEsSUFPdEIrUyxFQUFBdVosZ0JBR1N0c0IsRUFBUSxJQUFRMFUsYUFBekIsSUFFQTZYLEVBQUEsU0FBQTNXLEVBQUF4TyxHQUNBLE9BQUF3TyxFQUFBdUIsVUFBQS9QLEdBQUFuRCxRQUtBeWQsRUFBYTFoQixFQUFRLElBS3JCdUYsRUFBYXZGLEVBQVEsSUFBYXVGLE9BQ2xDaWUsRUFBQXRlLEVBQUFVLFlBQUEsYUFXQSxJQUFBaU4sRUFBVzdTLEVBQVEsSUFDbkI2UyxFQUFBQyxTQUFnQjlTLEVBQVEsSUFJeEIsSUFBQXdzQixFQUFnQnhzQixFQUFRLElBQ3hCeXNCLE9BQUEsRUFFQUEsRUFEQUQsS0FBQUUsU0FDQUYsRUFBQUUsU0FBQSxVQUVBLGFBSUEsSUFFQTlFLEVBRkErRSxFQUFpQjNzQixFQUFRLElBQ3pCMGpCLEVBQWtCMWpCLEVBQVEsSUFHMUI2UyxFQUFBQyxTQUFBQyxFQUFBMk8sR0FFQSxJQUFBa0wsRUFBQSw2Q0FjQSxTQUFBTixFQUFBblosRUFBQXlRLEdBR0F6USxLQUFBLEdBT0EsSUFBQTBRLEVBQUFELGFBVEFoUixLQUFxQjVTLEVBQVEsS0FhN0JrRCxLQUFBNGdCLGFBQUEzUSxFQUFBMlEsV0FFQUQsSUFBQTNnQixLQUFBNGdCLFdBQUE1Z0IsS0FBQTRnQixjQUFBM1EsRUFBQTBaLG9CQUlBLElBQUE3SSxFQUFBN1EsRUFBQVMsY0FDQWtaLEVBQUEzWixFQUFBNFosc0JBQ0E1SSxFQUFBamhCLEtBQUE0Z0IsV0FBQSxTQUVBNWdCLEtBQUEwUSxjQUFBb1EsR0FBQSxJQUFBQSxJQUFpREgsSUFBQWlKLEdBQUEsSUFBQUEsS0FBMEYzSSxFQUczSWpoQixLQUFBMFEsY0FBQTlJLEtBQUE0RixNQUFBeE4sS0FBQTBRLGVBS0ExUSxLQUFBZ0UsT0FBQSxJQUFBeWxCLEVBQ0F6cEIsS0FBQWUsT0FBQSxFQUNBZixLQUFBOHBCLE1BQUEsS0FDQTlwQixLQUFBK3BCLFdBQUEsRUFDQS9wQixLQUFBZ3FCLFFBQUEsS0FDQWhxQixLQUFBdVEsT0FBQSxFQUNBdlEsS0FBQWlxQixZQUFBLEVBQ0FqcUIsS0FBQWtxQixTQUFBLEVBTUFscUIsS0FBQTJoQixNQUFBLEVBSUEzaEIsS0FBQW1xQixjQUFBLEVBQ0FucUIsS0FBQW9xQixpQkFBQSxFQUNBcHFCLEtBQUFxcUIsbUJBQUEsRUFDQXJxQixLQUFBc3FCLGlCQUFBLEVBR0F0cUIsS0FBQTRRLFdBQUEsRUFLQTVRLEtBQUF3aEIsZ0JBQUF2UixFQUFBdVIsaUJBQUEsT0FHQXhoQixLQUFBdXFCLFdBQUEsRUFHQXZxQixLQUFBd3FCLGFBQUEsRUFFQXhxQixLQUFBeXFCLFFBQUEsS0FDQXpxQixLQUFBc0QsU0FBQSxLQUNBMk0sRUFBQTNNLFdBQ0FvaEIsTUFBd0M1bkIsRUFBUSxJQUFpQjRuQixlQUNqRTFrQixLQUFBeXFCLFFBQUEsSUFBQS9GLEVBQUF6VSxFQUFBM00sVUFDQXRELEtBQUFzRCxTQUFBMk0sRUFBQTNNLFVBSUEsU0FBQXVNLEVBQUFJLEdBR0EsR0FGQVAsS0FBcUI1UyxFQUFRLE1BRTdCa0QsZ0JBQUE2UCxHQUFBLFdBQUFBLEVBQUFJLEdBRUFqUSxLQUFBMlEsZUFBQSxJQUFBeVksRUFBQW5aLEVBQUFqUSxNQUdBQSxLQUFBa1EsVUFBQSxFQUVBRCxJQUNBLG1CQUFBQSxFQUFBdkssT0FBQTFGLEtBQUEwcUIsTUFBQXphLEVBQUF2SyxNQUVBLG1CQUFBdUssRUFBQXNQLFVBQUF2ZixLQUFBNlEsU0FBQVosRUFBQXNQLFVBR0FmLEVBQUFuaEIsS0FBQTJDLE1BMkRBLFNBQUEycUIsRUFBQWpLLEVBQUExQixFQUFBMWIsRUFBQXNuQixFQUFBQyxHQUNBLElBS0FoWCxFQUxBZCxFQUFBMk4sRUFBQS9QLGVBQ0EsT0FBQXFPLEdBQ0FqTSxFQUFBbVgsU0FBQSxFQTBOQSxTQUFBeEosRUFBQTNOLEdBQ0EsR0FBQUEsRUFBQXhDLE1BQUEsT0FDQSxHQUFBd0MsRUFBQTBYLFFBQUEsQ0FDQSxJQUFBekwsRUFBQWpNLEVBQUEwWCxRQUFBaGpCLE1BQ0F1WCxLQUFBamUsU0FDQWdTLEVBQUEvTyxPQUFBNkMsS0FBQW1ZLEdBQ0FqTSxFQUFBaFMsUUFBQWdTLEVBQUE2TixXQUFBLEVBQUE1QixFQUFBamUsUUFHQWdTLEVBQUF4QyxPQUFBLEVBR0F1YSxFQUFBcEssR0FyT0FxSyxDQUFBckssRUFBQTNOLEtBR0E4WCxJQUFBaFgsRUEyQ0EsU0FBQWQsRUFBQWlNLEdBQ0EsSUFBQW5MLEVBcFBBdlQsRUFxUEEwZSxFQXBQQTNjLEVBQUF1QixTQUFBdEQsaUJBQUFnZ0IsR0FvUEEsaUJBQUF0QixRQUFBM2UsSUFBQTJlLEdBQUFqTSxFQUFBNk4sYUFDQS9NLEVBQUEsSUFBQWxULFVBQUEsb0NBdFBBLElBQUFMLEVBd1BBLE9BQUF1VCxFQWhEQW1YLENBQUFqWSxFQUFBaU0sSUFDQW5MLEVBQ0E2TSxFQUFBcE8sS0FBQSxRQUFBdUIsR0FDS2QsRUFBQTZOLFlBQUE1QixLQUFBamUsT0FBQSxHQUNMLGlCQUFBaWUsR0FBQWpNLEVBQUE2TixZQUFBaGpCLE9BQUErRCxlQUFBcWQsS0FBQTNjLEVBQUF2RCxZQUNBa2dCLEVBaE5BLFNBQUFBLEdBQ0EsT0FBQTNjLEVBQUFTLEtBQUFrYyxHQStNQTRFLENBQUE1RSxJQUdBNEwsRUFDQTdYLEVBQUFrWCxXQUFBdkosRUFBQXBPLEtBQUEsWUFBQTFQLE1BQUEscUNBQWtHcW9CLEVBQUF2SyxFQUFBM04sRUFBQWlNLEdBQUEsR0FDM0ZqTSxFQUFBeEMsTUFDUG1RLEVBQUFwTyxLQUFBLFlBQUExUCxNQUFBLDZCQUVBbVEsRUFBQW1YLFNBQUEsRUFDQW5YLEVBQUEwWCxVQUFBbm5CLEdBQ0EwYixFQUFBak0sRUFBQTBYLFFBQUFobkIsTUFBQXViLEdBQ0FqTSxFQUFBNk4sWUFBQSxJQUFBNUIsRUFBQWplLE9BQUFrcUIsRUFBQXZLLEVBQUEzTixFQUFBaU0sR0FBQSxHQUE0RmtNLEVBQUF4SyxFQUFBM04sSUFFNUZrWSxFQUFBdkssRUFBQTNOLEVBQUFpTSxHQUFBLEtBR0s0TCxJQUNMN1gsRUFBQW1YLFNBQUEsSUFJQSxPQWdDQSxTQUFBblgsR0FDQSxPQUFBQSxFQUFBeEMsUUFBQXdDLEVBQUFvWCxjQUFBcFgsRUFBQWhTLE9BQUFnUyxFQUFBckMsZUFBQSxJQUFBcUMsRUFBQWhTLFFBakNBb3FCLENBQUFwWSxHQUdBLFNBQUFrWSxFQUFBdkssRUFBQTNOLEVBQUFpTSxFQUFBNEwsR0FDQTdYLEVBQUFpWCxTQUFBLElBQUFqWCxFQUFBaFMsU0FBQWdTLEVBQUE0TyxNQUNBakIsRUFBQXBPLEtBQUEsT0FBQTBNLEdBQ0EwQixFQUFBaGIsS0FBQSxLQUdBcU4sRUFBQWhTLFFBQUFnUyxFQUFBNk4sV0FBQSxFQUFBNUIsRUFBQWplLE9BQ0E2cEIsRUFBQTdYLEVBQUEvTyxPQUFBdU8sUUFBQXlNLEdBQWdEak0sRUFBQS9PLE9BQUE2QyxLQUFBbVksR0FFaERqTSxFQUFBb1gsY0FBQVcsRUFBQXBLLElBRUF3SyxFQUFBeEssRUFBQTNOLEdBdkdBblYsT0FBQUMsZUFBQWdTLEVBQUEvUSxVQUFBLGFBQ0FmLElBQUEsV0FDQSxZQUFBc0MsSUFBQUwsS0FBQTJRLGdCQUdBM1EsS0FBQTJRLGVBQUFDLFdBRUFqQyxJQUFBLFNBQUF4USxHQUdBNkIsS0FBQTJRLGlCQU1BM1EsS0FBQTJRLGVBQUFDLFVBQUF6UyxNQUlBMFIsRUFBQS9RLFVBQUF5Z0IsUUFBQWlCLEVBQUFqQixRQUNBMVAsRUFBQS9RLFVBQUEwbEIsV0FBQWhFLEVBQUFpRSxVQUNBNVUsRUFBQS9RLFVBQUErUixTQUFBLFNBQUF6USxFQUFBMFEsR0FDQTlRLEtBQUE2RyxLQUFBLE1BQ0FpSyxFQUFBMVEsSUFPQXlQLEVBQUEvUSxVQUFBK0gsS0FBQSxTQUFBbVksRUFBQTFiLEdBQ0EsSUFDQXVuQixFQURBOVgsRUFBQS9TLEtBQUEyUSxlQWdCQSxPQWJBb0MsRUFBQTZOLFdBVUFpSyxHQUFBLEVBVEEsaUJBQUE3TCxLQUNBMWIsS0FBQXlQLEVBQUF5TyxtQkFDQXpPLEVBQUF6UCxXQUNBMGIsRUFBQTNjLEVBQUFTLEtBQUFrYyxFQUFBMWIsR0FDQUEsRUFBQSxJQUVBdW5CLEdBQUEsR0FNQUYsRUFBQTNxQixLQUFBZ2YsRUFBQTFiLEdBQUEsRUFBQXVuQixJQUlBaGIsRUFBQS9RLFVBQUF5VCxRQUFBLFNBQUF5TSxHQUNBLE9BQUEyTCxFQUFBM3FCLEtBQUFnZixFQUFBLGFBd0VBblAsRUFBQS9RLFVBQUFzc0IsU0FBQSxXQUNBLFdBQUFwckIsS0FBQTJRLGVBQUFxWixTQUlBbmEsRUFBQS9RLFVBQUF1c0IsWUFBQSxTQUFBekcsR0FJQSxPQUhBRixNQUFzQzVuQixFQUFRLElBQWlCNG5CLGVBQy9EMWtCLEtBQUEyUSxlQUFBOFosUUFBQSxJQUFBL0YsRUFBQUUsR0FDQTVrQixLQUFBMlEsZUFBQXJOLFNBQUFzaEIsRUFDQTVrQixNQUlBLElBQUFzckIsRUFBQSxRQW9CQSxTQUFBQyxFQUFBNXNCLEVBQUFvVSxHQUNBLE9BQUFwVSxHQUFBLE9BQUFvVSxFQUFBaFMsUUFBQWdTLEVBQUF4QyxNQUFBLEVBQ0F3QyxFQUFBNk4sV0FBQSxFQUNBamlCLEtBRUFvVSxFQUFBaVgsU0FBQWpYLEVBQUFoUyxPQUFBZ1MsRUFBQS9PLE9BQUF3bkIsS0FBQXJuQixLQUFBcEQsT0FBNEVnUyxFQUFBaFMsUUFHNUVwQyxFQUFBb1UsRUFBQXJDLGdCQUFBcUMsRUFBQXJDLGNBM0JBLFNBQUEvUixHQWNBLE9BYkFBLEdBQUEyc0IsRUFDQTNzQixFQUFBMnNCLEdBSUEzc0IsSUFDQUEsT0FBQSxFQUNBQSxPQUFBLEVBQ0FBLE9BQUEsRUFDQUEsT0FBQSxFQUNBQSxPQUFBLEdBQ0FBLEtBRUFBLEVBYUE4c0IsQ0FBQTlzQixJQUNBQSxHQUFBb1UsRUFBQWhTLE9BQUFwQyxFQUVBb1UsRUFBQXhDLE1BSUF3QyxFQUFBaFMsUUFIQWdTLEVBQUFvWCxjQUFBLEVBQ0EsSUE0SEEsU0FBQVcsRUFBQXBLLEdBQ0EsSUFBQTNOLEVBQUEyTixFQUFBL1AsZUFDQW9DLEVBQUFvWCxjQUFBLEVBQ0FwWCxFQUFBcVgsa0JBQ0FiLEVBQUEsZUFBQXhXLEVBQUFpWCxTQUNBalgsRUFBQXFYLGlCQUFBLEVBQ0FyWCxFQUFBNE8sS0FBQXBTLEVBQUFpQixTQUFBa2IsRUFBQWhMLEdBQXdEZ0wsRUFBQWhMLElBSXhELFNBQUFnTCxFQUFBaEwsR0FDQTZJLEVBQUEsaUJBQ0E3SSxFQUFBcE8sS0FBQSxZQUNBcVosRUFBQWpMLEdBU0EsU0FBQXdLLEVBQUF4SyxFQUFBM04sR0FDQUEsRUFBQXlYLGNBQ0F6WCxFQUFBeVgsYUFBQSxFQUNBamIsRUFBQWlCLFNBQUFvYixFQUFBbEwsRUFBQTNOLElBSUEsU0FBQTZZLEVBQUFsTCxFQUFBM04sR0FFQSxJQURBLElBQUFsUCxFQUFBa1AsRUFBQWhTLFFBQ0FnUyxFQUFBbVgsVUFBQW5YLEVBQUFpWCxVQUFBalgsRUFBQXhDLE9BQUF3QyxFQUFBaFMsT0FBQWdTLEVBQUFyQyxnQkFDQTZZLEVBQUEsd0JBQ0E3SSxFQUFBaGIsS0FBQSxHQUNBN0IsSUFBQWtQLEVBQUFoUyxTQUVZOEMsRUFBQWtQLEVBQUFoUyxPQUVaZ1MsRUFBQXlYLGFBQUEsRUF5T0EsU0FBQXFCLEVBQUE5ckIsR0FDQXdwQixFQUFBLDRCQUNBeHBCLEVBQUEyRixLQUFBLEdBc0JBLFNBQUFvbUIsRUFBQXBMLEVBQUEzTixHQUNBQSxFQUFBbVgsVUFDQVgsRUFBQSxpQkFDQTdJLEVBQUFoYixLQUFBLElBR0FxTixFQUFBdVgsaUJBQUEsRUFDQXZYLEVBQUF3WCxXQUFBLEVBQ0E3SixFQUFBcE8sS0FBQSxVQUNBcVosRUFBQWpMLEdBQ0EzTixFQUFBaVgsVUFBQWpYLEVBQUFtWCxTQUFBeEosRUFBQWhiLEtBQUEsR0FhQSxTQUFBaW1CLEVBQUFqTCxHQUNBLElBQUEzTixFQUFBMk4sRUFBQS9QLGVBRUEsSUFEQTRZLEVBQUEsT0FBQXhXLEVBQUFpWCxTQUNBalgsRUFBQWlYLFNBQUEsT0FBQXRKLEVBQUFoYixVQW1GQSxTQUFBcW1CLEVBQUFwdEIsRUFBQW9VLEdBRUEsV0FBQUEsRUFBQWhTLE9BQUEsTUFHQWdTLEVBQUE2TixXQUFBMVYsRUFBQTZILEVBQUEvTyxPQUFBd1EsU0FBbUQ3VixNQUFBb1UsRUFBQWhTLFFBRW5EbUssRUFBQTZILEVBQUEwWCxRQUFBMVgsRUFBQS9PLE9BQUF3RyxLQUFBLElBQW1ELElBQUF1SSxFQUFBL08sT0FBQWpELE9BQUFnUyxFQUFBL08sT0FBQXduQixLQUFBcm5CLEtBQWlFNE8sRUFBQS9PLE9BQUEwRixPQUFBcUosRUFBQWhTLFFBQ3BIZ1MsRUFBQS9PLE9BQUFnb0IsU0FHQTlnQixFQVNBLFNBQUF2TSxFQUFBZ0wsRUFBQXNpQixHQUNBLElBQUEvZ0IsRUFDQXZNLEVBQUFnTCxFQUFBNmhCLEtBQUFybkIsS0FBQXBELFFBRUFtSyxFQUFBdkIsRUFBQTZoQixLQUFBcm5CLEtBQUFULE1BQUEsRUFBQS9FLEdBQ0FnTCxFQUFBNmhCLEtBQUFybkIsS0FBQXdGLEVBQUE2aEIsS0FBQXJuQixLQUFBVCxNQUFBL0UsSUFHQXVNLEVBRkd2TSxJQUFBZ0wsRUFBQTZoQixLQUFBcm5CLEtBQUFwRCxPQUVINEksRUFBQTZLLFFBR0F5WCxFQVNBLFNBQUF0dEIsRUFBQWdMLEdBQ0EsSUFBQTNLLEVBQUEySyxFQUFBNmhCLEtBQ0FqdUIsRUFBQSxFQUNBMk4sRUFBQWxNLEVBQUFtRixLQUNBeEYsR0FBQXVNLEVBQUFuSyxPQUNBLEtBQUEvQixJQUFBMGMsTUFBQSxDQUNBLElBQUEvVSxFQUFBM0gsRUFBQW1GLEtBQ0F3Z0IsRUFBQWhtQixFQUFBZ0ksRUFBQTVGLE9BQUE0RixFQUFBNUYsT0FBQXBDLEVBR0EsR0FGQWdtQixJQUFBaGUsRUFBQTVGLE9BQUFtSyxHQUFBdkUsRUFBc0N1RSxHQUFBdkUsRUFBQWpELE1BQUEsRUFBQS9FLEdBRXRDLEtBREFBLEdBQUFnbUIsR0FDQSxDQUNBQSxJQUFBaGUsRUFBQTVGLFVBQ0F4RCxFQUNBeUIsRUFBQTBjLEtBQUEvUixFQUFBNmhCLEtBQUF4c0IsRUFBQTBjLEtBQXVDL1IsRUFBQTZoQixLQUFBN2hCLEVBQUF1aUIsS0FBQSxPQUV2Q3ZpQixFQUFBNmhCLEtBQUF4c0IsRUFDQUEsRUFBQW1GLEtBQUF3QyxFQUFBakQsTUFBQWloQixJQUVBLFFBRUFwbkIsRUFHQSxPQURBb00sRUFBQTVJLFFBQUF4RCxFQUNBMk4sRUFoQ0FpaEIsQ0FBQXh0QixFQUFBZ0wsR0FzQ0EsU0FBQWhMLEVBQUFnTCxHQUNBLElBQUF1QixFQUFBN0ksRUFBQVEsWUFBQWxFLEdBQ0FLLEVBQUEySyxFQUFBNmhCLEtBQ0FqdUIsRUFBQSxFQUNBeUIsRUFBQW1GLEtBQUFKLEtBQUFtSCxHQUNBdk0sR0FBQUssRUFBQW1GLEtBQUFwRCxPQUNBLEtBQUEvQixJQUFBMGMsTUFBQSxDQUNBLElBQUEvVixFQUFBM0csRUFBQW1GLEtBQ0F3Z0IsRUFBQWhtQixFQUFBZ0gsRUFBQTVFLE9BQUE0RSxFQUFBNUUsT0FBQXBDLEVBR0EsR0FGQWdILEVBQUE1QixLQUFBbUgsSUFBQW5LLE9BQUFwQyxFQUFBLEVBQUFnbUIsR0FFQSxLQURBaG1CLEdBQUFnbUIsR0FDQSxDQUNBQSxJQUFBaGYsRUFBQTVFLFVBQ0F4RCxFQUNBeUIsRUFBQTBjLEtBQUEvUixFQUFBNmhCLEtBQUF4c0IsRUFBQTBjLEtBQXVDL1IsRUFBQTZoQixLQUFBN2hCLEVBQUF1aUIsS0FBQSxPQUV2Q3ZpQixFQUFBNmhCLEtBQUF4c0IsRUFDQUEsRUFBQW1GLEtBQUF3QixFQUFBakMsTUFBQWloQixJQUVBLFFBRUFwbkIsRUFHQSxPQURBb00sRUFBQTVJLFFBQUF4RCxFQUNBMk4sRUE5REFraEIsQ0FBQXp0QixFQUFBZ0wsR0FFQSxPQUFBdUIsRUF0QkFtaEIsQ0FBQTF0QixFQUFBb1UsRUFBQS9PLE9BQUErTyxFQUFBMFgsU0FHQXZmLEdBVkEsSUFBQUEsRUE0RkEsU0FBQW9oQixFQUFBNUwsR0FDQSxJQUFBM04sRUFBQTJOLEVBQUEvUCxlQUlBLEdBQUFvQyxFQUFBaFMsT0FBQSxZQUFBNkIsTUFBQSw4Q0FFQW1RLEVBQUFrWCxhQUNBbFgsRUFBQXhDLE9BQUEsRUFDQWhCLEVBQUFpQixTQUFBK2IsRUFBQXhaLEVBQUEyTixJQUlBLFNBQUE2TCxFQUFBeFosRUFBQTJOLEdBRUEzTixFQUFBa1gsWUFBQSxJQUFBbFgsRUFBQWhTLFNBQ0FnUyxFQUFBa1gsWUFBQSxFQUNBdkosRUFBQXhRLFVBQUEsRUFDQXdRLEVBQUFwTyxLQUFBLFFBSUEsU0FBQW5OLEVBQUFxbkIsRUFBQWhqQixHQUNBLFFBQUF0TSxFQUFBLEVBQUFDLEVBQUFxdkIsRUFBQXpyQixPQUFnQzdELEVBQUFDLEVBQU9ELElBQ3ZDLEdBQUFzdkIsRUFBQXR2QixLQUFBc00sRUFBQSxPQUFBdE0sRUFFQSxTQXBvQkEyUyxFQUFBL1EsVUFBQTRHLEtBQUEsU0FBQS9HLEdBQ0E0cUIsRUFBQSxPQUFBNXFCLEdBQ0FBLEVBQUEySCxTQUFBM0gsRUFBQSxJQUNBLElBQUFvVSxFQUFBL1MsS0FBQTJRLGVBQ0E4YixFQUFBOXRCLEVBT0EsR0FMQSxJQUFBQSxJQUFBb1UsRUFBQXFYLGlCQUFBLEdBS0EsSUFBQXpyQixHQUFBb1UsRUFBQW9YLGVBQUFwWCxFQUFBaFMsUUFBQWdTLEVBQUFyQyxlQUFBcUMsRUFBQXhDLE9BR0EsT0FGQWdaLEVBQUEscUJBQUF4VyxFQUFBaFMsT0FBQWdTLEVBQUF4QyxPQUNBLElBQUF3QyxFQUFBaFMsUUFBQWdTLEVBQUF4QyxNQUFBK2IsRUFBQXRzQixNQUE2RDhxQixFQUFBOXFCLE1BQzdELEtBTUEsUUFIQXJCLEVBQUE0c0IsRUFBQTVzQixFQUFBb1UsS0FHQUEsRUFBQXhDLE1BRUEsT0FEQSxJQUFBd0MsRUFBQWhTLFFBQUF1ckIsRUFBQXRzQixNQUNBLEtBMEJBLElBNEJBa0wsRUE1QkF3aEIsRUFBQTNaLEVBQUFvWCxhQWlEQSxPQWhEQVosRUFBQSxnQkFBQW1ELElBR0EsSUFBQTNaLEVBQUFoUyxRQUFBZ1MsRUFBQWhTLE9BQUFwQyxFQUFBb1UsRUFBQXJDLGdCQUVBNlksRUFBQSw2QkFEQW1ELEdBQUEsR0FNQTNaLEVBQUF4QyxPQUFBd0MsRUFBQW1YLFFBRUFYLEVBQUEsbUJBREFtRCxHQUFBLEdBRUdBLElBQ0huRCxFQUFBLFdBQ0F4VyxFQUFBbVgsU0FBQSxFQUNBblgsRUFBQTRPLE1BQUEsRUFFQSxJQUFBNU8sRUFBQWhTLFNBQUFnUyxFQUFBb1gsY0FBQSxHQUVBbnFCLEtBQUEwcUIsTUFBQTNYLEVBQUFyQyxlQUNBcUMsRUFBQTRPLE1BQUEsRUFHQTVPLEVBQUFtWCxVQUFBdnJCLEVBQUE0c0IsRUFBQWtCLEVBQUExWixLQU1BLFFBRkE3SCxFQUFBdk0sRUFBQSxFQUFBb3RCLEVBQUFwdEIsRUFBQW9VLEdBQXNDLE9BR3RDQSxFQUFBb1gsY0FBQSxFQUNBeHJCLEVBQUEsR0FFQW9VLEVBQUFoUyxRQUFBcEMsRUFHQSxJQUFBb1UsRUFBQWhTLFNBR0FnUyxFQUFBeEMsUUFBQXdDLEVBQUFvWCxjQUFBLEdBR0FzQyxJQUFBOXRCLEdBQUFvVSxFQUFBeEMsT0FBQStiLEVBQUF0c0IsT0FHQSxPQUFBa0wsR0FBQWxMLEtBQUFzUyxLQUFBLE9BQUFwSCxHQUVBQSxHQWtFQTJFLEVBQUEvUSxVQUFBNHJCLE1BQUEsU0FBQS9yQixHQUNBcUIsS0FBQXNTLEtBQUEsWUFBQTFQLE1BQUEsZ0NBR0FpTixFQUFBL1EsVUFBQThmLEtBQUEsU0FBQUMsRUFBQThOLEdBQ0EsSUFBQXRkLEVBQUFyUCxLQUNBK1MsRUFBQS9TLEtBQUEyUSxlQUVBLE9BQUFvQyxFQUFBZ1gsWUFDQSxPQUNBaFgsRUFBQStXLE1BQUFqTCxFQUNBLE1BQ0EsT0FDQTlMLEVBQUErVyxNQUFBLENBQUEvVyxFQUFBK1csTUFBQWpMLEdBQ0EsTUFDQSxRQUNBOUwsRUFBQStXLE1BQUFqakIsS0FBQWdZLEdBR0E5TCxFQUFBZ1gsWUFBQSxFQUNBUixFQUFBLHdCQUFBeFcsRUFBQWdYLFdBQUE0QyxHQUVBLElBRUFDLElBRkFELElBQUEsSUFBQUEsRUFBQWxsQixNQUFBb1gsSUFBQXZKLEVBQUF1WCxRQUFBaE8sSUFBQXZKLEVBQUF3WCxPQUVBemMsRUFBQTBjLEVBSUEsU0FBQUMsRUFBQTljLEVBQUErYyxHQUNBMUQsRUFBQSxZQUNBclosSUFBQWIsR0FDQTRkLElBQUEsSUFBQUEsRUFBQUMsYUFDQUQsRUFBQUMsWUFBQSxFQW9CQTNELEVBQUEsV0FFQTFLLEVBQUExTCxlQUFBLFFBQUFrTSxHQUNBUixFQUFBMUwsZUFBQSxTQUFBZ2EsR0FDQXRPLEVBQUExTCxlQUFBLFFBQUErTCxHQUNBTCxFQUFBMUwsZUFBQSxRQUFBcU0sR0FDQVgsRUFBQTFMLGVBQUEsU0FBQTZaLEdBQ0EzZCxFQUFBOEQsZUFBQSxNQUFBOUMsR0FDQWhCLEVBQUE4RCxlQUFBLE1BQUE0WixHQUNBMWQsRUFBQThELGVBQUEsT0FBQTRMLEdBRUFxTyxHQUFBLEdBT0FyYSxFQUFBd1gsWUFBQTFMLEVBQUF2TyxpQkFBQXVPLEVBQUF2TyxlQUFBNlEsV0FBQWpDLEtBaENBLFNBQUE3TyxJQUNBa1osRUFBQSxTQUNBMUssRUFBQXBYLE1BZkFzTCxFQUFBa1gsV0FBQTFhLEVBQUFpQixTQUFBb2MsR0FBNEN2ZCxFQUFBZSxLQUFBLE1BQUF3YyxHQUU1Qy9OLEVBQUExSyxHQUFBLFNBQUE2WSxHQW9CQSxJQUFBOU4sRUE0RkEsU0FBQTdQLEdBQ0Esa0JBQ0EsSUFBQTBELEVBQUExRCxFQUFBc0IsZUFDQTRZLEVBQUEsY0FBQXhXLEVBQUF3WCxZQUNBeFgsRUFBQXdYLFlBQUF4WCxFQUFBd1gsYUFDQSxJQUFBeFgsRUFBQXdYLFlBQUFsQixFQUFBaGEsRUFBQSxVQUNBMEQsRUFBQWlYLFNBQUEsRUFDQTJCLEVBQUF0YyxLQW5HQWdlLENBQUFoZSxHQUNBd1AsRUFBQTFLLEdBQUEsUUFBQStLLEdBRUEsSUFBQWtPLEdBQUEsRUEyQkEsSUFBQUUsR0FBQSxFQUVBLFNBQUF2TyxFQUFBQyxHQUNBdUssRUFBQSxVQUNBK0QsR0FBQSxHQUVBLElBREF6TyxFQUFBcGIsTUFBQXViLElBQ0FzTyxLQUtBLElBQUF2YSxFQUFBZ1gsWUFBQWhYLEVBQUErVyxRQUFBakwsR0FBQTlMLEVBQUFnWCxXQUFBLFFBQUE1a0IsRUFBQTROLEVBQUErVyxNQUFBakwsTUFBQXVPLElBQ0E3RCxFQUFBLDhCQUFBbGEsRUFBQXNCLGVBQUE0WixZQUNBbGIsRUFBQXNCLGVBQUE0WixhQUNBK0MsR0FBQSxHQUVBamUsRUFBQTRQLFNBTUEsU0FBQU8sRUFBQTNMLEdBQ0EwVixFQUFBLFVBQUExVixHQUNBa1osSUFDQWxPLEVBQUExTCxlQUFBLFFBQUFxTSxHQUNBLElBQUE2SixFQUFBeEssRUFBQSxVQUFBQSxFQUFBdk0sS0FBQSxRQUFBdUIsR0FPQSxTQUFBd0wsSUFDQVIsRUFBQTFMLGVBQUEsU0FBQWdhLEdBQ0FKLElBR0EsU0FBQUksSUFDQTVELEVBQUEsWUFDQTFLLEVBQUExTCxlQUFBLFFBQUFrTSxHQUNBME4sSUFJQSxTQUFBQSxJQUNBeEQsRUFBQSxVQUNBbGEsRUFBQTBkLE9BQUFsTyxHQVlBLE9BMURBeFAsRUFBQThFLEdBQUEsT0FBQTRLLEdBOWdCQSxTQUFBck0sRUFBQTZhLEVBQUF6dEIsR0FHQSxzQkFBQTRTLEVBQUEwQixnQkFBQSxPQUFBMUIsRUFBQTBCLGdCQUFBbVosRUFBQXp0QixHQU1BNFMsRUFBQWhCLFNBQUFnQixFQUFBaEIsUUFBQTZiLEdBQXlFcHJCLEVBQUF1USxFQUFBaEIsUUFBQTZiLElBQUE3YSxFQUFBaEIsUUFBQTZiLEdBQUFoYixRQUFBelMsR0FBNkU0UyxFQUFBaEIsUUFBQTZiLEdBQUEsQ0FBQXp0QixFQUFBNFMsRUFBQWhCLFFBQUE2YixJQUF0SjdhLEVBQUF5QixHQUFBb1osRUFBQXp0QixHQWtpQkFzVSxDQUFBeUssRUFBQSxRQUFBVyxHQU9BWCxFQUFBek8sS0FBQSxRQUFBaVAsR0FNQVIsRUFBQXpPLEtBQUEsU0FBQStjLEdBUUF0TyxFQUFBdk0sS0FBQSxPQUFBakQsR0FHQTBELEVBQUFpWCxVQUNBVCxFQUFBLGVBQ0FsYSxFQUFBOFAsVUFHQU4sR0FlQWhQLEVBQUEvUSxVQUFBaXVCLE9BQUEsU0FBQWxPLEdBQ0EsSUFBQTlMLEVBQUEvUyxLQUFBMlEsZUFDQXNjLEVBQUEsQ0FBb0JDLFlBQUEsR0FHcEIsT0FBQW5hLEVBQUFnWCxXQUFBLE9BQUEvcEIsS0FHQSxPQUFBK1MsRUFBQWdYLFdBRUEsT0FBQWxMLE9BQUE5TCxFQUFBK1csTUFBQTlwQixNQUVBNmUsTUFBQTlMLEVBQUErVyxPQUdBL1csRUFBQStXLE1BQUEsS0FDQS9XLEVBQUFnWCxXQUFBLEVBQ0FoWCxFQUFBaVgsU0FBQSxFQUNBbkwsS0FBQXZNLEtBQUEsU0FBQXRTLEtBQUFpdEIsR0FDQWp0QixNQUtBLElBQUE2ZSxFQUFBLENBRUEsSUFBQTJPLEVBQUF6YSxFQUFBK1csTUFDQWptQixFQUFBa1AsRUFBQWdYLFdBQ0FoWCxFQUFBK1csTUFBQSxLQUNBL1csRUFBQWdYLFdBQUEsRUFDQWhYLEVBQUFpWCxTQUFBLEVBRUEsUUFBQTlzQixFQUFBLEVBQW1CQSxFQUFBMkcsRUFBUzNHLElBQzVCc3dCLEVBQUF0d0IsR0FBQW9WLEtBQUEsU0FBQXRTLEtBQUFpdEIsR0FDSyxPQUFBanRCLEtBSUwsSUFBQXlVLEVBQUF0UCxFQUFBNE4sRUFBQStXLE1BQUFqTCxHQUNBLFdBQUFwSyxFQUFBelUsTUFFQStTLEVBQUErVyxNQUFBMkQsT0FBQWhaLEVBQUEsR0FDQTFCLEVBQUFnWCxZQUFBLEVBQ0EsSUFBQWhYLEVBQUFnWCxhQUFBaFgsRUFBQStXLE1BQUEvVyxFQUFBK1csTUFBQSxJQUVBakwsRUFBQXZNLEtBQUEsU0FBQXRTLEtBQUFpdEIsR0FFQWp0QixPQUtBNlAsRUFBQS9RLFVBQUFxVixHQUFBLFNBQUF1WixFQUFBNXRCLEdBQ0EsSUFBQWdJLEVBQUEwVyxFQUFBMWYsVUFBQXFWLEdBQUE5VyxLQUFBMkMsS0FBQTB0QixFQUFBNXRCLEdBRUEsWUFBQTR0QixHQUVBLElBQUExdEIsS0FBQTJRLGVBQUFxWixTQUFBaHFCLEtBQUFtZixjQUNHLGdCQUFBdU8sRUFBQSxDQUNILElBQUEzYSxFQUFBL1MsS0FBQTJRLGVBQ0FvQyxFQUFBa1gsWUFBQWxYLEVBQUFzWCxvQkFDQXRYLEVBQUFzWCxrQkFBQXRYLEVBQUFvWCxjQUFBLEVBQ0FwWCxFQUFBcVgsaUJBQUEsRUFDQXJYLEVBQUFtWCxRQUVPblgsRUFBQWhTLFFBQ1ArcEIsRUFBQTlxQixNQUZBdVAsRUFBQWlCLFNBQUFxYixFQUFBN3JCLE9BT0EsT0FBQThILEdBRUErSCxFQUFBL1EsVUFBQW9WLFlBQUFyRSxFQUFBL1EsVUFBQXFWLEdBU0F0RSxFQUFBL1EsVUFBQXFnQixPQUFBLFdBQ0EsSUFBQXBNLEVBQUEvUyxLQUFBMlEsZUFNQSxPQUxBb0MsRUFBQWlYLFVBQ0FULEVBQUEsVUFDQXhXLEVBQUFpWCxTQUFBLEVBTUEsU0FBQXRKLEVBQUEzTixHQUNBQSxFQUFBdVgsa0JBQ0F2WCxFQUFBdVgsaUJBQUEsRUFDQS9hLEVBQUFpQixTQUFBc2IsRUFBQXBMLEVBQUEzTixJQVJBb00sQ0FBQW5mLEtBQUErUyxJQUVBL1MsTUF1QkE2UCxFQUFBL1EsVUFBQW1nQixNQUFBLFdBT0EsT0FOQXNLLEVBQUEsd0JBQUF2cEIsS0FBQTJRLGVBQUFxWixVQUNBLElBQUFocUIsS0FBQTJRLGVBQUFxWixVQUNBVCxFQUFBLFNBQ0F2cEIsS0FBQTJRLGVBQUFxWixTQUFBLEVBQ0FocUIsS0FBQXNTLEtBQUEsVUFFQXRTLE1BWUE2UCxFQUFBL1EsVUFBQWthLEtBQUEsU0FBQTBILEdBQ0EsSUFBQWQsRUFBQTVmLEtBRUErUyxFQUFBL1MsS0FBQTJRLGVBQ0FnZCxHQUFBLEVBNEJBLFFBQUF6d0IsS0ExQkF3akIsRUFBQXZNLEdBQUEsaUJBRUEsR0FEQW9WLEVBQUEsZUFDQXhXLEVBQUEwWCxVQUFBMVgsRUFBQXhDLE1BQUEsQ0FDQSxJQUFBeU8sRUFBQWpNLEVBQUEwWCxRQUFBaGpCLE1BQ0F1WCxLQUFBamUsUUFBQTZlLEVBQUEvWSxLQUFBbVksR0FHQVksRUFBQS9ZLEtBQUEsUUFHQTZaLEVBQUF2TSxHQUFBLGdCQUFBNkssSUFDQXVLLEVBQUEsZ0JBQ0F4VyxFQUFBMFgsVUFBQXpMLEVBQUFqTSxFQUFBMFgsUUFBQWhuQixNQUFBdWIsSUFHQWpNLEVBQUE2TixZQUFBLE1BQUE1QixLQUE0RWpNLEVBQUE2TixZQUFBNUIsS0FBQWplLFVBRTVFNmUsRUFBQS9ZLEtBQUFtWSxLQUVBMk8sR0FBQSxFQUNBak4sRUFBQXpCLFlBTUF5QixPQUNBcmdCLElBQUFMLEtBQUE5QyxJQUFBLG1CQUFBd2pCLEVBQUF4akIsS0FDQThDLEtBQUE5QyxHQUFBLFNBQUE4UyxHQUNBLGtCQUNBLE9BQUEwUSxFQUFBMVEsR0FBQTdQLE1BQUF1Z0IsRUFBQXhnQixZQUZBLENBSU9oRCxJQUtQLFFBQUF5QixFQUFBLEVBQWlCQSxFQUFBK3FCLEVBQUEzb0IsT0FBeUJwQyxJQUMxQytoQixFQUFBdk0sR0FBQXVWLEVBQUEvcUIsR0FBQXFCLEtBQUFzUyxLQUFBNVQsS0FBQXNCLEtBQUEwcEIsRUFBQS9xQixLQWFBLE9BUkFxQixLQUFBMHFCLE1BQUEsU0FBQS9yQixHQUNBNHFCLEVBQUEsZ0JBQUE1cUIsR0FDQWd2QixJQUNBQSxHQUFBLEVBQ0FqTixFQUFBdkIsV0FJQW5mLE1BR0FwQyxPQUFBQyxlQUFBZ1MsRUFBQS9RLFVBQUEseUJBSUFoQixZQUFBLEVBQ0FDLElBQUEsV0FDQSxPQUFBaUMsS0FBQTJRLGVBQUFELGlCQUtBYixFQUFBK2QsVUFBQTdCLDJDQ3ozQkE5dUIsRUFBQUQsUUFBaUJGLEVBQVEsSUFBUTBVLDJDQ0lqQyxJQUFBakMsRUFBVXpTLEVBQVEsSUE4RGxCLFNBQUErd0IsRUFBQTl0QixFQUFBSyxHQUNBTCxFQUFBdVMsS0FBQSxRQUFBbFMsR0FHQW5ELEVBQUFELFFBQUEsQ0FDQXVpQixRQS9EQSxTQUFBbmYsRUFBQTBRLEdBQ0EsSUFBQThPLEVBQUE1ZixLQUVBOHRCLEVBQUE5dEIsS0FBQTJRLGdCQUFBM1EsS0FBQTJRLGVBQUFDLFVBQ0FtZCxFQUFBL3RCLEtBQUFzUSxnQkFBQXRRLEtBQUFzUSxlQUFBTSxVQUVBLE9BQUFrZCxHQUFBQyxHQUNBamQsRUFDQUEsRUFBQTFRLElBQ0tBLEdBQUFKLEtBQUFzUSxnQkFBQXRRLEtBQUFzUSxlQUFBNFIsY0FDTDNTLEVBQUFpQixTQUFBcWQsRUFBQTd0QixLQUFBSSxHQUVBSixPQU1BQSxLQUFBMlEsaUJBQ0EzUSxLQUFBMlEsZUFBQUMsV0FBQSxHQUlBNVEsS0FBQXNRLGlCQUNBdFEsS0FBQXNRLGVBQUFNLFdBQUEsR0FHQTVRLEtBQUE2USxTQUFBelEsR0FBQSxjQUFBQSxJQUNBMFEsR0FBQTFRLEdBQ0FtUCxFQUFBaUIsU0FBQXFkLEVBQUFqTyxFQUFBeGYsR0FDQXdmLEVBQUF0UCxpQkFDQXNQLEVBQUF0UCxlQUFBNFIsY0FBQSxJQUVLcFIsR0FDTEEsRUFBQTFRLEtBSUFKLE9BMEJBeWtCLFVBdkJBLFdBQ0F6a0IsS0FBQTJRLGlCQUNBM1EsS0FBQTJRLGVBQUFDLFdBQUEsRUFDQTVRLEtBQUEyUSxlQUFBdVosU0FBQSxFQUNBbHFCLEtBQUEyUSxlQUFBSixPQUFBLEVBQ0F2USxLQUFBMlEsZUFBQXNaLFlBQUEsR0FHQWpxQixLQUFBc1EsaUJBQ0F0USxLQUFBc1EsZUFBQU0sV0FBQSxFQUNBNVEsS0FBQXNRLGVBQUFDLE9BQUEsRUFDQXZRLEtBQUFzUSxlQUFBOFEsUUFBQSxFQUNBcGhCLEtBQUFzUSxlQUFBK1EsVUFBQSxFQUNBcmhCLEtBQUFzUSxlQUFBNFIsY0FBQSxtQ0NHQWpsQixFQUFBRCxRQUFBMGhCLEVBRUEsSUFBQWhQLEVBQWE1UyxFQUFRLElBR3JCNlMsRUFBVzdTLEVBQVEsSUFNbkIsU0FBQWt4QixFQUFBbmEsRUFBQTFQLEdBQ0EsSUFBQThwQixFQUFBanVCLEtBQUFrdUIsZ0JBQ0FELEVBQUFFLGNBQUEsRUFFQSxJQUFBcmQsRUFBQW1kLEVBQUFuTSxRQUVBLElBQUFoUixFQUNBLE9BQUE5USxLQUFBc1MsS0FBQSxZQUFBMVAsTUFBQSx5Q0FHQXFyQixFQUFBRyxXQUFBLEtBQ0FILEVBQUFuTSxRQUFBLEtBRUEsTUFBQTNkLEdBQ0FuRSxLQUFBNkcsS0FBQTFDLEdBRUEyTSxFQUFBK0MsR0FFQSxJQUFBd2EsRUFBQXJ1QixLQUFBMlEsZUFDQTBkLEVBQUFuRSxTQUFBLEdBQ0FtRSxFQUFBbEUsY0FBQWtFLEVBQUF0dEIsT0FBQXN0QixFQUFBM2QsZ0JBQ0ExUSxLQUFBMHFCLE1BQUEyRCxFQUFBM2QsZUFJQSxTQUFBZ08sRUFBQXpPLEdBQ0EsS0FBQWpRLGdCQUFBMGUsR0FBQSxXQUFBQSxFQUFBek8sR0FFQVAsRUFBQXJTLEtBQUEyQyxLQUFBaVEsR0FFQWpRLEtBQUFrdUIsZ0JBQUEsQ0FDQUYsaUJBQUF0dkIsS0FBQXNCLE1BQ0FzdUIsZUFBQSxFQUNBSCxjQUFBLEVBQ0FyTSxRQUFBLEtBQ0FzTSxXQUFBLEtBQ0FHLGNBQUEsTUFJQXZ1QixLQUFBMlEsZUFBQXdaLGNBQUEsRUFLQW5xQixLQUFBMlEsZUFBQWdSLE1BQUEsRUFFQTFSLElBQ0EsbUJBQUFBLEVBQUF1ZSxZQUFBeHVCLEtBQUF5dUIsV0FBQXhlLEVBQUF1ZSxXQUVBLG1CQUFBdmUsRUFBQXllLFFBQUExdUIsS0FBQTJ1QixPQUFBMWUsRUFBQXllLFFBSUExdUIsS0FBQW1VLEdBQUEsWUFBQW9QLEdBR0EsU0FBQUEsSUFDQSxJQUFBM0QsRUFBQTVmLEtBRUEsbUJBQUFBLEtBQUEydUIsT0FDQTN1QixLQUFBMnVCLE9BQUEsU0FBQTlhLEVBQUExUCxHQUNBeEUsRUFBQWlnQixFQUFBL0wsRUFBQTFQLEtBR0F4RSxFQUFBSyxLQUFBLFdBMkRBLFNBQUFMLEVBQUErZ0IsRUFBQTdNLEVBQUExUCxHQUNBLEdBQUEwUCxFQUFBLE9BQUE2TSxFQUFBcE8sS0FBQSxRQUFBdUIsR0FPQSxHQUxBLE1BQUExUCxHQUNBdWMsRUFBQTdaLEtBQUExQyxHQUlBdWMsRUFBQXBRLGVBQUF2UCxPQUFBLFVBQUE2QixNQUFBLDhDQUVBLEdBQUE4ZCxFQUFBd04sZ0JBQUFDLGFBQUEsVUFBQXZyQixNQUFBLGtEQUVBLE9BQUE4ZCxFQUFBN1osS0FBQSxNQTdJQThJLEVBQUFDLFNBQWdCOVMsRUFBUSxJQUd4QjZTLEVBQUFDLFNBQUE4TyxFQUFBaFAsR0F1RUFnUCxFQUFBNWYsVUFBQStILEtBQUEsU0FBQW1ZLEVBQUExYixHQUVBLE9BREF0RCxLQUFBa3VCLGdCQUFBSSxlQUFBLEVBQ0E1ZSxFQUFBNVEsVUFBQStILEtBQUF4SixLQUFBMkMsS0FBQWdmLEVBQUExYixJQWFBb2IsRUFBQTVmLFVBQUEydkIsV0FBQSxTQUFBelAsRUFBQTFiLEVBQUF3TixHQUNBLFVBQUFsTyxNQUFBLG9DQUdBOGIsRUFBQTVmLFVBQUE2akIsT0FBQSxTQUFBM0QsRUFBQTFiLEVBQUF3TixHQUNBLElBQUFtZCxFQUFBanVCLEtBQUFrdUIsZ0JBSUEsR0FIQUQsRUFBQW5NLFFBQUFoUixFQUNBbWQsRUFBQUcsV0FBQXBQLEVBQ0FpUCxFQUFBTSxjQUFBanJCLEdBQ0EycUIsRUFBQUUsYUFBQSxDQUNBLElBQUFFLEVBQUFydUIsS0FBQTJRLGdCQUNBc2QsRUFBQUssZUFBQUQsRUFBQWxFLGNBQUFrRSxFQUFBdHRCLE9BQUFzdEIsRUFBQTNkLGdCQUFBMVEsS0FBQTBxQixNQUFBMkQsRUFBQTNkLGlCQU9BZ08sRUFBQTVmLFVBQUE0ckIsTUFBQSxTQUFBL3JCLEdBQ0EsSUFBQXN2QixFQUFBanVCLEtBQUFrdUIsZ0JBRUEsT0FBQUQsRUFBQUcsWUFBQUgsRUFBQW5NLFVBQUFtTSxFQUFBRSxjQUNBRixFQUFBRSxjQUFBLEVBQ0FudUIsS0FBQXl1QixXQUFBUixFQUFBRyxXQUFBSCxFQUFBTSxjQUFBTixFQUFBRCxpQkFJQUMsRUFBQUssZUFBQSxHQUlBNVAsRUFBQTVmLFVBQUErUixTQUFBLFNBQUF6USxFQUFBMFEsR0FDQSxJQUFBOGQsRUFBQTV1QixLQUVBMFAsRUFBQTVRLFVBQUErUixTQUFBeFQsS0FBQTJDLEtBQUFJLEVBQUEsU0FBQXl1QixHQUNBL2QsRUFBQStkLEdBQ0FELEVBQUF0YyxLQUFBLGlDQ3BNQSxTQUFBdFEsR0FBQSxJQUFBOHNCLE9BQUEsSUFBQTlzQixNQUNBLG9CQUFBakMsWUFDQXlCLE9BQ0FyQixFQUFBbUIsU0FBQXhDLFVBQUFxQixNQWlCQSxTQUFBNHVCLEVBQUFDLEVBQUFDLEdBQ0FqdkIsS0FBQWt2QixJQUFBRixFQUNBaHZCLEtBQUFtdkIsU0FBQUYsRUFmQWp5QixFQUFBMlksV0FBQSxXQUNBLFdBQUFvWixFQUFBNXVCLEVBQUE5QyxLQUFBc1ksV0FBQW1aLEVBQUE1dUIsV0FBQTBWLGVBRUE1WSxFQUFBb3lCLFlBQUEsV0FDQSxXQUFBTCxFQUFBNXVCLEVBQUE5QyxLQUFBK3hCLFlBQUFOLEVBQUE1dUIsV0FBQW12QixnQkFFQXJ5QixFQUFBNFksYUFDQTVZLEVBQUFxeUIsY0FBQSxTQUFBbFosR0FDQUEsR0FDQUEsRUFBQW1aLFNBUUFQLEVBQUFqd0IsVUFBQXl3QixNQUFBUixFQUFBandCLFVBQUEwd0IsSUFBQSxhQUNBVCxFQUFBandCLFVBQUF3d0IsTUFBQSxXQUNBdHZCLEtBQUFtdkIsU0FBQTl4QixLQUFBeXhCLEVBQUE5dUIsS0FBQWt2QixNQUlBbHlCLEVBQUF5eUIsT0FBQSxTQUFBQyxFQUFBQyxHQUNBL1osYUFBQThaLEVBQUFFLGdCQUNBRixFQUFBRyxhQUFBRixHQUdBM3lCLEVBQUE4eUIsU0FBQSxTQUFBSixHQUNBOVosYUFBQThaLEVBQUFFLGdCQUNBRixFQUFBRyxjQUFBLEdBR0E3eUIsRUFBQSt5QixhQUFBL3lCLEVBQUFnekIsT0FBQSxTQUFBTixHQUNBOVosYUFBQThaLEVBQUFFLGdCQUVBLElBQUFELEVBQUFELEVBQUFHLGFBQ0FGLEdBQUEsSUFDQUQsRUFBQUUsZUFBQWphLFdBQUEsV0FDQStaLEVBQUFPLFlBQ0FQLEVBQUFPLGNBQ0tOLEtBS0w3eUIsRUFBUSxJQUlSRSxFQUFBMGlCLGFBQUEsb0JBQUEzZixXQUFBMmYsbUJBQ0EsSUFBQTFkLEtBQUEwZCxjQUNBMWYsV0FBQTBmLGFBQ0ExaUIsRUFBQWt6QixlQUFBLG9CQUFBbndCLFdBQUFtd0IscUJBQ0EsSUFBQWx1QixLQUFBa3VCLGdCQUNBbHdCLFdBQUFrd0IsbUZDMURBLElBQUE3dEIsRUFBYXZGLEVBQVEsSUFBYXVGLE9BQ2xDc04sRUFBVzdTLEVBQVEsSUFNbkJHLEVBQUFELFFBQUEsV0FDQSxTQUFBeXNCLEtBVkEsU0FBQWhwQixFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQVczRnd2QixDQUFBbndCLEtBQUF5cEIsR0FFQXpwQixLQUFBd3JCLEtBQUEsS0FDQXhyQixLQUFBa3NCLEtBQUEsS0FDQWxzQixLQUFBZSxPQUFBLEVBcURBLE9BbERBMG9CLEVBQUEzcUIsVUFBQStILEtBQUEsU0FBQWtKLEdBQ0EsSUFBQStMLEVBQUEsQ0FBaUIzWCxLQUFBNEwsRUFBQTJMLEtBQUEsTUFDakIxYixLQUFBZSxPQUFBLEVBQUFmLEtBQUFrc0IsS0FBQXhRLEtBQUFJLEVBQWdEOWIsS0FBQXdyQixLQUFBMVAsRUFDaEQ5YixLQUFBa3NCLEtBQUFwUSxJQUNBOWIsS0FBQWUsUUFHQTBvQixFQUFBM3FCLFVBQUF5VCxRQUFBLFNBQUF4QyxHQUNBLElBQUErTCxFQUFBLENBQWlCM1gsS0FBQTRMLEVBQUEyTCxLQUFBMWIsS0FBQXdyQixNQUNqQixJQUFBeHJCLEtBQUFlLFNBQUFmLEtBQUFrc0IsS0FBQXBRLEdBQ0E5YixLQUFBd3JCLEtBQUExUCxJQUNBOWIsS0FBQWUsUUFHQTBvQixFQUFBM3FCLFVBQUEwVixNQUFBLFdBQ0EsT0FBQXhVLEtBQUFlLE9BQUEsQ0FDQSxJQUFBbUssRUFBQWxMLEtBQUF3ckIsS0FBQXJuQixLQUdBLE9BRkEsSUFBQW5FLEtBQUFlLE9BQUFmLEtBQUF3ckIsS0FBQXhyQixLQUFBa3NCLEtBQUEsS0FBd0Rsc0IsS0FBQXdyQixLQUFBeHJCLEtBQUF3ckIsS0FBQTlQLE9BQ3hEMWIsS0FBQWUsT0FDQW1LLElBR0F1ZSxFQUFBM3FCLFVBQUFrdEIsTUFBQSxXQUNBaHNCLEtBQUF3ckIsS0FBQXhyQixLQUFBa3NCLEtBQUEsS0FDQWxzQixLQUFBZSxPQUFBLEdBR0Ewb0IsRUFBQTNxQixVQUFBMEwsS0FBQSxTQUFBdkwsR0FDQSxPQUFBZSxLQUFBZSxPQUFBLFNBR0EsSUFGQSxJQUFBL0IsRUFBQWdCLEtBQUF3ckIsS0FDQXRnQixFQUFBLEdBQUFsTSxFQUFBbUYsS0FDQW5GLElBQUEwYyxNQUNBeFEsR0FBQWpNLEVBQUFELEVBQUFtRixLQUNLLE9BQUErRyxHQUdMdWUsRUFBQTNxQixVQUFBNEssT0FBQSxTQUFBL0ssR0FDQSxPQUFBcUIsS0FBQWUsT0FBQSxPQUFBc0IsRUFBQXNHLE1BQUEsR0FDQSxPQUFBM0ksS0FBQWUsT0FBQSxPQUFBZixLQUFBd3JCLEtBQUFybkIsS0FJQSxJQUhBLElBcERBa0wsRUFBQXhPLEVBQUFvRixFQW9EQWlGLEVBQUE3SSxFQUFBUSxZQUFBbEUsSUFBQSxHQUNBSyxFQUFBZ0IsS0FBQXdyQixLQUNBdHVCLEVBQUEsRUFDQThCLEdBdkRBcVEsRUF3REFyUSxFQUFBbUYsS0F4REF0RCxFQXdEQXFLLEVBeERBakYsRUF3REEvSSxFQXZEQW1TLEVBQUF0TCxLQUFBbEQsRUFBQW9GLEdBd0RBL0ksR0FBQThCLEVBQUFtRixLQUFBcEQsT0FDQS9CLElBQUEwYyxLQUVBLE9BQUF4USxHQUdBdWUsRUEzREEsR0E4REE5WixLQUFBdEYsU0FBQXNGLEVBQUF0RixRQUFBK2xCLFNBQ0FuekIsRUFBQUQsUUFBQThCLFVBQUE2USxFQUFBdEYsUUFBQStsQixRQUFBLFdBQ0EsSUFBQTl2QixFQUFBcVAsRUFBQXRGLFFBQUEsQ0FBNEJ0SixPQUFBZixLQUFBZSxTQUM1QixPQUFBZixLQUFBK0IsWUFBQXRFLEtBQUEsSUFBQTZDLHNDQzVFQSxTQUFBMEIsRUFBQXNULElBQUEsU0FBQXRULEVBQUEzQixHQUNBLGFBRUEsSUFBQTJCLEVBQUEwZCxhQUFBLENBSUEsSUFJQTJRLEVBNkhBQyxFQVpBQyxFQXJCQUMsRUFDQUMsRUFqR0FDLEVBQUEsRUFDQUMsRUFBQSxHQUNBQyxHQUFBLEVBQ0FDLEVBQUE3dUIsRUFBQTh1QixTQW9KQUMsRUFBQW56QixPQUFBK0QsZ0JBQUEvRCxPQUFBK0QsZUFBQUssR0FDQSt1QixPQUFBcGIsV0FBQW9iLEVBQUEvdUIsRUFHVSxxQkFBVixHQUFVdUMsU0FBQWxILEtBQUEyRSxFQUFBc1QsU0FwRlYrYSxFQUFBLFNBQUE3UyxHQUNBbEksRUFBQTlFLFNBQUEsV0FBMEN3Z0IsRUFBQXhULE9BSTFDLFdBR0EsR0FBQXhiLEVBQUFpdkIsY0FBQWp2QixFQUFBa3ZCLGNBQUEsQ0FDQSxJQUFBQyxHQUFBLEVBQ0FDLEVBQUFwdkIsRUFBQXF2QixVQU1BLE9BTEFydkIsRUFBQXF2QixVQUFBLFdBQ0FGLEdBQUEsR0FFQW52QixFQUFBaXZCLFlBQUEsUUFDQWp2QixFQUFBcXZCLFVBQUFELEVBQ0FELEdBd0VLRyxHQUlBdHZCLEVBQUF1dkIsaUJBOUNMaEIsRUFBQSxJQUFBZ0IsZ0JBQ0FDLE1BQUFILFVBQUEsU0FBQTlELEdBRUF5RCxFQURBekQsRUFBQXBwQixPQUlBa3NCLEVBQUEsU0FBQTdTLEdBQ0ErUyxFQUFBa0IsTUFBQVIsWUFBQXpULEtBMkNLcVQsR0FBQSx1QkFBQUEsRUFBQWEsY0FBQSxXQXRDTHBCLEVBQUFPLEVBQUFjLGdCQUNBdEIsRUFBQSxTQUFBN1MsR0FHQSxJQUFBb1UsRUFBQWYsRUFBQWEsY0FBQSxVQUNBRSxFQUFBQyxtQkFBQSxXQUNBYixFQUFBeFQsR0FDQW9VLEVBQUFDLG1CQUFBLEtBQ0F2QixFQUFBd0IsWUFBQUYsR0FDQUEsRUFBQSxNQUVBdEIsRUFBQXlCLFlBQUFILEtBS0F2QixFQUFBLFNBQUE3UyxHQUNBN0gsV0FBQXFiLEVBQUEsRUFBQXhULEtBbERBZ1QsRUFBQSxnQkFBQTVvQixLQUFBb3FCLFNBQUEsSUFDQXZCLEVBQUEsU0FBQWxELEdBQ0FBLEVBQUF6TyxTQUFBOWMsR0FDQSxpQkFBQXVyQixFQUFBcHBCLE1BQ0EsSUFBQW9wQixFQUFBcHBCLEtBQUFnQixRQUFBcXJCLElBQ0FRLEdBQUF6RCxFQUFBcHBCLEtBQUFULE1BQUE4c0IsRUFBQXp2QixVQUlBaUIsRUFBQWl3QixpQkFDQWp3QixFQUFBaXdCLGlCQUFBLFVBQUF4QixHQUFBLEdBRUF6dUIsRUFBQWt3QixZQUFBLFlBQUF6QixHQUdBSixFQUFBLFNBQUE3UyxHQUNBeGIsRUFBQWl2QixZQUFBVCxFQUFBaFQsRUFBQSxPQWdFQXVULEVBQUFyUixhQTFLQSxTQUFBSSxHQUVBLG1CQUFBQSxJQUNBQSxFQUFBLElBQUF4ZSxTQUFBLEdBQUF3ZSxJQUlBLElBREEsSUFBQTdmLEVBQUEsSUFBQStLLE1BQUE5SyxVQUFBYSxPQUFBLEdBQ0E3RCxFQUFBLEVBQXFCQSxFQUFBK0MsRUFBQWMsT0FBaUI3RCxJQUN0QytDLEVBQUEvQyxHQUFBZ0QsVUFBQWhELEVBQUEsR0FHQSxJQUFBaTFCLEVBQUEsQ0FBa0JyUyxXQUFBN2YsUUFHbEIsT0FGQTB3QixFQUFBRCxHQUFBeUIsRUFDQTlCLEVBQUFLLEdBQ0FBLEtBNkpBSyxFQUFBYixpQkExSkEsU0FBQUEsRUFBQTFTLFVBQ0FtVCxFQUFBblQsR0F5QkEsU0FBQXdULEVBQUF4VCxHQUdBLEdBQUFvVCxFQUdBamIsV0FBQXFiLEVBQUEsRUFBQXhULE9BQ1MsQ0FDVCxJQUFBMlUsRUFBQXhCLEVBQUFuVCxHQUNBLEdBQUEyVSxFQUFBLENBQ0F2QixHQUFBLEVBQ0EsS0FqQ0EsU0FBQXVCLEdBQ0EsSUFBQXJTLEVBQUFxUyxFQUFBclMsU0FDQTdmLEVBQUFreUIsRUFBQWx5QixLQUNBLE9BQUFBLEVBQUFjLFFBQ0EsT0FDQStlLElBQ0EsTUFDQSxPQUNBQSxFQUFBN2YsRUFBQSxJQUNBLE1BQ0EsT0FDQTZmLEVBQUE3ZixFQUFBLEdBQUFBLEVBQUEsSUFDQSxNQUNBLE9BQ0E2ZixFQUFBN2YsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFDQSxNQUNBLFFBQ0E2ZixFQUFBM2YsTUFBQUUsRUFBQUosSUFpQkFtVyxDQUFBK2IsR0FDaUIsUUFDakJqQyxFQUFBMVMsR0FDQW9ULEdBQUEsTUF2RUEsQ0F5TEMsb0JBQUE3d0IsVUFBQSxJQUFBaUMsRUFBQWhDLEtBQUFnQyxFQUFBakMsNERDaklELFNBQUFxeUIsRUFBQTMwQixHQUVBLElBQ0EsSUFBQXVFLEVBQUFxd0IsYUFBQSxTQUNHLE1BQUEzTyxHQUNILFNBRUEsSUFBQXpmLEVBQUFqQyxFQUFBcXdCLGFBQUE1MEIsR0FDQSxhQUFBd0csR0FDQSxTQUFBd0IsT0FBQXhCLEdBQUFXLGNBNURBM0gsRUFBQUQsUUFvQkEsU0FBQThDLEVBQUF3eUIsR0FDQSxHQUFBRixFQUFBLGlCQUNBLE9BQUF0eUIsRUFHQSxJQUFBMFMsR0FBQSxFQWVBLE9BZEEsV0FDQSxJQUFBQSxFQUFBLENBQ0EsR0FBQTRmLEVBQUEsb0JBQ0EsVUFBQXh2QixNQUFBMHZCLEdBQ09GLEVBQUEsb0JBQ1B4ZixRQUFBMmYsTUFBQUQsR0FFQTFmLFFBQUFDLEtBQUF5ZixHQUVBOWYsR0FBQSxFQUVBLE9BQUExUyxFQUFBSyxNQUFBSCxLQUFBRSw2RENmQWpELEVBQUFELFFBQUEyaEIsRUFFQSxJQUFBRCxFQUFnQjVoQixFQUFRLElBR3hCNlMsRUFBVzdTLEVBQVEsSUFNbkIsU0FBQTZoQixFQUFBMU8sR0FDQSxLQUFBalEsZ0JBQUEyZSxHQUFBLFdBQUFBLEVBQUExTyxHQUVBeU8sRUFBQXJoQixLQUFBMkMsS0FBQWlRLEdBUkFOLEVBQUFDLFNBQWdCOVMsRUFBUSxJQUd4QjZTLEVBQUFDLFNBQUErTyxFQUFBRCxHQVFBQyxFQUFBN2YsVUFBQTJ2QixXQUFBLFNBQUF6UCxFQUFBMWIsRUFBQXdOLEdBQ0FBLEVBQUEsS0FBQWtPLHFCQzdDQS9oQixFQUFBRCxRQUFpQkYsRUFBUSxxQkNBekJHLEVBQUFELFFBQWlCRixFQUFRLHFCQ0F6QkcsRUFBQUQsUUFBaUJGLEVBQVEsSUFBWTRoQiwyQkNBckN6aEIsRUFBQUQsUUFBaUJGLEVBQVEsSUFBWTZoQix1RENDckMsSUFBQXRjLEVBQWF2RixFQUFRLElBQWF1RixPQUNsQ3FjLEVBQWdCNWhCLEVBQVEsSUFBUTRoQixVQVNoQyxTQUFBOFQsRUFBQXJNLEdBQ0F6SCxFQUFBcmhCLEtBQUEyQyxNQUVBQSxLQUFBcW1CLE9BQUFoa0IsRUFBQVEsWUFBQXNqQixHQUNBbm1CLEtBQUF1bUIsV0FBQUosRUFDQW5tQixLQUFBeXlCLGFBQUEsRUFDQXp5QixLQUFBMHlCLFFBQUEsVUFFQTF5QixLQUFBMnlCLFlBQUEsRUFoQmU3MUIsRUFBUSxHQW1CdkI4UyxDQUFBNGlCLEVBQUE5VCxHQUVBOFQsRUFBQTF6QixVQUFBMnZCLFdBQUEsU0FBQXpQLEVBQUExYixFQUFBd2MsR0FDQSxJQUFBcGdCLEVBQUEsS0FDQSxJQUNBTSxLQUFBeW1CLE9BQUF6SCxFQUFBMWIsR0FDRyxNQUFBbEQsR0FDSFYsRUFBQVUsRUFHQTBmLEVBQUFwZ0IsSUFHQTh5QixFQUFBMXpCLFVBQUE2dkIsT0FBQSxTQUFBN08sR0FDQSxJQUFBcGdCLEVBQUEsS0FDQSxJQUNBTSxLQUFBNkcsS0FBQTdHLEtBQUErbUIsVUFDRyxNQUFBM21CLEdBQ0hWLEVBQUFVLEVBR0EwZixFQUFBcGdCLElBR0E4eUIsRUFBQTF6QixVQUFBMm5CLE9BQUEsU0FBQXRpQixFQUFBYixHQUVBLEdBM0NBLFNBQUFXLEVBQUEydUIsR0FDQSxJQUFBdndCLEVBQUF1QixTQUFBSyxJQUFBLGlCQUFBQSxFQUNBLFVBQUF0RCxVQUFBaXlCLEVBQUEsaUNBd0NBQyxDQUFBMXVCLEVBQUEsUUFDQW5FLEtBQUEyeUIsV0FBQSxVQUFBL3ZCLE1BQUEseUJBQ0FQLEVBQUF1QixTQUFBTyxPQUFBOUIsRUFBQVMsS0FBQXFCLEVBQUFiLElBS0EsSUFGQSxJQUFBb2pCLEVBQUExbUIsS0FBQXFtQixPQUNBcGdCLEVBQUEsRUFDQWpHLEtBQUF5eUIsYUFBQXR1QixFQUFBcEQsT0FBQWtGLEdBQUFqRyxLQUFBdW1CLFlBQUEsQ0FDQSxRQUFBcnBCLEVBQUE4QyxLQUFBeXlCLGFBQW1DdjFCLEVBQUE4QyxLQUFBdW1CLFlBQXFCRyxFQUFBeHBCLEtBQUFpSCxFQUFBOEIsS0FDeERqRyxLQUFBOG1CLFVBQ0E5bUIsS0FBQXl5QixhQUFBLEVBRUEsS0FBQXhzQixFQUFBOUIsRUFBQXBELFFBQUEybEIsRUFBQTFtQixLQUFBeXlCLGdCQUFBdHVCLEVBQUE4QixLQUdBLFFBQUFGLEVBQUEsRUFBQStzQixFQUFBLEVBQUEzdUIsRUFBQXBELE9BQTBDK3hCLEVBQUEsSUFBVy9zQixFQUNyRC9GLEtBQUEweUIsUUFBQTNzQixJQUFBK3NCLEdBQ0FBLEVBQUE5eUIsS0FBQTB5QixRQUFBM3NCLEdBQUEsY0FDQSxJQUFBL0YsS0FBQTB5QixRQUFBM3NCLElBQUEsV0FBQStzQixHQUdBLE9BQUE5eUIsTUFHQXd5QixFQUFBMXpCLFVBQUFnb0IsUUFBQSxXQUNBLFVBQUFsa0IsTUFBQSwrQkFHQTR2QixFQUFBMXpCLFVBQUFpb0IsT0FBQSxTQUFBempCLEdBQ0EsR0FBQXRELEtBQUEyeUIsV0FBQSxVQUFBL3ZCLE1BQUEseUJBQ0E1QyxLQUFBMnlCLFlBQUEsRUFFQSxJQUFBNUwsRUFBQS9tQixLQUFBK3lCLGVBQ0ExeUIsSUFBQWlELElBQUF5akIsSUFBQXhpQixTQUFBakIsSUFHQXRELEtBQUFxbUIsT0FBQWxkLEtBQUEsR0FDQW5KLEtBQUF5eUIsYUFBQSxFQUNBLFFBQUF2MUIsRUFBQSxFQUFpQkEsRUFBQSxJQUFPQSxFQUFBOEMsS0FBQTB5QixRQUFBeDFCLEdBQUEsRUFFeEIsT0FBQTZwQixHQUdBeUwsRUFBQTF6QixVQUFBaTBCLFFBQUEsV0FDQSxVQUFBbndCLE1BQUEsK0JBR0EzRixFQUFBRCxRQUFBdzFCLG1CQ3RGQSxJQUFBNWlCLEVBQWU5UyxFQUFRLElBQ3ZCb3BCLEVBQVdwcEIsRUFBUSxJQUNuQnVGLEVBQWF2RixFQUFRLElBQWF1RixPQUVsQzJ3QixFQUFBLENBQ0EsNENBQ0EsMkNBQ0EsMENBQ0EsNENBQ0EsMENBQ0EsMkNBQ0EsNENBQ0EsMENBQ0EsMENBQ0EsNENBQ0EsNENBQ0EsMkNBQ0Esd0NBQ0EsMkNBQ0EsNENBQ0EsNkNBR0FDLEVBQUEsSUFBQWpvQixNQUFBLElBRUEsU0FBQWtvQixJQUNBbHpCLEtBQUF5UixPQUVBelIsS0FBQW16QixHQUFBRixFQUVBL00sRUFBQTdvQixLQUFBMkMsS0FBQSxPQWtCQSxTQUFBb3pCLEVBQUE1cEIsRUFBQUMsRUFBQTRwQixHQUNBLE9BQUFBLEVBQUE3cEIsR0FBQUMsRUFBQTRwQixHQUdBLFNBQUFDLEVBQUE5cEIsRUFBQUMsRUFBQTRwQixHQUNBLE9BQUE3cEIsRUFBQUMsRUFBQTRwQixHQUFBN3BCLEVBQUFDLEdBR0EsU0FBQThwQixFQUFBL3BCLEdBQ0EsT0FBQUEsSUFBQSxFQUFBQSxHQUFBLEtBQUFBLElBQUEsR0FBQUEsR0FBQSxLQUFBQSxJQUFBLEdBQUFBLEdBQUEsSUFHQSxTQUFBZ3FCLEVBQUFocUIsR0FDQSxPQUFBQSxJQUFBLEVBQUFBLEdBQUEsS0FBQUEsSUFBQSxHQUFBQSxHQUFBLEtBQUFBLElBQUEsR0FBQUEsR0FBQSxHQUdBLFNBQUFpcUIsRUFBQWpxQixHQUNBLE9BQUFBLElBQUEsRUFBQUEsR0FBQSxLQUFBQSxJQUFBLEdBQUFBLEdBQUEsSUFBQUEsSUFBQSxFQWhDQW9HLEVBQUFzakIsRUFBQWhOLEdBRUFnTixFQUFBcDBCLFVBQUEyUyxLQUFBLFdBVUEsT0FUQXpSLEtBQUEwekIsR0FBQSxXQUNBMXpCLEtBQUEyekIsR0FBQSxXQUNBM3pCLEtBQUE0ekIsR0FBQSxXQUNBNXpCLEtBQUE2ekIsR0FBQSxXQUNBN3pCLEtBQUE4ekIsR0FBQSxXQUNBOXpCLEtBQUErekIsR0FBQSxXQUNBL3pCLEtBQUFnMEIsR0FBQSxVQUNBaDBCLEtBQUFpMEIsR0FBQSxXQUVBajBCLE1BMkJBa3pCLEVBQUFwMEIsVUFBQWdvQixRQUFBLFNBQUFvTixHQVlBLElBWEEsSUFMQTFxQixFQUtBeXBCLEVBQUFqekIsS0FBQW16QixHQUVBNXBCLEVBQUEsRUFBQXZKLEtBQUEwekIsR0FDQTV1QixFQUFBLEVBQUE5RSxLQUFBMnpCLEdBQ0FwMkIsRUFBQSxFQUFBeUMsS0FBQTR6QixHQUNBcDJCLEVBQUEsRUFBQXdDLEtBQUE2ekIsR0FDQXR5QixFQUFBLEVBQUF2QixLQUFBOHpCLEdBQ0FLLEVBQUEsRUFBQW4wQixLQUFBK3pCLEdBQ0ExeUIsRUFBQSxFQUFBckIsS0FBQWcwQixHQUNBSSxFQUFBLEVBQUFwMEIsS0FBQWkwQixHQUVBLzJCLEVBQUEsRUFBaUJBLEVBQUEsS0FBUUEsRUFBQSsxQixFQUFBLzFCLEdBQUFnM0IsRUFBQWxuQixZQUFBLEVBQUE5UCxHQUN6QixLQUFRQSxFQUFBLEtBQVFBLEVBQUErMUIsRUFBQS8xQixHQUFBLEtBakJoQnNNLEVBaUJnQnlwQixFQUFBLzFCLEVBQUEsTUFoQmhCLEdBQUFzTSxHQUFBLEtBQUFBLElBQUEsR0FBQUEsR0FBQSxJQUFBQSxJQUFBLElBZ0JnQnlwQixFQUFBLzFCLEVBQUEsR0FBQXUyQixFQUFBUixFQUFBLzFCLEVBQUEsS0FBQSsxQixFQUFBLzFCLEVBQUEsSUFFaEIsUUFBQTZJLEVBQUEsRUFBaUJBLEVBQUEsS0FBUUEsRUFBQSxDQUN6QixJQUFBc3VCLEVBQUFELEVBQUFaLEVBQUFqeUIsR0FBQTZ4QixFQUFBN3hCLEVBQUE0eUIsRUFBQTl5QixHQUFBMnhCLEVBQUFqdEIsR0FBQWt0QixFQUFBbHRCLEdBQUEsRUFDQXV1QixFQUFBZixFQUFBaHFCLEdBQUErcEIsRUFBQS9wQixFQUFBekUsRUFBQXZILEdBQUEsRUFFQTYyQixFQUFBL3lCLEVBQ0FBLEVBQUE4eUIsRUFDQUEsRUFBQTV5QixFQUNBQSxFQUFBL0QsRUFBQTYyQixFQUFBLEVBQ0E3MkIsRUFBQUQsRUFDQUEsRUFBQXVILEVBQ0FBLEVBQUF5RSxFQUNBQSxFQUFBOHFCLEVBQUFDLEVBQUEsRUFHQXQwQixLQUFBMHpCLEdBQUFucUIsRUFBQXZKLEtBQUEwekIsR0FBQSxFQUNBMXpCLEtBQUEyekIsR0FBQTd1QixFQUFBOUUsS0FBQTJ6QixHQUFBLEVBQ0EzekIsS0FBQTR6QixHQUFBcjJCLEVBQUF5QyxLQUFBNHpCLEdBQUEsRUFDQTV6QixLQUFBNnpCLEdBQUFyMkIsRUFBQXdDLEtBQUE2ekIsR0FBQSxFQUNBN3pCLEtBQUE4ekIsR0FBQXZ5QixFQUFBdkIsS0FBQTh6QixHQUFBLEVBQ0E5ekIsS0FBQSt6QixHQUFBSSxFQUFBbjBCLEtBQUErekIsR0FBQSxFQUNBL3pCLEtBQUFnMEIsR0FBQTN5QixFQUFBckIsS0FBQWcwQixHQUFBLEVBQ0FoMEIsS0FBQWkwQixHQUFBRyxFQUFBcDBCLEtBQUFpMEIsR0FBQSxHQUdBZixFQUFBcDBCLFVBQUF1b0IsTUFBQSxXQUNBLElBQUFrTixFQUFBbHlCLEVBQUFRLFlBQUEsSUFXQSxPQVRBMHhCLEVBQUFsbUIsYUFBQXJPLEtBQUEwekIsR0FBQSxHQUNBYSxFQUFBbG1CLGFBQUFyTyxLQUFBMnpCLEdBQUEsR0FDQVksRUFBQWxtQixhQUFBck8sS0FBQTR6QixHQUFBLEdBQ0FXLEVBQUFsbUIsYUFBQXJPLEtBQUE2ekIsR0FBQSxJQUNBVSxFQUFBbG1CLGFBQUFyTyxLQUFBOHpCLEdBQUEsSUFDQVMsRUFBQWxtQixhQUFBck8sS0FBQSt6QixHQUFBLElBQ0FRLEVBQUFsbUIsYUFBQXJPLEtBQUFnMEIsR0FBQSxJQUNBTyxFQUFBbG1CLGFBQUFyTyxLQUFBaTBCLEdBQUEsSUFFQU0sR0FHQXQzQixFQUFBRCxRQUFBazJCLG1CQ3RJQSxJQUFBdGpCLEVBQWU5UyxFQUFRLElBQ3ZCb3BCLEVBQVdwcEIsRUFBUSxJQUNuQnVGLEVBQWF2RixFQUFRLElBQWF1RixPQUVsQzJ3QixFQUFBLENBQ0EsMkNBQ0EsNENBQ0EsMkNBQ0EsNENBQ0EsMkNBQ0EsMkNBQ0EsMkNBQ0EsMkNBQ0EsMkNBQ0EsMENBQ0EsMkNBQ0EsNENBQ0EsMkNBQ0EsNENBQ0EsNENBQ0EseUNBQ0EsMENBQ0EsNENBQ0EsNENBQ0EsMkNBQ0EsNENBQ0EsMkNBQ0EsNENBQ0EsMENBQ0EsMENBQ0EsMENBQ0EsMkNBQ0EsNENBQ0EsNENBQ0EsMkNBQ0EsMkNBQ0EsNENBQ0EsMkNBQ0EsNENBQ0EsMENBQ0EseUNBQ0EseUNBQ0EsMkNBQ0EsNENBQ0EsNENBR0FDLEVBQUEsSUFBQWpvQixNQUFBLEtBRUEsU0FBQXdwQixJQUNBeDBCLEtBQUF5UixPQUNBelIsS0FBQW16QixHQUFBRixFQUVBL00sRUFBQTdvQixLQUFBMkMsS0FBQSxTQTJCQSxTQUFBeTBCLEVBQUFqckIsRUFBQUMsRUFBQTRwQixHQUNBLE9BQUFBLEVBQUE3cEIsR0FBQUMsRUFBQTRwQixHQUdBLFNBQUFDLEVBQUE5cEIsRUFBQUMsRUFBQTRwQixHQUNBLE9BQUE3cEIsRUFBQUMsRUFBQTRwQixHQUFBN3BCLEVBQUFDLEdBR0EsU0FBQThwQixFQUFBL3BCLEVBQUFrckIsR0FDQSxPQUFBbHJCLElBQUEsR0FBQWtyQixHQUFBLElBQUFBLElBQUEsRUFBQWxyQixHQUFBLEtBQUFrckIsSUFBQSxFQUFBbHJCLEdBQUEsSUFHQSxTQUFBZ3FCLEVBQUFocUIsRUFBQWtyQixHQUNBLE9BQUFsckIsSUFBQSxHQUFBa3JCLEdBQUEsS0FBQWxyQixJQUFBLEdBQUFrckIsR0FBQSxLQUFBQSxJQUFBLEVBQUFsckIsR0FBQSxJQUdBLFNBQUFtckIsRUFBQW5yQixFQUFBa3JCLEdBQ0EsT0FBQWxyQixJQUFBLEVBQUFrckIsR0FBQSxLQUFBbHJCLElBQUEsRUFBQWtyQixHQUFBLElBQUFsckIsSUFBQSxFQUdBLFNBQUFvckIsRUFBQXByQixFQUFBa3JCLEdBQ0EsT0FBQWxyQixJQUFBLEVBQUFrckIsR0FBQSxLQUFBbHJCLElBQUEsRUFBQWtyQixHQUFBLEtBQUFsckIsSUFBQSxFQUFBa3JCLEdBQUEsSUFHQSxTQUFBRyxFQUFBcnJCLEVBQUFrckIsR0FDQSxPQUFBbHJCLElBQUEsR0FBQWtyQixHQUFBLEtBQUFBLElBQUEsR0FBQWxyQixHQUFBLEdBQUFBLElBQUEsRUFHQSxTQUFBc3JCLEVBQUF0ckIsRUFBQWtyQixHQUNBLE9BQUFsckIsSUFBQSxHQUFBa3JCLEdBQUEsS0FBQUEsSUFBQSxHQUFBbHJCLEdBQUEsSUFBQUEsSUFBQSxFQUFBa3JCLEdBQUEsSUFHQSxTQUFBSyxFQUFBeHJCLEVBQUF6RSxHQUNBLE9BQUF5RSxJQUFBLEVBQUF6RSxJQUFBLE1BekRBOEssRUFBQTRrQixFQUFBdE8sR0FFQXNPLEVBQUExMUIsVUFBQTJTLEtBQUEsV0FtQkEsT0FsQkF6UixLQUFBZzFCLElBQUEsV0FDQWgxQixLQUFBaTFCLElBQUEsV0FDQWoxQixLQUFBazFCLElBQUEsV0FDQWwxQixLQUFBbTFCLElBQUEsV0FDQW4xQixLQUFBbzFCLElBQUEsV0FDQXAxQixLQUFBcTFCLElBQUEsV0FDQXIxQixLQUFBczFCLElBQUEsVUFDQXQxQixLQUFBdTFCLElBQUEsV0FFQXYxQixLQUFBdzFCLElBQUEsV0FDQXgxQixLQUFBeTFCLElBQUEsV0FDQXoxQixLQUFBMDFCLElBQUEsV0FDQTExQixLQUFBMjFCLElBQUEsV0FDQTMxQixLQUFBNDFCLElBQUEsV0FDQTUxQixLQUFBNjFCLElBQUEsVUFDQTcxQixLQUFBODFCLElBQUEsV0FDQTkxQixLQUFBKzFCLElBQUEsVUFFQS8xQixNQXVDQXcwQixFQUFBMTFCLFVBQUFnb0IsUUFBQSxTQUFBb04sR0FxQkEsSUFwQkEsSUFBQWpCLEVBQUFqekIsS0FBQW16QixHQUVBNkMsRUFBQSxFQUFBaDJCLEtBQUFnMUIsSUFDQWlCLEVBQUEsRUFBQWoyQixLQUFBaTFCLElBQ0E3QixFQUFBLEVBQUFwekIsS0FBQWsxQixJQUNBZ0IsRUFBQSxFQUFBbDJCLEtBQUFtMUIsSUFDQWdCLEVBQUEsRUFBQW4yQixLQUFBbzFCLElBQ0FnQixFQUFBLEVBQUFwMkIsS0FBQXExQixJQUNBZ0IsRUFBQSxFQUFBcjJCLEtBQUFzMUIsSUFDQWdCLEVBQUEsRUFBQXQyQixLQUFBdTFCLElBRUFnQixFQUFBLEVBQUF2MkIsS0FBQXcxQixJQUNBZ0IsRUFBQSxFQUFBeDJCLEtBQUF5MUIsSUFDQWdCLEVBQUEsRUFBQXoyQixLQUFBMDFCLElBQ0FnQixFQUFBLEVBQUExMkIsS0FBQTIxQixJQUNBZ0IsRUFBQSxFQUFBMzJCLEtBQUE0MUIsSUFDQWdCLEVBQUEsRUFBQTUyQixLQUFBNjFCLElBQ0FnQixFQUFBLEVBQUE3MkIsS0FBQTgxQixJQUNBZ0IsRUFBQSxFQUFBOTJCLEtBQUErMUIsSUFFQTc0QixFQUFBLEVBQWlCQSxFQUFBLEdBQVFBLEdBQUEsRUFDekIrMUIsRUFBQS8xQixHQUFBZzNCLEVBQUFsbkIsWUFBQSxFQUFBOVAsR0FDQSsxQixFQUFBLzFCLEVBQUEsR0FBQWczQixFQUFBbG5CLFlBQUEsRUFBQTlQLEVBQUEsR0FFQSxLQUFRQSxFQUFBLElBQVNBLEdBQUEsR0FDakIsSUFBQTY1QixFQUFBOUQsRUFBQS8xQixFQUFBLElBQ0F3M0IsRUFBQXpCLEVBQUEvMUIsRUFBQSxNQUNBdTJCLEVBQUFrQixFQUFBb0MsRUFBQXJDLEdBQ0FzQyxFQUFBcEMsRUFBQUYsRUFBQXFDLEdBSUFFLEVBQUFwQyxFQUZBa0MsRUFBQTlELEVBQUEvMUIsRUFBQSxHQUNBdzNCLEVBQUF6QixFQUFBLzFCLEVBQUEsTUFFQWc2QixFQUFBcEMsRUFBQUosRUFBQXFDLEdBR0FJLEVBQUFsRSxFQUFBLzFCLEVBQUEsSUFDQWs2QixFQUFBbkUsRUFBQS8xQixFQUFBLE1BRUFtNkIsRUFBQXBFLEVBQUEvMUIsRUFBQSxJQUNBbzZCLEVBQUFyRSxFQUFBLzFCLEVBQUEsTUFFQXE2QixFQUFBUCxFQUFBSSxFQUFBLEVBQ0FJLEVBQUEvRCxFQUFBMEQsRUFBQXBDLEVBQUF3QyxFQUFBUCxHQUFBLEVBSUFRLEdBRkFBLElBQUFQLEVBQUFsQyxFQURBd0MsSUFBQUwsRUFBQSxFQUNBQSxHQUFBLEdBRUFHLEVBQUF0QyxFQURBd0MsSUFBQUQsRUFBQSxFQUNBQSxHQUFBLEVBRUFyRSxFQUFBLzFCLEdBQUFzNkIsRUFDQXZFLEVBQUEvMUIsRUFBQSxHQUFBcTZCLEVBR0EsUUFBQXh4QixFQUFBLEVBQWlCQSxFQUFBLElBQVNBLEdBQUEsR0FDMUJ5eEIsRUFBQXZFLEVBQUFsdEIsR0FDQXd4QixFQUFBdEUsRUFBQWx0QixFQUFBLEdBRUEsSUFBQTB4QixFQUFBbkUsRUFBQTBDLEVBQUFDLEVBQUE3QyxHQUNBc0UsRUFBQXBFLEVBQUFpRCxFQUFBQyxFQUFBQyxHQUVBa0IsRUFBQXBFLEVBQUF5QyxFQUFBTyxHQUNBcUIsRUFBQXJFLEVBQUFnRCxFQUFBUCxHQUNBNkIsRUFBQXJFLEVBQUEyQyxFQUFBUSxHQUNBbUIsRUFBQXRFLEVBQUFtRCxFQUFBUixHQUdBNEIsRUFBQS9FLEVBQUFqdEIsR0FDQWl5QixFQUFBaEYsRUFBQWp0QixFQUFBLEdBRUFreUIsRUFBQXhELEVBQUEwQixFQUFBQyxFQUFBQyxHQUNBNkIsRUFBQXpELEVBQUFrQyxFQUFBQyxFQUFBQyxHQUVBc0IsRUFBQXJCLEVBQUFnQixFQUFBLEVBQ0FNLEVBQUE5QixFQUFBdUIsRUFBQTlDLEVBQUFvRCxFQUFBckIsR0FBQSxFQU1Bc0IsR0FGQUEsR0FGQUEsSUFBQUgsRUFBQWxELEVBREFvRCxJQUFBRCxFQUFBLEVBQ0FBLEdBQUEsR0FFQUgsRUFBQWhELEVBREFvRCxJQUFBSCxFQUFBLEVBQ0FBLEdBQUEsR0FFQVIsRUFBQXpDLEVBREFvRCxJQUFBWixFQUFBLEVBQ0FBLEdBQUEsRUFHQSxJQUFBYyxHQUFBVCxFQUFBRixFQUFBLEVBQ0FZLEdBQUFYLEVBQUFGLEVBQUExQyxFQUFBc0QsR0FBQVQsR0FBQSxFQUVBdEIsRUFBQUQsRUFDQVMsRUFBQUQsRUFDQVIsRUFBQUQsRUFDQVMsRUFBQUQsRUFDQVIsRUFBQUQsRUFDQVMsRUFBQUQsRUFFQVIsRUFBQUQsRUFBQWtDLEVBQUFyRCxFQURBNEIsRUFBQUQsRUFBQXlCLEVBQUEsRUFDQXpCLEdBQUEsRUFDQVIsRUFBQTlDLEVBQ0FzRCxFQUFBRCxFQUNBckQsRUFBQTZDLEVBQ0FRLEVBQUFELEVBQ0FQLEVBQUFELEVBQ0FRLEVBQUFELEVBRUFQLEVBQUFvQyxFQUFBRSxHQUFBdkQsRUFEQXdCLEVBQUE0QixFQUFBRSxHQUFBLEVBQ0FGLEdBQUEsRUFHQW40QixLQUFBdzFCLElBQUF4MUIsS0FBQXcxQixJQUFBZSxFQUFBLEVBQ0F2MkIsS0FBQXkxQixJQUFBejFCLEtBQUF5MUIsSUFBQWUsRUFBQSxFQUNBeDJCLEtBQUEwMUIsSUFBQTExQixLQUFBMDFCLElBQUFlLEVBQUEsRUFDQXoyQixLQUFBMjFCLElBQUEzMUIsS0FBQTIxQixJQUFBZSxFQUFBLEVBQ0ExMkIsS0FBQTQxQixJQUFBNTFCLEtBQUE0MUIsSUFBQWUsRUFBQSxFQUNBMzJCLEtBQUE2MUIsSUFBQTcxQixLQUFBNjFCLElBQUFlLEVBQUEsRUFDQTUyQixLQUFBODFCLElBQUE5MUIsS0FBQTgxQixJQUFBZSxFQUFBLEVBQ0E3MkIsS0FBQSsxQixJQUFBLzFCLEtBQUErMUIsSUFBQWUsRUFBQSxFQUVBOTJCLEtBQUFnMUIsSUFBQWgxQixLQUFBZzFCLElBQUFnQixFQUFBakIsRUFBQS8wQixLQUFBdzFCLElBQUFlLEdBQUEsRUFDQXYyQixLQUFBaTFCLElBQUFqMUIsS0FBQWkxQixJQUFBZ0IsRUFBQWxCLEVBQUEvMEIsS0FBQXkxQixJQUFBZSxHQUFBLEVBQ0F4MkIsS0FBQWsxQixJQUFBbDFCLEtBQUFrMUIsSUFBQTlCLEVBQUEyQixFQUFBLzBCLEtBQUEwMUIsSUFBQWUsR0FBQSxFQUNBejJCLEtBQUFtMUIsSUFBQW4xQixLQUFBbTFCLElBQUFlLEVBQUFuQixFQUFBLzBCLEtBQUEyMUIsSUFBQWUsR0FBQSxFQUNBMTJCLEtBQUFvMUIsSUFBQXAxQixLQUFBbzFCLElBQUFlLEVBQUFwQixFQUFBLzBCLEtBQUE0MUIsSUFBQWUsR0FBQSxFQUNBMzJCLEtBQUFxMUIsSUFBQXIxQixLQUFBcTFCLElBQUFlLEVBQUFyQixFQUFBLzBCLEtBQUE2MUIsSUFBQWUsR0FBQSxFQUNBNTJCLEtBQUFzMUIsSUFBQXQxQixLQUFBczFCLElBQUFlLEVBQUF0QixFQUFBLzBCLEtBQUE4MUIsSUFBQWUsR0FBQSxFQUNBNzJCLEtBQUF1MUIsSUFBQXYxQixLQUFBdTFCLElBQUFlLEVBQUF2QixFQUFBLzBCLEtBQUErMUIsSUFBQWUsR0FBQSxHQUdBdEMsRUFBQTExQixVQUFBdW9CLE1BQUEsV0FDQSxJQUFBa04sRUFBQWx5QixFQUFBUSxZQUFBLElBRUEsU0FBQTAxQixFQUFBbkUsRUFBQWozQixFQUFBOEksR0FDQXN1QixFQUFBbG1CLGFBQUErbEIsRUFBQW51QixHQUNBc3VCLEVBQUFsbUIsYUFBQWxSLEVBQUE4SSxFQUFBLEdBWUEsT0FUQXN5QixFQUFBdjRCLEtBQUFnMUIsSUFBQWgxQixLQUFBdzFCLElBQUEsR0FDQStDLEVBQUF2NEIsS0FBQWkxQixJQUFBajFCLEtBQUF5MUIsSUFBQSxHQUNBOEMsRUFBQXY0QixLQUFBazFCLElBQUFsMUIsS0FBQTAxQixJQUFBLElBQ0E2QyxFQUFBdjRCLEtBQUFtMUIsSUFBQW4xQixLQUFBMjFCLElBQUEsSUFDQTRDLEVBQUF2NEIsS0FBQW8xQixJQUFBcDFCLEtBQUE0MUIsSUFBQSxJQUNBMkMsRUFBQXY0QixLQUFBcTFCLElBQUFyMUIsS0FBQTYxQixJQUFBLElBQ0EwQyxFQUFBdjRCLEtBQUFzMUIsSUFBQXQxQixLQUFBODFCLElBQUEsSUFDQXlDLEVBQUF2NEIsS0FBQXUxQixJQUFBdjFCLEtBQUErMUIsSUFBQSxJQUVBeEIsR0FHQXQzQixFQUFBRCxRQUFBdzNCLG1EQ25RQSxJQUFBZ0UsRUFBd0IxN0IsRUFBUSxLQUVoQzI3QixFQUFzQjM3QixFQUFRLEtBRTlCNDdCLEVBQXdCNTdCLEVBQVEsS0FNaENHLEVBQUFELFFBSkEsU0FBQXFJLEdBQ0EsT0FBQW16QixFQUFBbnpCLElBQUFvekIsRUFBQXB6QixJQUFBcXpCLHNCQ1BBLElBQUFDLEVBQXFCNzdCLEVBQVEsS0FFN0I4N0IsRUFBMkI5N0IsRUFBUSxLQUVuQys3QixFQUFzQi83QixFQUFRLEtBTTlCRyxFQUFBRCxRQUpBLFNBQUFxSSxFQUFBbkksR0FDQSxPQUFBeTdCLEVBQUF0ekIsSUFBQXV6QixFQUFBdnpCLEVBQUFuSSxJQUFBMjdCLHNCQ1BBLElBQUFyM0IsRUFBYTFFLEVBQVEsS0FDckJnOEIsRUFBaUJoOEIsRUFBUSxLQStCekJHLEVBQUFELFFBN0JBLFNBQUEySSxHQUNBLEdBQUFuRSxFQUFBdTNCLFFBQUF2M0IsRUFBQXUzQixPQUFBQyxnQkFDQSxPQUFBeDNCLEVBQUF1M0IsT0FBQUMsZ0JBQUFyekIsR0FFQSxvQkFBQW5FLEVBQUF5M0IsVUFBQSxtQkFBQXozQixFQUFBeTNCLFNBQUFELGdCQUNBLE9BQUF4M0IsRUFBQXkzQixTQUFBRCxnQkFBQXJ6QixHQUVBLEdBQUFtekIsRUFBQUksWUFBQSxDQUNBLEtBQUF2ekIsYUFBQWpELFlBQ0EsVUFBQS9CLFVBQUEsdUJBRUEsR0FBQWdGLEVBQUE1RSxPQUFBLE9BQ0EsSUFBQVEsRUFBQSxJQUFBcUIsTUFNQSxNQUxBckIsRUFBQXFOLEtBQUEsR0FDQXJOLEVBQUF1UyxRQUFBLHVGQUNBbk8sRUFBQTVFLE9BQUEsMkVBRUFRLEVBQUE5RCxLQUFBLHFCQUNBOEQsRUFFQSxJQUFBOEosRUFBQXl0QixFQUFBSSxZQUFBdnpCLEVBQUE1RSxRQUVBLE9BREE0RSxFQUFBZ0osSUFBQXRELEdBQ0ExRixFQUdBLFVBQUEvQyxNQUFBLCtFQzNCQSxJQUFBZ04sRUFBZTlTLEVBQVEsSUFDdkJxOEIsRUFBVXI4QixFQUFRLEtBQ2xCczhCLEVBQWdCdDhCLEVBQVEsS0FDeEJ1OEIsRUFBVXY4QixFQUFRLEtBQ2xCdzhCLEVBQVd4OEIsRUFBUSxLQUVuQixTQUFBb3BCLEVBQUFrQixHQUNBa1MsRUFBQWo4QixLQUFBMkMsS0FBQSxVQUVBQSxLQUFBcW5CLE1BQUFELEVBR0F4WCxFQUFBc1csRUFBQW9ULEdBRUFwVCxFQUFBcG5CLFVBQUFnb0IsUUFBQSxTQUFBM2lCLEdBQ0FuRSxLQUFBcW5CLE1BQUFaLE9BQUF0aUIsSUFHQStoQixFQUFBcG5CLFVBQUFpa0IsT0FBQSxXQUNBLE9BQUEvaUIsS0FBQXFuQixNQUFBTixVQUdBOXBCLEVBQUFELFFBQUEsU0FBQXU4QixHQUVBLGVBREFBLElBQUEzMEIsZUFDQSxJQUFBdTBCLEVBQ0EsV0FBQUksR0FBQSxjQUFBQSxFQUFBLElBQUFILEVBRUEsSUFBQWxULEVBQUFtVCxFQUFBRSx1QkM1QkEsU0FBQXYzQixHQUVBLElBQUF3M0IsRUFBQSxLQUVBLG9CQUFBQyxVQUNBRCxFQUFBQyxVQUNDLG9CQUFBQyxhQUNERixFQUFBRSxrQkFDQyxJQUFBMTNCLEVBQ0R3M0IsRUFBQXgzQixFQUFBeTNCLFdBQUF6M0IsRUFBQTAzQixhQUNDLG9CQUFBbDRCLE9BQ0RnNEIsRUFBQWg0QixPQUFBaTRCLFdBQUFqNEIsT0FBQWs0QixhQUNDLG9CQUFBMzVCLE9BQ0R5NUIsRUFBQXo1QixLQUFBMDVCLFdBQUExNUIsS0FBQTI1QixjQUdBejhCLEVBQUFELFFBQUF3OEIsdUNDTkF2OEIsRUFBQUQsUUFWQSxTQUFBcUksR0FDQSxHQUFBMkYsTUFBQTdJLFFBQUFrRCxHQUFBLENBQ0EsUUFBQW5JLEVBQUEsRUFBQXk4QixFQUFBLElBQUEzdUIsTUFBQTNGLEVBQUF0RSxRQUFpRDdELEVBQUFtSSxFQUFBdEUsT0FBZ0I3RCxJQUNqRXk4QixFQUFBejhCLEdBQUFtSSxFQUFBbkksR0FHQSxPQUFBeThCLG1CQ0ZBMThCLEVBQUFELFFBSkEsU0FBQStmLEdBQ0EsR0FBQTllLE9BQUFtWixZQUFBeFosT0FBQW1mLElBQUEsdUJBQUFuZixPQUFBa0IsVUFBQXlGLFNBQUFsSCxLQUFBMGYsR0FBQSxPQUFBL1IsTUFBQWxJLEtBQUFpYSxtQkNHQTlmLEVBQUFELFFBSkEsV0FDQSxVQUFBMkQsVUFBQSxtRUNHQTFELEVBQUFELFFBSkEsU0FBQXFJLEdBQ0EsR0FBQTJGLE1BQUE3SSxRQUFBa0QsR0FBQSxPQUFBQSxrQkN5QkFwSSxFQUFBRCxRQTFCQSxTQUFBcUksRUFBQW5JLEdBQ0EsSUFBQStOLEVBQUEsR0FDQTJ1QixHQUFBLEVBQ0EvRixHQUFBLEVBQ0FDLE9BQUF6ekIsRUFFQSxJQUNBLFFBQUF3NUIsRUFBQUMsRUFBQXowQixFQUFBcEgsT0FBQW1aLGNBQTZDd2lCLEdBQUFDLEVBQUFDLEVBQUFwZSxRQUFBL2IsUUFDN0NzTCxFQUFBcEUsS0FBQWd6QixFQUFBMTdCLFFBRUFqQixHQUFBK04sRUFBQWxLLFNBQUE3RCxHQUg0RTA4QixHQUFBLElBS3pFLE1BQUF4NUIsR0FDSHl6QixHQUFBLEVBQ0FDLEVBQUExekIsRUFDRyxRQUNILElBQ0F3NUIsR0FBQSxNQUFBRSxFQUFBLFFBQUFBLEVBQUEsU0FDSyxRQUNMLEdBQUFqRyxFQUFBLE1BQUFDLEdBSUEsT0FBQTdvQixrQkNuQkFoTyxFQUFBRCxRQUpBLFdBQ0EsVUFBQTJELFVBQUEsMkVDREEsU0FBQXFCLEdBQUEsSUFBQSszQixFQUdBQSxFQURBLG9CQUFBdjRCLE9BQ0FBLFlBQ0MsSUFBQVEsRUFDREEsRUFDQyxvQkFBQWpDLEtBQ0RBLEtBRUEsR0FHQTlDLEVBQUFELFFBQUErOEIsa0VDWEEsSUFBQW5xQixFQUFlOVMsRUFBUSxJQUN2QjAxQixFQUFlMTFCLEVBQVEsSUFDdkJ1RixFQUFhdkYsRUFBUSxJQUFhdUYsT0FFbEMyM0IsRUFBQSxJQUFBaHZCLE1BQUEsSUFFQSxTQUFBbXVCLElBQ0EzRyxFQUFBbjFCLEtBQUEyQyxLQUFBLElBR0FBLEtBQUEwekIsR0FBQSxXQUNBMXpCLEtBQUEyekIsR0FBQSxXQUNBM3pCLEtBQUE0ekIsR0FBQSxXQUNBNXpCLEtBQUE2ekIsR0FBQSxVQStHQSxTQUFBb0csRUFBQXp3QixFQUFBN0ssR0FDQSxPQUFBNkssR0FBQTdLLEVBQUE2SyxJQUFBLEdBQUE3SyxFQUdBLFNBQUF1N0IsRUFBQTN3QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUFGLEVBQUE2OEIsRUFBQWw3QixHQUNBLE9BQUFnN0IsRUFBQTF3QixHQUFBekUsRUFBQXZILEdBQUF1SCxFQUFBdEgsR0FBQUYsRUFBQTY4QixFQUFBLEVBQUFsN0IsR0FBQTZGLEVBQUEsRUFHQSxTQUFBczFCLEVBQUE3d0IsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBRixFQUFBNjhCLEVBQUFsN0IsR0FDQSxPQUFBZzdCLEVBQUExd0IsR0FBQXpFLEVBQUF0SCxFQUFBRCxHQUFBQyxHQUFBRixFQUFBNjhCLEVBQUEsRUFBQWw3QixHQUFBNkYsRUFBQSxFQUdBLFNBQUF1MUIsRUFBQTl3QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUFGLEVBQUE2OEIsRUFBQWw3QixHQUNBLE9BQUFnN0IsRUFBQTF3QixHQUFBekUsRUFBQXZILEVBQUFDLEdBQUFGLEVBQUE2OEIsRUFBQSxFQUFBbDdCLEdBQUE2RixFQUFBLEVBR0EsU0FBQXcxQixFQUFBL3dCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQUYsRUFBQTY4QixFQUFBbDdCLEdBQ0EsT0FBQWc3QixFQUFBMXdCLEdBQUFoTSxHQUFBdUgsR0FBQXRILElBQUFGLEVBQUE2OEIsRUFBQSxFQUFBbDdCLEdBQUE2RixFQUFBLEVBN0hBOEssRUFBQXVwQixFQUFBM0csR0FFQTJHLEVBQUFyNkIsVUFBQWdvQixRQUFBLFdBRUEsSUFEQSxJQUFBb04sRUFBQThGLEVBQ0E5OEIsRUFBQSxFQUFpQkEsRUFBQSxLQUFRQSxFQUFBZzNCLEVBQUFoM0IsR0FBQThDLEtBQUFxbUIsT0FBQXRaLFlBQUEsRUFBQTdQLEdBRXpCLElBQUFxTSxFQUFBdkosS0FBQTB6QixHQUNBNXVCLEVBQUE5RSxLQUFBMnpCLEdBQ0FwMkIsRUFBQXlDLEtBQUE0ekIsR0FDQXAyQixFQUFBd0MsS0FBQTZ6QixHQUVBdHFCLEVBQUEyd0IsRUFBQTN3QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUEwMkIsRUFBQSxpQkFDQTEyQixFQUFBMDhCLEVBQUExOEIsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQTIyQixFQUFBLGtCQUNBMzJCLEVBQUEyOEIsRUFBQTM4QixFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUFvdkIsRUFBQSxpQkFDQXB2QixFQUFBbzFCLEVBQUFwMUIsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBMnFCLEVBQUEsa0JBQ0EzcUIsRUFBQTJ3QixFQUFBM3dCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQTAyQixFQUFBLGlCQUNBMTJCLEVBQUEwOEIsRUFBQTE4QixFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBMjJCLEVBQUEsa0JBQ0EzMkIsRUFBQTI4QixFQUFBMzhCLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQW92QixFQUFBLGtCQUNBcHZCLEVBQUFvMUIsRUFBQXAxQixFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUEycUIsRUFBQSxrQkFDQTNxQixFQUFBMndCLEVBQUEzd0IsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBMDJCLEVBQUEsaUJBQ0ExMkIsRUFBQTA4QixFQUFBMThCLEVBQUErTCxFQUFBekUsRUFBQXZILEVBQUEyMkIsRUFBQSxrQkFDQTMyQixFQUFBMjhCLEVBQUEzOEIsRUFBQUMsRUFBQStMLEVBQUF6RSxFQUFBb3ZCLEVBQUEsbUJBQ0FwdkIsRUFBQW8xQixFQUFBcDFCLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQTJxQixFQUFBLG1CQUNBM3FCLEVBQUEyd0IsRUFBQTN3QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUEwMkIsRUFBQSxrQkFDQTEyQixFQUFBMDhCLEVBQUExOEIsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQTIyQixFQUFBLG1CQUNBMzJCLEVBQUEyOEIsRUFBQTM4QixFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUFvdkIsRUFBQSxtQkFHQTNxQixFQUFBNndCLEVBQUE3d0IsRUFGQXpFLEVBQUFvMUIsRUFBQXAxQixFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUEycUIsRUFBQSxtQkFFQTMyQixFQUFBQyxFQUFBMDJCLEVBQUEsaUJBQ0ExMkIsRUFBQTQ4QixFQUFBNThCLEVBQUErTCxFQUFBekUsRUFBQXZILEVBQUEyMkIsRUFBQSxpQkFDQTMyQixFQUFBNjhCLEVBQUE3OEIsRUFBQUMsRUFBQStMLEVBQUF6RSxFQUFBb3ZCLEVBQUEsa0JBQ0FwdkIsRUFBQXMxQixFQUFBdDFCLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQTJxQixFQUFBLGtCQUNBM3FCLEVBQUE2d0IsRUFBQTd3QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUEwMkIsRUFBQSxpQkFDQTEyQixFQUFBNDhCLEVBQUE1OEIsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQTIyQixFQUFBLGdCQUNBMzJCLEVBQUE2OEIsRUFBQTc4QixFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUFvdkIsRUFBQSxtQkFDQXB2QixFQUFBczFCLEVBQUF0MUIsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBMnFCLEVBQUEsa0JBQ0EzcUIsRUFBQTZ3QixFQUFBN3dCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQTAyQixFQUFBLGdCQUNBMTJCLEVBQUE0OEIsRUFBQTU4QixFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBMjJCLEVBQUEsa0JBQ0EzMkIsRUFBQTY4QixFQUFBNzhCLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQW92QixFQUFBLGtCQUNBcHZCLEVBQUFzMUIsRUFBQXQxQixFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUEycUIsRUFBQSxrQkFDQTNxQixFQUFBNndCLEVBQUE3d0IsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBMDJCLEVBQUEsa0JBQ0ExMkIsRUFBQTQ4QixFQUFBNThCLEVBQUErTCxFQUFBekUsRUFBQXZILEVBQUEyMkIsRUFBQSxpQkFDQTMyQixFQUFBNjhCLEVBQUE3OEIsRUFBQUMsRUFBQStMLEVBQUF6RSxFQUFBb3ZCLEVBQUEsa0JBR0EzcUIsRUFBQTh3QixFQUFBOXdCLEVBRkF6RSxFQUFBczFCLEVBQUF0MUIsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBMnFCLEVBQUEsbUJBRUEzMkIsRUFBQUMsRUFBQTAyQixFQUFBLGlCQUNBMTJCLEVBQUE2OEIsRUFBQTc4QixFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBMjJCLEVBQUEsa0JBQ0EzMkIsRUFBQTg4QixFQUFBOThCLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQW92QixFQUFBLG1CQUNBcHZCLEVBQUF1MUIsRUFBQXYxQixFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUEycUIsRUFBQSxtQkFDQTNxQixFQUFBOHdCLEVBQUE5d0IsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBMDJCLEVBQUEsaUJBQ0ExMkIsRUFBQTY4QixFQUFBNzhCLEVBQUErTCxFQUFBekUsRUFBQXZILEVBQUEyMkIsRUFBQSxrQkFDQTMyQixFQUFBODhCLEVBQUE5OEIsRUFBQUMsRUFBQStMLEVBQUF6RSxFQUFBb3ZCLEVBQUEsa0JBQ0FwdkIsRUFBQXUxQixFQUFBdjFCLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQTJxQixFQUFBLG1CQUNBM3FCLEVBQUE4d0IsRUFBQTl3QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUEwMkIsRUFBQSxpQkFDQTEyQixFQUFBNjhCLEVBQUE3OEIsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQTIyQixFQUFBLGtCQUNBMzJCLEVBQUE4OEIsRUFBQTk4QixFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUFvdkIsRUFBQSxrQkFDQXB2QixFQUFBdTFCLEVBQUF2MUIsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBMnFCLEVBQUEsZ0JBQ0EzcUIsRUFBQTh3QixFQUFBOXdCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQTAyQixFQUFBLGlCQUNBMTJCLEVBQUE2OEIsRUFBQTc4QixFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBMjJCLEVBQUEsbUJBQ0EzMkIsRUFBQTg4QixFQUFBOThCLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQW92QixFQUFBLGtCQUdBM3FCLEVBQUErd0IsRUFBQS93QixFQUZBekUsRUFBQXUxQixFQUFBdjFCLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQTJxQixFQUFBLGtCQUVBMzJCLEVBQUFDLEVBQUEwMkIsRUFBQSxpQkFDQTEyQixFQUFBODhCLEVBQUE5OEIsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQTIyQixFQUFBLGtCQUNBMzJCLEVBQUErOEIsRUFBQS84QixFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUFvdkIsRUFBQSxtQkFDQXB2QixFQUFBdzFCLEVBQUF4MUIsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBMnFCLEVBQUEsa0JBQ0EzcUIsRUFBQSt3QixFQUFBL3dCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQTAyQixFQUFBLGtCQUNBMTJCLEVBQUE4OEIsRUFBQTk4QixFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBMjJCLEVBQUEsa0JBQ0EzMkIsRUFBQSs4QixFQUFBLzhCLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQW92QixFQUFBLG1CQUNBcHZCLEVBQUF3MUIsRUFBQXgxQixFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUEycUIsRUFBQSxrQkFDQTNxQixFQUFBK3dCLEVBQUEvd0IsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBMDJCLEVBQUEsaUJBQ0ExMkIsRUFBQTg4QixFQUFBOThCLEVBQUErTCxFQUFBekUsRUFBQXZILEVBQUEyMkIsRUFBQSxtQkFDQTMyQixFQUFBKzhCLEVBQUEvOEIsRUFBQUMsRUFBQStMLEVBQUF6RSxFQUFBb3ZCLEVBQUEsa0JBQ0FwdkIsRUFBQXcxQixFQUFBeDFCLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQTJxQixFQUFBLG1CQUNBM3FCLEVBQUErd0IsRUFBQS93QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUEwMkIsRUFBQSxpQkFDQTEyQixFQUFBODhCLEVBQUE5OEIsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQTIyQixFQUFBLG1CQUNBMzJCLEVBQUErOEIsRUFBQS84QixFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUFvdkIsRUFBQSxpQkFDQXB2QixFQUFBdzFCLEVBQUF4MUIsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBMnFCLEVBQUEsa0JBRUFsMEIsS0FBQTB6QixHQUFBMXpCLEtBQUEwekIsR0FBQW5xQixFQUFBLEVBQ0F2SixLQUFBMnpCLEdBQUEzekIsS0FBQTJ6QixHQUFBN3VCLEVBQUEsRUFDQTlFLEtBQUE0ekIsR0FBQTV6QixLQUFBNHpCLEdBQUFyMkIsRUFBQSxFQUNBeUMsS0FBQTZ6QixHQUFBN3pCLEtBQUE2ekIsR0FBQXIyQixFQUFBLEdBR0EyN0IsRUFBQXI2QixVQUFBaTBCLFFBQUEsV0FFQS95QixLQUFBcW1CLE9BQUFybUIsS0FBQXl5QixnQkFBQSxJQUNBenlCLEtBQUF5eUIsYUFBQSxLQUNBenlCLEtBQUFxbUIsT0FBQWxkLEtBQUEsRUFBQW5KLEtBQUF5eUIsYUFBQSxJQUNBenlCLEtBQUE4bUIsVUFDQTltQixLQUFBeXlCLGFBQUEsR0FHQXp5QixLQUFBcW1CLE9BQUFsZCxLQUFBLEVBQUFuSixLQUFBeXlCLGFBQUEsSUFDQXp5QixLQUFBcW1CLE9BQUExWSxjQUFBM04sS0FBQTB5QixRQUFBLE9BQ0ExeUIsS0FBQXFtQixPQUFBMVksY0FBQTNOLEtBQUEweUIsUUFBQSxPQUNBMXlCLEtBQUE4bUIsVUFHQSxJQUFBOWlCLEVBQUEzQixFQUFBUSxZQUFBLElBS0EsT0FKQW1CLEVBQUFvSyxhQUFBcE8sS0FBQTB6QixHQUFBLEdBQ0ExdkIsRUFBQW9LLGFBQUFwTyxLQUFBMnpCLEdBQUEsR0FDQTN2QixFQUFBb0ssYUFBQXBPLEtBQUE0ekIsR0FBQSxHQUNBNXZCLEVBQUFvSyxhQUFBcE8sS0FBQTZ6QixHQUFBLElBQ0E3dkIsR0F1QkEvRyxFQUFBRCxRQUFBbThCLGdDQ2hKQSxJQUFBOTJCLEVBQWF2RixFQUFRLElBQVF1RixPQUM3QnVOLEVBQWU5UyxFQUFRLElBQ3ZCMDFCLEVBQWUxMUIsRUFBUSxJQUV2Qms5QixFQUFBLElBQUFodkIsTUFBQSxJQUVBdXZCLEVBQUEsQ0FDQSxzQ0FDQSxzQ0FDQSxzQ0FDQSxzQ0FDQSx1Q0FHQUMsRUFBQSxDQUNBLHNDQUNBLHNDQUNBLHNDQUNBLHNDQUNBLHVDQUdBQyxFQUFBLENBQ0Esd0NBQ0Esd0NBQ0Esd0NBQ0Esd0NBQ0EseUNBR0FDLEVBQUEsQ0FDQSx3Q0FDQSx3Q0FDQSx3Q0FDQSx3Q0FDQSx5Q0FHQTVELEVBQUEsZ0RBQ0E2RCxFQUFBLGdEQUVBLFNBQUF2QixJQUNBNUcsRUFBQW4xQixLQUFBMkMsS0FBQSxJQUdBQSxLQUFBMHpCLEdBQUEsV0FDQTF6QixLQUFBMnpCLEdBQUEsV0FDQTN6QixLQUFBNHpCLEdBQUEsV0FDQTV6QixLQUFBNnpCLEdBQUEsVUFDQTd6QixLQUFBOHpCLEdBQUEsV0F3RkEsU0FBQW1HLEVBQUF6d0IsRUFBQTdLLEdBQ0EsT0FBQTZLLEdBQUE3SyxFQUFBNkssSUFBQSxHQUFBN0ssRUFHQSxTQUFBaThCLEVBQUFyeEIsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBK0QsRUFBQWpFLEVBQUE2OEIsRUFBQWw3QixHQUNBLE9BQUFnN0IsRUFBQTF3QixHQUFBekUsRUFBQXZILEVBQUFDLEdBQUFGLEVBQUE2OEIsRUFBQSxFQUFBbDdCLEdBQUFzQyxFQUFBLEVBR0EsU0FBQXM1QixFQUFBdHhCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQStELEVBQUFqRSxFQUFBNjhCLEVBQUFsN0IsR0FDQSxPQUFBZzdCLEVBQUExd0IsR0FBQXpFLEVBQUF2SCxHQUFBdUgsRUFBQXRILEdBQUFGLEVBQUE2OEIsRUFBQSxFQUFBbDdCLEdBQUFzQyxFQUFBLEVBR0EsU0FBQXU1QixFQUFBdnhCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQStELEVBQUFqRSxFQUFBNjhCLEVBQUFsN0IsR0FDQSxPQUFBZzdCLEVBQUExd0IsSUFBQXpFLEdBQUF2SCxHQUFBQyxHQUFBRixFQUFBNjhCLEVBQUEsRUFBQWw3QixHQUFBc0MsRUFBQSxFQUdBLFNBQUF3NUIsRUFBQXh4QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUErRCxFQUFBakUsRUFBQTY4QixFQUFBbDdCLEdBQ0EsT0FBQWc3QixFQUFBMXdCLEdBQUF6RSxFQUFBdEgsRUFBQUQsR0FBQUMsR0FBQUYsRUFBQTY4QixFQUFBLEVBQUFsN0IsR0FBQXNDLEVBQUEsRUFHQSxTQUFBeTVCLEVBQUF6eEIsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBK0QsRUFBQWpFLEVBQUE2OEIsRUFBQWw3QixHQUNBLE9BQUFnN0IsRUFBQTF3QixHQUFBekUsR0FBQXZILEdBQUFDLElBQUFGLEVBQUE2OEIsRUFBQSxFQUFBbDdCLEdBQUFzQyxFQUFBLEVBMUdBcU8sRUFBQXdwQixFQUFBNUcsR0FFQTRHLEVBQUF0NkIsVUFBQWdvQixRQUFBLFdBRUEsSUFEQSxJQUFBbVUsRUFBQWpCLEVBQ0FqMEIsRUFBQSxFQUFpQkEsRUFBQSxLQUFRQSxFQUFBazFCLEVBQUFsMUIsR0FBQS9GLEtBQUFxbUIsT0FBQXRaLFlBQUEsRUFBQWhILEdBZXpCLElBYkEsSUFBQXd3QixFQUFBLEVBQUF2MkIsS0FBQTB6QixHQUNBOEMsRUFBQSxFQUFBeDJCLEtBQUEyekIsR0FDQThDLEVBQUEsRUFBQXoyQixLQUFBNHpCLEdBQ0E4QyxFQUFBLEVBQUExMkIsS0FBQTZ6QixHQUNBOEMsRUFBQSxFQUFBMzJCLEtBQUE4ekIsR0FFQW9ILEVBQUEsRUFBQWw3QixLQUFBMHpCLEdBQ0F5SCxFQUFBLEVBQUFuN0IsS0FBQTJ6QixHQUNBeUgsRUFBQSxFQUFBcDdCLEtBQUE0ekIsR0FDQXlILEVBQUEsRUFBQXI3QixLQUFBNnpCLEdBQ0FoZ0IsRUFBQSxFQUFBN1QsS0FBQTh6QixHQUdBNTJCLEVBQUEsRUFBaUJBLEVBQUEsR0FBUUEsR0FBQSxHQUN6QixJQUFBbytCLEVBQ0FDLEVBQ0FyK0IsRUFBQSxJQUNBbytCLEVBQUFWLEVBQUFyRSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBc0UsRUFBQVYsRUFBQXI5QixJQUFBNDVCLEVBQUEsR0FBQTJELEVBQUF2OUIsSUFDQXErQixFQUFBUCxFQUFBRSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBeG5CLEVBQUFvbkIsRUFBQVQsRUFBQXQ5QixJQUFBeTlCLEVBQUEsR0FBQUQsRUFBQXg5QixLQUNLQSxFQUFBLElBQ0xvK0IsRUFBQVQsRUFBQXRFLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFzRSxFQUFBVixFQUFBcjlCLElBQUE0NUIsRUFBQSxHQUFBMkQsRUFBQXY5QixJQUNBcStCLEVBQUFSLEVBQUFHLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUF4bkIsRUFBQW9uQixFQUFBVCxFQUFBdDlCLElBQUF5OUIsRUFBQSxHQUFBRCxFQUFBeDlCLEtBQ0tBLEVBQUEsSUFDTG8rQixFQUFBUixFQUFBdkUsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQXNFLEVBQUFWLEVBQUFyOUIsSUFBQTQ1QixFQUFBLEdBQUEyRCxFQUFBdjlCLElBQ0FxK0IsRUFBQVQsRUFBQUksRUFBQUMsRUFBQUMsRUFBQUMsRUFBQXhuQixFQUFBb25CLEVBQUFULEVBQUF0OUIsSUFBQXk5QixFQUFBLEdBQUFELEVBQUF4OUIsS0FDS0EsRUFBQSxJQUNMbytCLEVBQUFQLEVBQUF4RSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBc0UsRUFBQVYsRUFBQXI5QixJQUFBNDVCLEVBQUEsR0FBQTJELEVBQUF2OUIsSUFDQXErQixFQUFBVixFQUFBSyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBeG5CLEVBQUFvbkIsRUFBQVQsRUFBQXQ5QixJQUFBeTlCLEVBQUEsR0FBQUQsRUFBQXg5QixNQUVBbytCLEVBQUFOLEVBQUF6RSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBc0UsRUFBQVYsRUFBQXI5QixJQUFBNDVCLEVBQUEsR0FBQTJELEVBQUF2OUIsSUFDQXErQixFQUFBWCxFQUFBTSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBeG5CLEVBQUFvbkIsRUFBQVQsRUFBQXQ5QixJQUFBeTlCLEVBQUEsR0FBQUQsRUFBQXg5QixLQUdBcTVCLEVBQUFJLEVBQ0FBLEVBQUFELEVBQ0FBLEVBQUF1RCxFQUFBeEQsRUFBQSxJQUNBQSxFQUFBRCxFQUNBQSxFQUFBOEUsRUFFQUosRUFBQXJuQixFQUNBQSxFQUFBd25CLEVBQ0FBLEVBQUFwQixFQUFBbUIsRUFBQSxJQUNBQSxFQUFBRCxFQUNBQSxFQUFBSSxFQUlBLElBQUFuOUIsRUFBQTRCLEtBQUEyekIsR0FBQThDLEVBQUE0RSxFQUFBLEVBQ0FyN0IsS0FBQTJ6QixHQUFBM3pCLEtBQUE0ekIsR0FBQThDLEVBQUE3aUIsRUFBQSxFQUNBN1QsS0FBQTR6QixHQUFBNXpCLEtBQUE2ekIsR0FBQThDLEVBQUF1RSxFQUFBLEVBQ0FsN0IsS0FBQTZ6QixHQUFBN3pCLEtBQUE4ekIsR0FBQXlDLEVBQUE0RSxFQUFBLEVBQ0FuN0IsS0FBQTh6QixHQUFBOXpCLEtBQUEwekIsR0FBQThDLEVBQUE0RSxFQUFBLEVBQ0FwN0IsS0FBQTB6QixHQUFBdDFCLEdBR0FnN0IsRUFBQXQ2QixVQUFBaTBCLFFBQUEsV0FFQS95QixLQUFBcW1CLE9BQUFybUIsS0FBQXl5QixnQkFBQSxJQUNBenlCLEtBQUF5eUIsYUFBQSxLQUNBenlCLEtBQUFxbUIsT0FBQWxkLEtBQUEsRUFBQW5KLEtBQUF5eUIsYUFBQSxJQUNBenlCLEtBQUE4bUIsVUFDQTltQixLQUFBeXlCLGFBQUEsR0FHQXp5QixLQUFBcW1CLE9BQUFsZCxLQUFBLEVBQUFuSixLQUFBeXlCLGFBQUEsSUFDQXp5QixLQUFBcW1CLE9BQUExWSxjQUFBM04sS0FBQTB5QixRQUFBLE9BQ0ExeUIsS0FBQXFtQixPQUFBMVksY0FBQTNOLEtBQUEweUIsUUFBQSxPQUNBMXlCLEtBQUE4bUIsVUFHQSxJQUFBOWlCLEVBQUEzQixFQUFBc0csTUFBQXRHLEVBQUFzRyxNQUFBLFFBQUF0RyxFQUFBLElBTUEsT0FMQTJCLEVBQUFvSyxhQUFBcE8sS0FBQTB6QixHQUFBLEdBQ0ExdkIsRUFBQW9LLGFBQUFwTyxLQUFBMnpCLEdBQUEsR0FDQTN2QixFQUFBb0ssYUFBQXBPLEtBQUE0ekIsR0FBQSxHQUNBNXZCLEVBQUFvSyxhQUFBcE8sS0FBQTZ6QixHQUFBLElBQ0E3dkIsRUFBQW9LLGFBQUFwTyxLQUFBOHpCLEdBQUEsSUFDQTl2QixHQTJCQS9HLEVBQUFELFFBQUFvOEIsb0JDbEtBcDhCLEVBQUFDLEVBQUFELFFBQUEsU0FBQXcrQixHQUNBQSxJQUFBNTJCLGNBRUEsSUFBQTYyQixFQUFBeitCLEVBQUF3K0IsR0FDQSxJQUFBQyxFQUFBLFVBQUE3NEIsTUFBQTQ0QixFQUFBLCtDQUVBLFdBQUFDLElBR0FwQyxJQUFjdjhCLEVBQVEsS0FDdEJFLEVBQUEwK0IsS0FBZTUrQixFQUFRLEtBQ3ZCRSxFQUFBMitCLE9BQWlCNytCLEVBQVEsS0FDekJFLEVBQUE0K0IsT0FBaUI5K0IsRUFBUSxJQUN6QkUsRUFBQTYrQixPQUFpQi8rQixFQUFRLEtBQ3pCRSxFQUFBOCtCLE9BQWlCaC9CLEVBQVEscUJDTnpCLElBQUE4UyxFQUFlOVMsRUFBUSxJQUN2Qm9wQixFQUFXcHBCLEVBQVEsSUFDbkJ1RixFQUFhdkYsRUFBUSxJQUFhdUYsT0FFbEMyd0IsRUFBQSxDQUNBLDhDQUdBQyxFQUFBLElBQUFqb0IsTUFBQSxJQUVBLFNBQUErd0IsSUFDQS83QixLQUFBeVIsT0FDQXpSLEtBQUFtekIsR0FBQUYsRUFFQS9NLEVBQUE3b0IsS0FBQTJDLEtBQUEsT0FtQkEsU0FBQWc4QixFQUFBMVQsR0FDQSxPQUFBQSxHQUFBLEdBQUFBLElBQUEsRUFHQSxTQUFBMlQsRUFBQWg5QixFQUFBNkYsRUFBQXZILEVBQUFDLEdBQ0EsV0FBQXlCLEVBQUE2RixFQUFBdkgsR0FBQXVILEVBQUF0SCxFQUNBLElBQUF5QixFQUFBNkYsRUFBQXZILEVBQUF1SCxFQUFBdEgsRUFBQUQsRUFBQUMsRUFDQXNILEVBQUF2SCxFQUFBQyxFQXZCQW9TLEVBQUFtc0IsRUFBQTdWLEdBRUE2VixFQUFBajlCLFVBQUEyUyxLQUFBLFdBT0EsT0FOQXpSLEtBQUEwekIsR0FBQSxXQUNBMXpCLEtBQUEyekIsR0FBQSxXQUNBM3pCLEtBQUE0ekIsR0FBQSxXQUNBNXpCLEtBQUE2ekIsR0FBQSxVQUNBN3pCLEtBQUE4ekIsR0FBQSxXQUVBOXpCLE1BaUJBKzdCLEVBQUFqOUIsVUFBQWdvQixRQUFBLFNBQUFvTixHQVNBLElBUkEsSUFmQTVMLEVBZUEySyxFQUFBanpCLEtBQUFtekIsR0FFQTVwQixFQUFBLEVBQUF2SixLQUFBMHpCLEdBQ0E1dUIsRUFBQSxFQUFBOUUsS0FBQTJ6QixHQUNBcDJCLEVBQUEsRUFBQXlDLEtBQUE0ekIsR0FDQXAyQixFQUFBLEVBQUF3QyxLQUFBNnpCLEdBQ0F0eUIsRUFBQSxFQUFBdkIsS0FBQTh6QixHQUVBNTJCLEVBQUEsRUFBaUJBLEVBQUEsS0FBUUEsRUFBQSsxQixFQUFBLzFCLEdBQUFnM0IsRUFBQWxuQixZQUFBLEVBQUE5UCxHQUN6QixLQUFRQSxFQUFBLEtBQVFBLEVBQUErMUIsRUFBQS8xQixHQUFBKzFCLEVBQUEvMUIsRUFBQSxHQUFBKzFCLEVBQUEvMUIsRUFBQSxHQUFBKzFCLEVBQUEvMUIsRUFBQSxJQUFBKzFCLEVBQUEvMUIsRUFBQSxJQUVoQixRQUFBNkksRUFBQSxFQUFpQkEsRUFBQSxLQUFRQSxFQUFBLENBQ3pCLElBQUE5RyxLQUFBOEcsRUFBQSxJQUNBM0gsRUFBQSxJQTVCQWtxQixFQTRCQS9lLElBM0JBLEVBQUErZSxJQUFBLElBMkJBMlQsRUFBQWg5QixFQUFBNkYsRUFBQXZILEVBQUFDLEdBQUErRCxFQUFBMHhCLEVBQUFsdEIsR0FBQWl0QixFQUFBL3pCLEdBRUFzQyxFQUFBL0QsRUFDQUEsRUFBQUQsRUFDQUEsRUFBQXkrQixFQUFBbDNCLEdBQ0FBLEVBQUF5RSxFQUNBQSxFQUFBbkwsRUFHQTRCLEtBQUEwekIsR0FBQW5xQixFQUFBdkosS0FBQTB6QixHQUFBLEVBQ0ExekIsS0FBQTJ6QixHQUFBN3VCLEVBQUE5RSxLQUFBMnpCLEdBQUEsRUFDQTN6QixLQUFBNHpCLEdBQUFyMkIsRUFBQXlDLEtBQUE0ekIsR0FBQSxFQUNBNXpCLEtBQUE2ekIsR0FBQXIyQixFQUFBd0MsS0FBQTZ6QixHQUFBLEVBQ0E3ekIsS0FBQTh6QixHQUFBdnlCLEVBQUF2QixLQUFBOHpCLEdBQUEsR0FHQWlJLEVBQUFqOUIsVUFBQXVvQixNQUFBLFdBQ0EsSUFBQWtOLEVBQUFseUIsRUFBQVEsWUFBQSxJQVFBLE9BTkEweEIsRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBMHpCLEdBQUEsR0FDQWEsRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBMnpCLEdBQUEsR0FDQVksRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBNHpCLEdBQUEsR0FDQVcsRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBNnpCLEdBQUEsSUFDQVUsRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBOHpCLEdBQUEsSUFFQVMsR0FHQXQzQixFQUFBRCxRQUFBKytCLG1CQ3BGQSxJQUFBbnNCLEVBQWU5UyxFQUFRLElBQ3ZCb3BCLEVBQVdwcEIsRUFBUSxJQUNuQnVGLEVBQWF2RixFQUFRLElBQWF1RixPQUVsQzJ3QixFQUFBLENBQ0EsOENBR0FDLEVBQUEsSUFBQWpvQixNQUFBLElBRUEsU0FBQWt4QixJQUNBbDhCLEtBQUF5UixPQUNBelIsS0FBQW16QixHQUFBRixFQUVBL00sRUFBQTdvQixLQUFBMkMsS0FBQSxPQW1CQSxTQUFBbThCLEVBQUE3VCxHQUNBLE9BQUFBLEdBQUEsRUFBQUEsSUFBQSxHQUdBLFNBQUEwVCxFQUFBMVQsR0FDQSxPQUFBQSxHQUFBLEdBQUFBLElBQUEsRUFHQSxTQUFBMlQsRUFBQWg5QixFQUFBNkYsRUFBQXZILEVBQUFDLEdBQ0EsV0FBQXlCLEVBQUE2RixFQUFBdkgsR0FBQXVILEVBQUF0SCxFQUNBLElBQUF5QixFQUFBNkYsRUFBQXZILEVBQUF1SCxFQUFBdEgsRUFBQUQsRUFBQUMsRUFDQXNILEVBQUF2SCxFQUFBQyxFQTNCQW9TLEVBQUFzc0IsRUFBQWhXLEdBRUFnVyxFQUFBcDlCLFVBQUEyUyxLQUFBLFdBT0EsT0FOQXpSLEtBQUEwekIsR0FBQSxXQUNBMXpCLEtBQUEyekIsR0FBQSxXQUNBM3pCLEtBQUE0ekIsR0FBQSxXQUNBNXpCLEtBQUE2ekIsR0FBQSxVQUNBN3pCLEtBQUE4ekIsR0FBQSxXQUVBOXpCLE1BcUJBazhCLEVBQUFwOUIsVUFBQWdvQixRQUFBLFNBQUFvTixHQVNBLElBUkEsSUFuQkE1TCxFQW1CQTJLLEVBQUFqekIsS0FBQW16QixHQUVBNXBCLEVBQUEsRUFBQXZKLEtBQUEwekIsR0FDQTV1QixFQUFBLEVBQUE5RSxLQUFBMnpCLEdBQ0FwMkIsRUFBQSxFQUFBeUMsS0FBQTR6QixHQUNBcDJCLEVBQUEsRUFBQXdDLEtBQUE2ekIsR0FDQXR5QixFQUFBLEVBQUF2QixLQUFBOHpCLEdBRUE1MkIsRUFBQSxFQUFpQkEsRUFBQSxLQUFRQSxFQUFBKzFCLEVBQUEvMUIsR0FBQWczQixFQUFBbG5CLFlBQUEsRUFBQTlQLEdBQ3pCLEtBQVFBLEVBQUEsS0FBUUEsRUFBQSsxQixFQUFBLzFCLElBNUJoQm9yQixFQTRCZ0IySyxFQUFBLzFCLEVBQUEsR0FBQSsxQixFQUFBLzFCLEVBQUEsR0FBQSsxQixFQUFBLzFCLEVBQUEsSUFBQSsxQixFQUFBLzFCLEVBQUEsTUEzQmhCLEVBQUFvckIsSUFBQSxHQTZCQSxRQUFBdmlCLEVBQUEsRUFBaUJBLEVBQUEsS0FBUUEsRUFBQSxDQUN6QixJQUFBOUcsS0FBQThHLEVBQUEsSUFDQTNILEVBQUErOUIsRUFBQTV5QixHQUFBMHlCLEVBQUFoOUIsRUFBQTZGLEVBQUF2SCxFQUFBQyxHQUFBK0QsRUFBQTB4QixFQUFBbHRCLEdBQUFpdEIsRUFBQS96QixHQUFBLEVBRUFzQyxFQUFBL0QsRUFDQUEsRUFBQUQsRUFDQUEsRUFBQXkrQixFQUFBbDNCLEdBQ0FBLEVBQUF5RSxFQUNBQSxFQUFBbkwsRUFHQTRCLEtBQUEwekIsR0FBQW5xQixFQUFBdkosS0FBQTB6QixHQUFBLEVBQ0ExekIsS0FBQTJ6QixHQUFBN3VCLEVBQUE5RSxLQUFBMnpCLEdBQUEsRUFDQTN6QixLQUFBNHpCLEdBQUFyMkIsRUFBQXlDLEtBQUE0ekIsR0FBQSxFQUNBNXpCLEtBQUE2ekIsR0FBQXIyQixFQUFBd0MsS0FBQTZ6QixHQUFBLEVBQ0E3ekIsS0FBQTh6QixHQUFBdnlCLEVBQUF2QixLQUFBOHpCLEdBQUEsR0FHQW9JLEVBQUFwOUIsVUFBQXVvQixNQUFBLFdBQ0EsSUFBQWtOLEVBQUFseUIsRUFBQVEsWUFBQSxJQVFBLE9BTkEweEIsRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBMHpCLEdBQUEsR0FDQWEsRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBMnpCLEdBQUEsR0FDQVksRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBNHpCLEdBQUEsR0FDQVcsRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBNnpCLEdBQUEsSUFDQVUsRUFBQWxtQixhQUFBLEVBQUFyTyxLQUFBOHpCLEdBQUEsSUFFQVMsR0FHQXQzQixFQUFBRCxRQUFBay9CLG1CQzFGQSxJQUFBdHNCLEVBQWU5UyxFQUFRLElBQ3ZCbzJCLEVBQWFwMkIsRUFBUSxJQUNyQm9wQixFQUFXcHBCLEVBQVEsSUFDbkJ1RixFQUFhdkYsRUFBUSxJQUFhdUYsT0FFbEM0d0IsRUFBQSxJQUFBam9CLE1BQUEsSUFFQSxTQUFBb3hCLElBQ0FwOEIsS0FBQXlSLE9BRUF6UixLQUFBbXpCLEdBQUFGLEVBRUEvTSxFQUFBN29CLEtBQUEyQyxLQUFBLE9BR0E0UCxFQUFBd3NCLEVBQUFsSixHQUVBa0osRUFBQXQ5QixVQUFBMlMsS0FBQSxXQVVBLE9BVEF6UixLQUFBMHpCLEdBQUEsV0FDQTF6QixLQUFBMnpCLEdBQUEsVUFDQTN6QixLQUFBNHpCLEdBQUEsVUFDQTV6QixLQUFBNnpCLEdBQUEsV0FDQTd6QixLQUFBOHpCLEdBQUEsV0FDQTl6QixLQUFBK3pCLEdBQUEsV0FDQS96QixLQUFBZzBCLEdBQUEsV0FDQWgwQixLQUFBaTBCLEdBQUEsV0FFQWowQixNQUdBbzhCLEVBQUF0OUIsVUFBQXVvQixNQUFBLFdBQ0EsSUFBQWtOLEVBQUFseUIsRUFBQVEsWUFBQSxJQVVBLE9BUkEweEIsRUFBQWxtQixhQUFBck8sS0FBQTB6QixHQUFBLEdBQ0FhLEVBQUFsbUIsYUFBQXJPLEtBQUEyekIsR0FBQSxHQUNBWSxFQUFBbG1CLGFBQUFyTyxLQUFBNHpCLEdBQUEsR0FDQVcsRUFBQWxtQixhQUFBck8sS0FBQTZ6QixHQUFBLElBQ0FVLEVBQUFsbUIsYUFBQXJPLEtBQUE4ekIsR0FBQSxJQUNBUyxFQUFBbG1CLGFBQUFyTyxLQUFBK3pCLEdBQUEsSUFDQVEsRUFBQWxtQixhQUFBck8sS0FBQWcwQixHQUFBLElBRUFPLEdBR0F0M0IsRUFBQUQsUUFBQW8vQixtQkNwREEsSUFBQXhzQixFQUFlOVMsRUFBUSxJQUN2QnUvQixFQUFhdi9CLEVBQVEsSUFDckJvcEIsRUFBV3BwQixFQUFRLElBQ25CdUYsRUFBYXZGLEVBQVEsSUFBYXVGLE9BRWxDNHdCLEVBQUEsSUFBQWpvQixNQUFBLEtBRUEsU0FBQXN4QixJQUNBdDhCLEtBQUF5UixPQUNBelIsS0FBQW16QixHQUFBRixFQUVBL00sRUFBQTdvQixLQUFBMkMsS0FBQSxTQUdBNFAsRUFBQTBzQixFQUFBRCxHQUVBQyxFQUFBeDlCLFVBQUEyUyxLQUFBLFdBbUJBLE9BbEJBelIsS0FBQWcxQixJQUFBLFdBQ0FoMUIsS0FBQWkxQixJQUFBLFdBQ0FqMUIsS0FBQWsxQixJQUFBLFdBQ0FsMUIsS0FBQW0xQixJQUFBLFVBQ0FuMUIsS0FBQW8xQixJQUFBLFdBQ0FwMUIsS0FBQXExQixJQUFBLFdBQ0FyMUIsS0FBQXMxQixJQUFBLFdBQ0F0MUIsS0FBQXUxQixJQUFBLFdBRUF2MUIsS0FBQXcxQixJQUFBLFdBQ0F4MUIsS0FBQXkxQixJQUFBLFVBQ0F6MUIsS0FBQTAxQixJQUFBLFVBQ0ExMUIsS0FBQTIxQixJQUFBLFdBQ0EzMUIsS0FBQTQxQixJQUFBLFdBQ0E1MUIsS0FBQTYxQixJQUFBLFdBQ0E3MUIsS0FBQTgxQixJQUFBLFdBQ0E5MUIsS0FBQSsxQixJQUFBLFdBRUEvMUIsTUFHQXM4QixFQUFBeDlCLFVBQUF1b0IsTUFBQSxXQUNBLElBQUFrTixFQUFBbHlCLEVBQUFRLFlBQUEsSUFFQSxTQUFBMDFCLEVBQUFuRSxFQUFBajNCLEVBQUE4SSxHQUNBc3VCLEVBQUFsbUIsYUFBQStsQixFQUFBbnVCLEdBQ0FzdUIsRUFBQWxtQixhQUFBbFIsRUFBQThJLEVBQUEsR0FVQSxPQVBBc3lCLEVBQUF2NEIsS0FBQWcxQixJQUFBaDFCLEtBQUF3MUIsSUFBQSxHQUNBK0MsRUFBQXY0QixLQUFBaTFCLElBQUFqMUIsS0FBQXkxQixJQUFBLEdBQ0E4QyxFQUFBdjRCLEtBQUFrMUIsSUFBQWwxQixLQUFBMDFCLElBQUEsSUFDQTZDLEVBQUF2NEIsS0FBQW0xQixJQUFBbjFCLEtBQUEyMUIsSUFBQSxJQUNBNEMsRUFBQXY0QixLQUFBbzFCLElBQUFwMUIsS0FBQTQxQixJQUFBLElBQ0EyQyxFQUFBdjRCLEtBQUFxMUIsSUFBQXIxQixLQUFBNjFCLElBQUEsSUFFQXRCLEdBR0F0M0IsRUFBQUQsUUFBQXMvQixtQkN4REEsSUFBQWo2QixFQUFhdkYsRUFBUSxJQUFhdUYsT0FDbENxYyxFQUFnQjVoQixFQUFRLElBQVE0aEIsVUFDaENnRyxFQUFvQjVuQixFQUFRLElBQWdCNG5CLGNBRzVDLFNBQUE2WCxFQUFBQyxHQUNBOWQsRUFBQXJoQixLQUFBMkMsTUFDQUEsS0FBQXc4QixTQUFBLGlCQUFBQSxFQUNBeDhCLEtBQUF3OEIsU0FDQXg4QixLQUFBdzhCLEdBQUF4OEIsS0FBQXk4QixlQUVBejhCLEtBQUE4aUIsTUFBQTlpQixLQUFBeThCLGVBRUF6OEIsS0FBQStpQixTQUNBL2lCLEtBQUEwOEIsUUFBQTE4QixLQUFBK2lCLE9BQ0EvaUIsS0FBQStpQixPQUFBLE1BRUEvaUIsS0FBQTI4QixTQUFBLEtBQ0EzOEIsS0FBQTQ4QixVQUFBLEtBZmU5L0IsRUFBUSxHQWlCdkI4UyxDQUFBMnNCLEVBQUE3ZCxHQUVBNmQsRUFBQXo5QixVQUFBMm5CLE9BQUEsU0FBQXRpQixFQUFBMDRCLEVBQUFDLEdBQ0EsaUJBQUEzNEIsSUFDQUEsRUFBQTlCLEVBQUFTLEtBQUFxQixFQUFBMDRCLElBR0EsSUFBQUUsRUFBQS84QixLQUFBOG1CLFFBQUEzaUIsR0FDQSxPQUFBbkUsS0FBQXc4QixTQUFBeDhCLE1BRUE4OEIsSUFDQUMsRUFBQS84QixLQUFBZzlCLFVBQUFELEVBQUFELElBR0FDLElBR0FSLEVBQUF6OUIsVUFBQW0rQixlQUFBLGFBQ0FWLEVBQUF6OUIsVUFBQW8rQixXQUFBLFdBQ0EsVUFBQXQ2QixNQUFBLGdEQUdBMjVCLEVBQUF6OUIsVUFBQXErQixXQUFBLFdBQ0EsVUFBQXY2QixNQUFBLGdEQUdBMjVCLEVBQUF6OUIsVUFBQXMrQixPQUFBLFdBQ0EsVUFBQXg2QixNQUFBLDJDQUdBMjVCLEVBQUF6OUIsVUFBQTJ2QixXQUFBLFNBQUF0cUIsRUFBQXVmLEVBQUFoSSxHQUNBLElBQUF0YixFQUNBLElBQ0FKLEtBQUF3OEIsU0FDQXg4QixLQUFBOG1CLFFBQUEzaUIsR0FFQW5FLEtBQUE2RyxLQUFBN0csS0FBQThtQixRQUFBM2lCLElBRUcsTUFBQTVDLEdBQ0huQixFQUFBbUIsRUFDRyxRQUNIbWEsRUFBQXRiLEtBR0FtOEIsRUFBQXo5QixVQUFBNnZCLE9BQUEsU0FBQWh2QixHQUNBLElBQUFTLEVBQ0EsSUFDQUosS0FBQTZHLEtBQUE3RyxLQUFBMDhCLFdBQ0csTUFBQW43QixHQUNIbkIsRUFBQW1CLEVBR0E1QixFQUFBUyxJQUVBbThCLEVBQUF6OUIsVUFBQTI5QixlQUFBLFNBQUFLLEdBQ0EsSUFBQUMsRUFBQS84QixLQUFBMDhCLFdBQUFyNkIsRUFBQXNHLE1BQUEsR0FJQSxPQUhBbTBCLElBQ0FDLEVBQUEvOEIsS0FBQWc5QixVQUFBRCxFQUFBRCxHQUFBLElBRUFDLEdBR0FSLEVBQUF6OUIsVUFBQWsrQixVQUFBLFNBQUE3K0IsRUFBQXltQixFQUFBeVksR0FNQSxHQUxBcjlCLEtBQUEyOEIsV0FDQTM4QixLQUFBMjhCLFNBQUEsSUFBQWpZLEVBQUFFLEdBQ0E1a0IsS0FBQTQ4QixVQUFBaFksR0FHQTVrQixLQUFBNDhCLFlBQUFoWSxFQUFBLFVBQUFoaUIsTUFBQSwwQkFFQSxJQUFBdUksRUFBQW5MLEtBQUEyOEIsU0FBQWw1QixNQUFBdEYsR0FLQSxPQUpBay9CLElBQ0FseUIsR0FBQW5MLEtBQUEyOEIsU0FBQWwxQixPQUdBMEQsR0FHQWxPLEVBQUFELFFBQUF1L0I7Ozs7Ozs7Ozs7Ozs7O0FDckZBdC9CLEVBQUFELFFBQWlCRixFQUFROzs7Ozs7Q0NMekIsU0FBQUUsR0FDQSxhQUVBLElBb0JBc2dDLEVBQUEsSUFBQUMsT0FBQSxPQXBCQSxDQUNBLGdFQUNBLFlBQ0EsY0FDQSxZQUNBLFlBQ0EsUUFDQSxTQUNBLFVBQ0Esc0JBQ0EsY0FDQSxhQUNBLFdBQ0EsY0FDQSxXQUNBLFVBQ0EsVUFDQSxVQUNBLFNBRUEveUIsS0FBQSxhQUVBZ3pCLEVBQUEsU0FBQXZ0QixHQUNBQSxLQUFBLEdBQ0EsSUFBQXd0QixFQUFBLENBQ0E1bUIsU0FBQSxFQUNBNm1CLFVBQUEsRUFDQUMsVUFBQSxFQUNBQyxJQUFBLEVBQ0FDLFlBQUEsRUFDQUMsWUFBQSxFQUNBQyxZQUFBLEVBQ0FDLGlCQUFBLEVBQ0FDLGlCQUFBLEVBQ0FDLGNBQUEsRUFDQUMsV0FBQSxFQUNBQyxVQUFBLEVBQ0FDLFVBQUEsRUFDQUMsV0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFdBQUEsRUFDQUMsWUFBQSxFQUNBQyxPQUFBLEVBQ0FDLFFBQUEsRUFDQUMsVUFBQSxFQUNBQyxRQUFBLEVBQ0FDLFdBQUEsRUFDQUMsV0FBQSxFQUNBQyxXQUFBLEVBQ0FDLGFBQUEsRUFDQUMsY0FBQSxFQUNBQyxlQUFBLEVBQ0FDLFNBQUEsRUFDQUMsTUFBQSxFQUNBQyxRQUFBLEVBQ0FDLHVCQUFBLEVBQ0FDLFVBQUEsRUFDQUMsV0FBQSxFQUNBQyxVQUFBLEVBQ0FDLFVBQUEsRUFDQUMsYUFBQSxFQUNBQyxXQUFBLEVBQ0FDLGFBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLGFBQUEsRUFDQUMsWUFBQSxFQUNBcGhCLFFBQUEsRUFDQXFoQixVQUFBLEdBRUEsUUFBQTFoQyxLQUFBd1IsRUFDQUEsRUFBQWxSLGVBQUFOLFNBQUEsSUFBQWcvQixFQUFBaC9CLEtBQ0FnL0IsRUFBQWgvQixHQUFBd1IsRUFBQXhSLElBbzdCQSxPQWo3QkF1QixLQUFBaVEsUUFBQXd0QixFQUNBejlCLEtBQUE2VyxRQUFBLFFBQ0E3VyxLQUFBb2dDLFVBQUEsQ0FDQUMsS0FBQSx1QkFDQUMsUUFBQSwwQkFDQUMsR0FBQSwyREFDQUMsT0FBQSx5QkFDQUMsU0FBQSxxQ0FDQUMsT0FBQSwwQkFDQUMsTUFBQSw2Q0FDQUMsSUFBQSx1QkFDQUMsSUFBQSx3QkFDQUMsTUFBQSx3QkFDQUMsVUFBQSw0QkFDQUMsUUFBQSwyQkFDQUMsTUFBQSx3QkFDQUMsU0FBQSwyQkFDQUMsTUFBQSw0QkFDQUMsVUFBQSw0QkFDQUMsR0FBQSwyQkFFQXJoQyxLQUFBc2hDLFVBQUEsQ0FDQWpCLEtBQUEsUUFDQVMsTUFBQSxTQUNBUyxVQUFBLGFBQ0FMLFNBQUEsWUFDQUgsVUFBQSxhQUNBRSxNQUFBLFNBQ0FELFFBQUEsV0FDQVAsU0FBQSxrQkFDQUQsT0FBQSxVQUNBRSxPQUFBLFVBQ0FILEdBQUEsZ0JBQ0FJLE1BQUEsYUFDQWEsSUFBQSxpQkFDQUMsSUFBQSx3QkFDQW5CLFFBQUEsV0FDQWEsTUFBQSxhQUNBQyxVQUFBLGFBQ0FDLEdBQUEsY0FFQXJoQyxLQUFBMGhDLElBQUEsQ0FDQUMsVUFBQSxvQkFDQUMsVUFBQSxtQkFDQUMsU0FBQSxtQkFDQUMsU0FBQSxtQkFDQUMsZUFBQSxxQkFDQUMsYUFBQSxtQkFDQUMsWUFBQSxtQkFDQUMsVUFBQSxtQkFDQUMsWUFBQSxtQkFDQUMsY0FBQSxvQkFDQUMsV0FBQSxnQkFDQUMsUUFBQSxzQkFDQUMsVUFBQSxnQkFDQUMsV0FBQSxnQkFDQUMsU0FBQSxnQkFDQUMsV0FBQSxnQkFDQUMsZUFBQSxnQkFDQUMsUUFBQSxnQkFDQUMsZ0JBQUEsZ0JBQ0FDLGFBQUEsZ0JBQ0FDLFlBQUEsaUJBQ0FDLGFBQUEsaUJBQ0FDLFVBQUEsaUJBQ0FDLElBQUEsUUFDQUMsTUFBQSxTQUNBQyxRQUFBLGdCQUNBQyxTQUFBLFFBQ0FDLElBQUEsT0FDQTlCLElBQUEsaUJBQ0FDLElBQUEsd0JBQ0E4QixLQUFBLDZCQUNBQyxPQUFBLCtCQUNBQyxLQUFBLHNCQUNBQyxLQUFBLDhCQUVBMWpDLEtBQUEyakMsVUFBQSxDQUNBQyxRQUFBLGNBQ0FDLGFBQUEsaUJBQ0FYLElBQUEsYUFDQUMsTUFBQSxTQUNBRyxJQUFBLE9BQ0FRLFlBQUEsZUFDQVAsS0FBQSxRQUNBUSxLQUFBLFFBQ0FQLE9BQUEsVUFDQVEsUUFBQSxXQUNBQyxXQUFBLGNBQ0FDLFFBQUEsV0FDQVIsS0FBQSxTQUdBMWpDLEtBQUFta0MsYUFBQSxDQUNBbkcsaUJBQUEsRUFDQUksVUFBQSxFQUNBQyxVQUFBLEVBQ0FNLFFBQUEsRUFDQUUsUUFBQSxFQUNBRCxVQUFBLEVBQ0FFLFdBQUEsRUFDQUksY0FBQSxFQUNBRSxTQUFBLEVBQ0FDLE1BQUEsRUFDQUMsUUFBQSxFQUNBQyx1QkFBQSxFQUNBQyxVQUFBLEVBQ0FDLFdBQUEsRUFDQUMsVUFBQSxFQUNBQyxVQUFBLEVBQ0FDLGFBQUEsRUFDQUMsV0FBQSxFQUNBQyxhQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxhQUFBLEVBQ0FDLFlBQUEsRUFDQS9CLFdBQUEsRUFDQUcsV0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFdBQUEsRUFDQUUsT0FBQSxFQUNBRCxZQUFBLEVBQ0EyRixRQUFBLEVBQ0FyRixXQUFBLEVBQ0FFLGFBQUEsRUFDQW9GLE9BQUEsRUFDQUMsUUFBQSxFQUNBQyxpQkFBQSxFQUNBQyxTQUFBLEVBQ0F0RyxjQUFBLEVBQ0F1RyxRQUFBLEVBQ0FDLFdBQUEsRUFDQTFGLFdBQUEsRUFDQTJGLE1BQUEsRUFDQXhGLGVBQUEsRUFDQWxCLGlCQUFBLEVBQ0FILFlBQUEsRUFDQUQsWUFBQSxFQUNBRSxXQUFBLEdBQ0FvQyxVQUFBLEVBQ0F6QyxTQUFBLFVBQ0FobkIsUUFBQSxVQUNBRyxRQUFBLFVBQ0ErbUIsR0FBQSxVQUNBRCxTQUFBLFVBQ0FpSCxNQUFBLEdBQ0E5bEIsT0FBQSxHQUNBK2xCLFFBQUEsU0FBQXhoQyxHQUNBLElBQUFuRyxFQUFBMkcsRUFBQXVqQixFQUFBLEVBQ0EsT0FBQS9qQixFQUFBdEMsT0FBMEMsT0FBQXFtQixFQUMxQyxJQUFBbHFCLEVBQUEsRUFBQTJHLEVBQUFSLEVBQUF0QyxPQUFnRDdELEVBQUEyRyxFQUFTM0csSUFFekRrcUIsTUFBQSxHQUFBQSxFQURBL2pCLEVBQUF5RCxXQUFBNUosR0FFQWtxQixHQUFBLEVBRUEsT0FBQUEsR0FFQTBkLFFBQUEsU0FBQXpoQyxHQUNBLFNBQUEwaEMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBRCxHQUFBQyxFQUFBRCxJQUFBLEdBQUFDLEVBR0EsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQU9BLE9BTkFGLEVBQUEsV0FBQUosRUFDQUssRUFBQSxXQUFBSixFQUdBSyxHQUFBLFdBQUFOLElBQUEsV0FBQUMsSUFGQUMsRUFBQSxXQUFBRixJQUNBRyxFQUFBLFdBQUFGLEdBSUEsV0FBQUssRUFBQUYsRUFBQUMsRUFFQUgsRUFBQUMsRUFDQSxXQUFBRyxFQUNBLFdBQUFBLEVBQUFGLEVBQUFDLEVBRUEsV0FBQUMsRUFBQUYsRUFBQUMsRUFHQUMsRUFBQUYsRUFBQUMsRUFvQkEsU0FBQUUsRUFBQW44QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUFnTSxFQUFBdkssRUFBQTBtQyxHQUVBLE9BREFwOEIsRUFBQTI3QixFQUFBMzdCLEVBQUEyN0IsSUFqQkEsU0FBQTE3QixFQUFBQyxFQUFBNHBCLEdBQ0EsT0FBQTdwQixFQUFBQyxHQUFBRCxFQUFBNnBCLEVBZ0JBdVMsQ0FBQTlnQyxFQUFBdkgsRUFBQUMsR0FBQWdNLEdBQUFtOEIsSUFDQVQsRUFBQUgsRUFBQXg3QixFQUFBdEssR0FBQTZGLEdBR0EsU0FBQStnQyxFQUFBdDhCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQWdNLEVBQUF2SyxFQUFBMG1DLEdBRUEsT0FEQXA4QixFQUFBMjdCLEVBQUEzN0IsRUFBQTI3QixJQWxCQSxTQUFBMTdCLEVBQUFDLEVBQUE0cEIsR0FDQSxPQUFBN3BCLEVBQUE2cEIsRUFBQTVwQixHQUFBNHBCLEVBaUJBeVMsQ0FBQWhoQyxFQUFBdkgsRUFBQUMsR0FBQWdNLEdBQUFtOEIsSUFDQVQsRUFBQUgsRUFBQXg3QixFQUFBdEssR0FBQTZGLEdBR0EsU0FBQWloQyxFQUFBeDhCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQWdNLEVBQUF2SyxFQUFBMG1DLEdBRUEsT0FEQXA4QixFQUFBMjdCLEVBQUEzN0IsRUFBQTI3QixJQW5CQSxTQUFBMTdCLEVBQUFDLEVBQUE0cEIsR0FDQSxPQUFBN3BCLEVBQUFDLEVBQUE0cEIsRUFrQkEyUyxDQUFBbGhDLEVBQUF2SCxFQUFBQyxHQUFBZ00sR0FBQW04QixJQUNBVCxFQUFBSCxFQUFBeDdCLEVBQUF0SyxHQUFBNkYsR0FHQSxTQUFBbWhDLEVBQUExOEIsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBZ00sRUFBQXZLLEVBQUEwbUMsR0FFQSxPQURBcDhCLEVBQUEyN0IsRUFBQTM3QixFQUFBMjdCLElBcEJBLFNBQUExN0IsRUFBQUMsRUFBQTRwQixHQUNBLE9BQUE1cEIsR0FBQUQsR0FBQTZwQixHQW1CQTZTLENBQUFwaEMsRUFBQXZILEVBQUFDLEdBQUFnTSxHQUFBbThCLElBQ0FULEVBQUFILEVBQUF4N0IsRUFBQXRLLEdBQUE2RixHQTRCQSxTQUFBcWhDLEVBQUFuQixHQUNBLElBQUFvQixFQUFBQyxFQUFBLEdBQUFDLEVBQUEsR0FDQSxJQUFBRixFQUFBLEVBQW9DQSxHQUFBLEVBQWFBLElBR2pEQyxJQURBQyxFQUFBLEtBREF0QixJQUFBLEVBQUFvQixFQUFBLEtBQ0E3aEMsU0FBQSxLQUNBZ0MsT0FBQSsvQixFQUFBdmxDLE9BQUEsS0FFQSxPQUFBc2xDLEVBdUJBLElBQUE3OEIsRUFDQTJ3QixFQUFBb00sRUFBQUMsRUFBQUMsRUFBQUMsRUFBQW45QixFQUFBekUsRUFBQXZILEVBQUFDLEVBWUEsSUFOQWdNLEVBOURBLFNBQUFuRyxHQVVBLElBVEEsSUFBQXNqQyxFQUNBQyxFQUFBdmpDLEVBQUF0QyxPQUNBOGxDLEVBQUFELEVBQUEsRUFFQUUsRUFBQSxLQURBRCxJQUFBLE9BQ0EsR0FDQUUsRUFBQSxJQUFBLzdCLE1BQUE4N0IsRUFBQSxHQUNBRSxFQUFBLEVBQ0FDLEVBQUEsRUFFQUEsRUFBQUwsR0FFQUksRUFBQUMsRUFBQSxJQUNBRixFQUZBSixHQUFBTSxJQUFBLE1BRUFGLEVBQUFKLEdBQUF0akMsRUFBQXlELFdBQUFtZ0MsSUFBQUQsRUFDQUMsSUFRQSxPQUpBRCxFQUFBQyxFQUFBLElBQ0FGLEVBRkFKLEdBQUFNLElBQUEsTUFFQUYsRUFBQUosR0FBQSxLQUFBSyxFQUNBRCxFQUFBRCxFQUFBLEdBQUFGLEdBQUEsRUFDQUcsRUFBQUQsRUFBQSxHQUFBRixJQUFBLEdBQ0FHLEVBd0NBRyxDQURBN2pDLEVBMUJBLFNBQUFBLEdBQ0FBLElBQUE2TCxRQUFBLGNBR0EsSUFGQSxJQUFBaTRCLEVBQUEsR0FFQXhvQyxFQUFBLEVBQW1DQSxFQUFBMEUsRUFBQXRDLE9BQW1CcEMsSUFBQSxDQUN0RCxJQUFBcEIsRUFBQThGLEVBQUF5RCxXQUFBbkksR0FDQXBCLEVBQUEsSUFDQTRwQyxHQUFBMWhDLE9BQUErQyxhQUFBakwsR0FDeUJBLEVBQUEsS0FBQUEsRUFBQSxNQUN6QjRwQyxHQUFBMWhDLE9BQUErQyxhQUFBakwsR0FBQSxPQUNBNHBDLEdBQUExaEMsT0FBQStDLGFBQUEsR0FBQWpMLEVBQUEsT0FFQTRwQyxHQUFBMWhDLE9BQUErQyxhQUFBakwsR0FBQSxRQUNBNHBDLEdBQUExaEMsT0FBQStDLGFBQUFqTCxHQUFBLFVBQ0E0cEMsR0FBQTFoQyxPQUFBK0MsYUFBQSxHQUFBakwsRUFBQSxNQUdBLE9BQUE0cEMsRUFTQUMsQ0FBQS9qQyxJQUVBa0csRUFBQSxXQUNBekUsRUFBQSxXQUNBdkgsRUFBQSxXQUNBQyxFQUFBLFVBRUEyOEIsRUFBQSxFQUEyQkEsRUFBQTN3QixFQUFBekksT0FBY281QixHQUFBLEdBQ3pDb00sRUFBQWg5QixFQUNBaTlCLEVBQUExaEMsRUFDQTJoQyxFQUFBbHBDLEVBQ0FtcEMsRUFBQWxwQyxFQUNBK0wsRUFBQW04QixFQUFBbjhCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQWdNLEVBQUEyd0IsRUFBQSxHQWhCQSxFQWdCQSxZQUNBMzhCLEVBQUFrb0MsRUFBQWxvQyxFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBaU0sRUFBQTJ3QixFQUFBLEdBakJBLEdBaUJBLFlBQ0E1OEIsRUFBQW1vQyxFQUFBbm9DLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQTBFLEVBQUEyd0IsRUFBQSxHQWxCQSxHQWtCQSxXQUNBcjFCLEVBQUE0Z0MsRUFBQTVnQyxFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUFDLEVBQUEyd0IsRUFBQSxHQW5CQSxHQW1CQSxZQUNBNXdCLEVBQUFtOEIsRUFBQW44QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUFnTSxFQUFBMndCLEVBQUEsR0FwQkEsRUFvQkEsWUFDQTM4QixFQUFBa29DLEVBQUFsb0MsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQWlNLEVBQUEyd0IsRUFBQSxHQXJCQSxHQXFCQSxZQUNBNThCLEVBQUFtb0MsRUFBQW5vQyxFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUEwRSxFQUFBMndCLEVBQUEsR0F0QkEsR0FzQkEsWUFDQXIxQixFQUFBNGdDLEVBQUE1Z0MsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBQyxFQUFBMndCLEVBQUEsR0F2QkEsR0F1QkEsWUFDQTV3QixFQUFBbThCLEVBQUFuOEIsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBZ00sRUFBQTJ3QixFQUFBLEdBeEJBLEVBd0JBLFlBQ0EzOEIsRUFBQWtvQyxFQUFBbG9DLEVBQUErTCxFQUFBekUsRUFBQXZILEVBQUFpTSxFQUFBMndCLEVBQUEsR0F6QkEsR0F5QkEsWUFDQTU4QixFQUFBbW9DLEVBQUFub0MsRUFBQUMsRUFBQStMLEVBQUF6RSxFQUFBMEUsRUFBQTJ3QixFQUFBLElBMUJBLEdBMEJBLFlBQ0FyMUIsRUFBQTRnQyxFQUFBNWdDLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQUMsRUFBQTJ3QixFQUFBLElBM0JBLEdBMkJBLFlBQ0E1d0IsRUFBQW04QixFQUFBbjhCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQWdNLEVBQUEyd0IsRUFBQSxJQTVCQSxFQTRCQSxZQUNBMzhCLEVBQUFrb0MsRUFBQWxvQyxFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBaU0sRUFBQTJ3QixFQUFBLElBN0JBLEdBNkJBLFlBQ0E1OEIsRUFBQW1vQyxFQUFBbm9DLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQTBFLEVBQUEyd0IsRUFBQSxJQTlCQSxHQThCQSxZQUVBNXdCLEVBQUFzOEIsRUFBQXQ4QixFQURBekUsRUFBQTRnQyxFQUFBNWdDLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQUMsRUFBQTJ3QixFQUFBLElBL0JBLEdBK0JBLFlBQ0E1OEIsRUFBQUMsRUFBQWdNLEVBQUEyd0IsRUFBQSxHQS9CQSxFQStCQSxZQUNBMzhCLEVBQUFxb0MsRUFBQXJvQyxFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBaU0sRUFBQTJ3QixFQUFBLEdBaENBLEVBZ0NBLFlBQ0E1OEIsRUFBQXNvQyxFQUFBdG9DLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQTBFLEVBQUEyd0IsRUFBQSxJQWpDQSxHQWlDQSxXQUNBcjFCLEVBQUErZ0MsRUFBQS9nQyxFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUFDLEVBQUEyd0IsRUFBQSxHQWxDQSxHQWtDQSxZQUNBNXdCLEVBQUFzOEIsRUFBQXQ4QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUFnTSxFQUFBMndCLEVBQUEsR0FuQ0EsRUFtQ0EsWUFDQTM4QixFQUFBcW9DLEVBQUFyb0MsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQWlNLEVBQUEyd0IsRUFBQSxJQXBDQSxFQW9DQSxVQUNBNThCLEVBQUFzb0MsRUFBQXRvQyxFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUEwRSxFQUFBMndCLEVBQUEsSUFyQ0EsR0FxQ0EsWUFDQXIxQixFQUFBK2dDLEVBQUEvZ0MsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBQyxFQUFBMndCLEVBQUEsR0F0Q0EsR0FzQ0EsWUFDQTV3QixFQUFBczhCLEVBQUF0OEIsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBZ00sRUFBQTJ3QixFQUFBLEdBdkNBLEVBdUNBLFdBQ0EzOEIsRUFBQXFvQyxFQUFBcm9DLEVBQUErTCxFQUFBekUsRUFBQXZILEVBQUFpTSxFQUFBMndCLEVBQUEsSUF4Q0EsRUF3Q0EsWUFDQTU4QixFQUFBc29DLEVBQUF0b0MsRUFBQUMsRUFBQStMLEVBQUF6RSxFQUFBMEUsRUFBQTJ3QixFQUFBLEdBekNBLEdBeUNBLFlBQ0FyMUIsRUFBQStnQyxFQUFBL2dDLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQUMsRUFBQTJ3QixFQUFBLEdBMUNBLEdBMENBLFlBQ0E1d0IsRUFBQXM4QixFQUFBdDhCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQWdNLEVBQUEyd0IsRUFBQSxJQTNDQSxFQTJDQSxZQUNBMzhCLEVBQUFxb0MsRUFBQXJvQyxFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBaU0sRUFBQTJ3QixFQUFBLEdBNUNBLEVBNENBLFlBQ0E1OEIsRUFBQXNvQyxFQUFBdG9DLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQTBFLEVBQUEyd0IsRUFBQSxHQTdDQSxHQTZDQSxZQUVBNXdCLEVBQUF3OEIsRUFBQXg4QixFQURBekUsRUFBQStnQyxFQUFBL2dDLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQUMsRUFBQTJ3QixFQUFBLElBOUNBLEdBOENBLFlBQ0E1OEIsRUFBQUMsRUFBQWdNLEVBQUEyd0IsRUFBQSxHQTlDQSxFQThDQSxZQUNBMzhCLEVBQUF1b0MsRUFBQXZvQyxFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBaU0sRUFBQTJ3QixFQUFBLEdBL0NBLEdBK0NBLFlBQ0E1OEIsRUFBQXdvQyxFQUFBeG9DLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQTBFLEVBQUEyd0IsRUFBQSxJQWhEQSxHQWdEQSxZQUNBcjFCLEVBQUFpaEMsRUFBQWpoQyxFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUFDLEVBQUEyd0IsRUFBQSxJQWpEQSxHQWlEQSxZQUNBNXdCLEVBQUF3OEIsRUFBQXg4QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUFnTSxFQUFBMndCLEVBQUEsR0FsREEsRUFrREEsWUFDQTM4QixFQUFBdW9DLEVBQUF2b0MsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQWlNLEVBQUEyd0IsRUFBQSxHQW5EQSxHQW1EQSxZQUNBNThCLEVBQUF3b0MsRUFBQXhvQyxFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUEwRSxFQUFBMndCLEVBQUEsR0FwREEsR0FvREEsWUFDQXIxQixFQUFBaWhDLEVBQUFqaEMsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBQyxFQUFBMndCLEVBQUEsSUFyREEsR0FxREEsWUFDQTV3QixFQUFBdzhCLEVBQUF4OEIsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBZ00sRUFBQTJ3QixFQUFBLElBdERBLEVBc0RBLFdBQ0EzOEIsRUFBQXVvQyxFQUFBdm9DLEVBQUErTCxFQUFBekUsRUFBQXZILEVBQUFpTSxFQUFBMndCLEVBQUEsR0F2REEsR0F1REEsWUFDQTU4QixFQUFBd29DLEVBQUF4b0MsRUFBQUMsRUFBQStMLEVBQUF6RSxFQUFBMEUsRUFBQTJ3QixFQUFBLEdBeERBLEdBd0RBLFlBQ0FyMUIsRUFBQWloQyxFQUFBamhDLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQUMsRUFBQTJ3QixFQUFBLEdBekRBLEdBeURBLFVBQ0E1d0IsRUFBQXc4QixFQUFBeDhCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQWdNLEVBQUEyd0IsRUFBQSxHQTFEQSxFQTBEQSxZQUNBMzhCLEVBQUF1b0MsRUFBQXZvQyxFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBaU0sRUFBQTJ3QixFQUFBLElBM0RBLEdBMkRBLFlBQ0E1OEIsRUFBQXdvQyxFQUFBeG9DLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQTBFLEVBQUEyd0IsRUFBQSxJQTVEQSxHQTREQSxXQUVBNXdCLEVBQUEwOEIsRUFBQTE4QixFQURBekUsRUFBQWloQyxFQUFBamhDLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQUMsRUFBQTJ3QixFQUFBLEdBN0RBLEdBNkRBLFlBQ0E1OEIsRUFBQUMsRUFBQWdNLEVBQUEyd0IsRUFBQSxHQTdEQSxFQTZEQSxZQUNBMzhCLEVBQUF5b0MsRUFBQXpvQyxFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBaU0sRUFBQTJ3QixFQUFBLEdBOURBLEdBOERBLFlBQ0E1OEIsRUFBQTBvQyxFQUFBMW9DLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQTBFLEVBQUEyd0IsRUFBQSxJQS9EQSxHQStEQSxZQUNBcjFCLEVBQUFtaEMsRUFBQW5oQyxFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUFDLEVBQUEyd0IsRUFBQSxHQWhFQSxHQWdFQSxZQUNBNXdCLEVBQUEwOEIsRUFBQTE4QixFQUFBekUsRUFBQXZILEVBQUFDLEVBQUFnTSxFQUFBMndCLEVBQUEsSUFqRUEsRUFpRUEsWUFDQTM4QixFQUFBeW9DLEVBQUF6b0MsRUFBQStMLEVBQUF6RSxFQUFBdkgsRUFBQWlNLEVBQUEyd0IsRUFBQSxHQWxFQSxHQWtFQSxZQUNBNThCLEVBQUEwb0MsRUFBQTFvQyxFQUFBQyxFQUFBK0wsRUFBQXpFLEVBQUEwRSxFQUFBMndCLEVBQUEsSUFuRUEsR0FtRUEsWUFDQXIxQixFQUFBbWhDLEVBQUFuaEMsRUFBQXZILEVBQUFDLEVBQUErTCxFQUFBQyxFQUFBMndCLEVBQUEsR0FwRUEsR0FvRUEsWUFDQTV3QixFQUFBMDhCLEVBQUExOEIsRUFBQXpFLEVBQUF2SCxFQUFBQyxFQUFBZ00sRUFBQTJ3QixFQUFBLEdBckVBLEVBcUVBLFlBQ0EzOEIsRUFBQXlvQyxFQUFBem9DLEVBQUErTCxFQUFBekUsRUFBQXZILEVBQUFpTSxFQUFBMndCLEVBQUEsSUF0RUEsR0FzRUEsWUFDQTU4QixFQUFBMG9DLEVBQUExb0MsRUFBQUMsRUFBQStMLEVBQUF6RSxFQUFBMEUsRUFBQTJ3QixFQUFBLEdBdkVBLEdBdUVBLFlBQ0FyMUIsRUFBQW1oQyxFQUFBbmhDLEVBQUF2SCxFQUFBQyxFQUFBK0wsRUFBQUMsRUFBQTJ3QixFQUFBLElBeEVBLEdBd0VBLFlBQ0E1d0IsRUFBQTA4QixFQUFBMThCLEVBQUF6RSxFQUFBdkgsRUFBQUMsRUFBQWdNLEVBQUEyd0IsRUFBQSxHQXpFQSxFQXlFQSxZQUNBMzhCLEVBQUF5b0MsRUFBQXpvQyxFQUFBK0wsRUFBQXpFLEVBQUF2SCxFQUFBaU0sRUFBQTJ3QixFQUFBLElBMUVBLEdBMEVBLFlBQ0E1OEIsRUFBQTBvQyxFQUFBMW9DLEVBQUFDLEVBQUErTCxFQUFBekUsRUFBQTBFLEVBQUEyd0IsRUFBQSxHQTNFQSxHQTJFQSxXQUNBcjFCLEVBQUFtaEMsRUFBQW5oQyxFQUFBdkgsRUFBQUMsRUFBQStMLEVBQUFDLEVBQUEyd0IsRUFBQSxHQTVFQSxHQTRFQSxZQUNBNXdCLEVBQUEyN0IsRUFBQTM3QixFQUFBZzlCLEdBQ0F6aEMsRUFBQW9nQyxFQUFBcGdDLEVBQUEwaEMsR0FDQWpwQyxFQUFBMm5DLEVBQUEzbkMsRUFBQWtwQyxHQUNBanBDLEVBQUEwbkMsRUFBQTFuQyxFQUFBa3BDLEdBR0EsT0FEQVAsRUFBQTU4QixHQUFBNDhCLEVBQUFyaEMsR0FBQXFoQyxFQUFBNW9DLEdBQUE0b0MsRUFBQTNvQyxJQUNBb0gsZ0JBSUE1RSxLQUFBcW5DLE1BQUEsR0FFQXJuQyxLQUFBc25DLFdBQUEsU0FBQWprQyxHQUNBLFdBQ0EsS0FBQXJELEtBQUFzaEMsVUFBQWpCLEtBQUFrSCxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQS9ILFFBQUEsRUFDQSxPQUNBLEtBQUF0L0IsS0FBQXNoQyxVQUFBRixVQUFBbUcsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUFwSCxhQUFBLEVBQ0EsWUFDQSxLQUFBamdDLEtBQUFzaEMsVUFBQUMsVUFBQWdHLEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBekgsYUFBQSxFQUNBLFlBQ0EsS0FBQTUvQixLQUFBc2hDLFVBQUFSLE1BQUF5RyxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQXJILFNBQUEsRUFDQSxRQUNBLEtBQUFoZ0MsS0FBQXNoQyxVQUFBSixTQUFBcUcsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUFuSCxZQUFBLEVBQ0EsV0FDQSxLQUFBbGdDLEtBQUFzaEMsVUFBQVAsVUFBQXdHLEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBdkgsYUFBQSxFQUNBLFlBQ0EsS0FBQTkvQixLQUFBc2hDLFVBQUFMLE1BQUFzRyxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQXRILFNBQUEsRUFDQSxRQUNBLEtBQUEvL0IsS0FBQXNoQyxVQUFBTixRQUFBdUcsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUF4SCxXQUFBLEVBQ0EsVUFDQSxLQUFBNy9CLEtBQUFzaEMsVUFBQVgsTUFBQTRHLEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBakksU0FBQSxFQUNBLFFBQ0EsS0FBQXAvQixLQUFBc2hDLFVBQUFiLFNBQUE4RyxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTFILFVBQUEsRUFDQSxXQUNBLEtBQUEzL0IsS0FBQXNoQyxVQUFBZCxPQUFBK0csS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUExSCxVQUFBLEVBQ0EsU0FDQSxLQUFBMy9CLEtBQUFzaEMsVUFBQVosT0FBQTZHLEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBN0gsVUFBQSxFQUNBLFNBQ0EsS0FBQXgvQixLQUFBc2hDLFVBQUFILE1BQUFvRyxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTdDLFNBQUEsRUFDQSxRQUNBLEtBQUF4a0MsS0FBQXNoQyxVQUFBZixHQUFBZ0gsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUFoSSxNQUFBLEVBQ0EsS0FDQSxLQUFBci9CLEtBQUFzaEMsVUFBQUUsSUFBQStGLEtBQUFsa0MsR0FDQSxZQUNBLEtBQUFyRCxLQUFBc2hDLFVBQUFHLElBQUE4RixLQUFBbGtDLEdBQ0EsWUFDQSxLQUFBckQsS0FBQXNoQyxVQUFBaEIsUUFBQWlILEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBNUgsV0FBQSxFQUNBLFVBQ0EsS0FBQXovQixLQUFBc2hDLFVBQUFELEdBQUFrRyxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTFDLE1BQUEsRUFDQSxZQUNBLFFBRUEsV0FBQXRoQyxFQUFBOEIsUUFBQSwyQ0FBQW9pQyxLQUFBbGtDLElBQ0FyRCxLQUFBcW5DLE1BQUFySixpQkFBQSxFQUNBVCxPQUFBaUssSUFFQSxZQUlBeG5DLEtBQUF5bkMsa0JBQUEsU0FBQXBrQyxHQUVBLE9BQUFyRCxLQUFBcW5DLE1BQUEzd0IsU0FDQSxXQUNBLEdBQUExVyxLQUFBb2dDLFVBQUFDLEtBQUFrSCxLQUFBbGtDLEdBQ0EsT0FBQWs2QixPQUFBaUssR0FFQSxNQUNBLGdCQUNBLEdBQUF4bkMsS0FBQW9nQyxVQUFBZ0IsVUFBQW1HLEtBQUFsa0MsR0FDQSxPQUFBazZCLE9BQUFpSyxHQUVBLE1BQ0EsYUFDQSxHQUFBeG5DLEtBQUFvZ0MsVUFBQUksT0FBQStHLEtBQUFsa0MsR0FDQSxPQUFBazZCLE9BQUFpSyxHQUVBLE1BQ0EsZUFDQSxHQUFBeG5DLEtBQUFvZ0MsVUFBQUssU0FBQThHLEtBQUFsa0MsR0FDQSxPQUFBazZCLE9BQUFpSyxHQUVBLE1BQ0EsYUFDQSxHQUFBeG5DLEtBQUFvZ0MsVUFBQU0sT0FBQTZHLEtBQUFsa0MsR0FDQSxPQUFBazZCLE9BQUFpSyxHQUVBLE1BQ0EsWUFDQSxHQUFBeG5DLEtBQUFvZ0MsVUFBQU8sTUFBQTRHLEtBQUFsa0MsR0FDQSxPQUFBazZCLE9BQUFpSyxHQUFBakssT0FBQWlLLEdBQUFqSyxPQUFBbUssR0FFQSxNQUNBLGNBQ0EsR0FBQTFuQyxLQUFBb2dDLFVBQUFFLFFBQUFpSCxLQUFBbGtDLEdBQ0EsT0FBQWs2QixPQUFBaUssR0FFQSxNQUNBLFlBQ0EsR0FBQXhuQyxLQUFBb2dDLFVBQUFlLE1BQUFvRyxLQUFBbGtDLEdBQ0EsT0FBQWs2QixPQUFBaUssR0FFQSxNQUNBLFNBQ0EsR0FBQXhuQyxLQUFBb2dDLFVBQUFHLEdBQUFnSCxLQUFBbGtDLEdBQ0EsT0FBQWs2QixPQUFBbUssR0FBQW5LLE9BQUFtSyxHQUFBbkssT0FBQWlLLEdBRUEsTUFDQSxVQUNBLEdBQUF4bkMsS0FBQW9nQyxVQUFBUSxJQUFBMkcsS0FBQWxrQyxHQUNBLE9BQUFrNkIsT0FBQWlLLEdBRUEsTUFDQSxVQUNBLEdBQUF4bkMsS0FBQW9nQyxVQUFBUyxJQUFBMEcsS0FBQWxrQyxHQUNBLE9BQUFrNkIsT0FBQWlLLEdBRUEsTUFDQSxZQUNBLEdBQUF4bkMsS0FBQW9nQyxVQUFBVSxNQUFBeUcsS0FBQWxrQyxHQUNBLE9BQUFrNkIsT0FBQWlLLEdBRUEsTUFDQSxlQUNBLEdBQUF4bkMsS0FBQW9nQyxVQUFBYyxTQUFBcUcsS0FBQWxrQyxHQUNBLE9BQUFrNkIsT0FBQWlLLEdBRUEsTUFDQSxnQkFDQSxHQUFBeG5DLEtBQUFvZ0MsVUFBQVcsVUFBQXdHLEtBQUFsa0MsR0FDQSxPQUFBazZCLE9BQUFpSyxHQUVBLE1BQ0EsWUFDQSxHQUFBeG5DLEtBQUFvZ0MsVUFBQWEsTUFBQXNHLEtBQUFsa0MsR0FDQSxPQUFBazZCLE9BQUFpSyxHQUVBLE1BQ0EsY0FDQSxHQUFBeG5DLEtBQUFvZ0MsVUFBQVksUUFBQXVHLEtBQUFsa0MsR0FDQSxPQUFBazZCLE9BQUFpSyxHQUVBLE1BQ0EsZ0JBQ0EsR0FBQXhuQyxLQUFBb2dDLFVBQUFpQixHQUFBa0csS0FBQWxrQyxHQUNBLE9BQUFrNkIsT0FBQWlLLEdBRUEsTUFDQSxRQUNBLGVBQUF4bkMsS0FBQXFuQyxNQUFBM3dCLFNBQ0EsSUFBQTZtQixPQUFBdjlCLEtBQUFxbkMsTUFBQTN3QixRQUFBLCtCQUNBNndCLEtBQUFsa0MsR0FDQSxPQUFBazZCLE9BQUFpSyxLQU1BeG5DLEtBQUEybkMsTUFBQSxTQUFBdGtDLEdBQ0EsV0FDQSxLQUFBckQsS0FBQTBoQyxJQUFBTSxhQUFBdUYsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUEvSSxXQUFBLEVBQ0EsZ0JBQ0EsS0FBQXQrQixLQUFBMGhDLElBQUFJLFNBQUF5RixLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQS9JLFdBQUEsRUFDQSxZQUNBLEtBQUF0K0IsS0FBQTBoQyxJQUFBRyxTQUFBMEYsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUEvSSxXQUFBLEVBQ0EsWUFDQSxLQUFBdCtCLEtBQUEwaEMsSUFBQUUsVUFBQTJGLEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBL0ksV0FBQSxFQUNBLGNBQ0EsS0FBQXQrQixLQUFBMGhDLElBQUFDLFVBQUE0RixLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQS9JLFdBQUEsRUFDQSxlQUNBLEtBQUF0K0IsS0FBQTBoQyxJQUFBTyxZQUFBc0YsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUEvSSxXQUFBLEVBQ0EsZUFDQSxLQUFBdCtCLEtBQUEwaEMsSUFBQVEsVUFBQXFGLEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBL0ksV0FBQSxFQUNBLGFBQ0EsS0FBQXQrQixLQUFBMGhDLElBQUFTLFlBQUFvRixLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQS9JLFdBQUEsRUFDQSxlQUNBLEtBQUF0K0IsS0FBQTBoQyxJQUFBVSxjQUFBbUYsS0FBQWxrQyxHQUNBLHdCQUNBLEtBQUFyRCxLQUFBMGhDLElBQUEwQixRQUFBbUUsS0FBQWxrQyxHQUdBLE9BRkFyRCxLQUFBcW5DLE1BQUE5SSxTQUFBLEVBQ0F2K0IsS0FBQXFuQyxNQUFBN0ksV0FBQSxFQUNBLFdBQ0EsS0FBQXgrQixLQUFBMGhDLElBQUF5QixNQUFBb0UsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUE5SSxTQUFBLEVBQ0EsUUFDQSxLQUFBditCLEtBQUEwaEMsSUFBQTJCLFNBQUFrRSxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTVJLFlBQUEsRUFDQSxZQUNBLEtBQUF6K0IsS0FBQTBoQyxJQUFBNEIsSUFBQWlFLEtBQUFsa0MsR0FDQSxZQUNBLEtBQUFyRCxLQUFBMGhDLElBQUFGLElBQUErRixLQUFBbGtDLEdBRUEsS0FBQXJELEtBQUEwaEMsSUFBQUQsSUFBQThGLEtBQUFsa0MsR0FDQSxvQkFDQSxLQUFBckQsS0FBQTBoQyxJQUFBVyxXQUFBa0YsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUEzSSxPQUFBLEVBQ0EsZUFDQSxLQUFBMStCLEtBQUEwaEMsSUFBQVksUUFBQWlGLEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBM0ksT0FBQSxFQUNBLFlBQ0EsS0FBQTErQixLQUFBMGhDLElBQUFhLFVBQUFnRixLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTNJLE9BQUEsRUFDQSxjQUNBLEtBQUExK0IsS0FBQTBoQyxJQUFBYyxXQUFBK0UsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUEzSSxPQUFBLEVBQ0EsZUFDQSxLQUFBMStCLEtBQUEwaEMsSUFBQWUsU0FBQThFLEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBM0ksT0FBQSxFQUNBLGFBQ0EsS0FBQTErQixLQUFBMGhDLElBQUFnQixXQUFBNkUsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUEzSSxPQUFBLEVBQ0EsZUFDQSxLQUFBMStCLEtBQUEwaEMsSUFBQWlCLGVBQUE0RSxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTNJLE9BQUEsRUFDQSxvQkFDQSxLQUFBMStCLEtBQUEwaEMsSUFBQWtCLFFBQUEyRSxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTNJLE9BQUEsRUFDQSxZQUNBLEtBQUExK0IsS0FBQTBoQyxJQUFBbUIsZ0JBQUEwRSxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTNJLE9BQUEsRUFDQSxxQkFDQSxLQUFBMStCLEtBQUEwaEMsSUFBQW9CLGFBQUF5RSxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTNJLE9BQUEsRUFDQSxpQkFDQSxLQUFBMStCLEtBQUEwaEMsSUFBQXFCLFlBQUF3RSxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTNJLE9BQUEsRUFDQSxnQkFDQSxLQUFBMStCLEtBQUEwaEMsSUFBQXNCLGFBQUF1RSxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTNJLE9BQUEsRUFDQSxrQkFDQSxLQUFBMStCLEtBQUEwaEMsSUFBQXVCLFVBQUFzRSxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQTNJLE9BQUEsRUFDQSxlQUNBLEtBQUExK0IsS0FBQTBoQyxJQUFBd0IsSUFBQXFFLEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBM0ksT0FBQSxFQUNBLE9BQ0EsS0FBQTErQixLQUFBMGhDLElBQUE2QixLQUFBZ0UsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUExSSxRQUFBLEVBQ0F0N0IsRUFBQWtILE1BQUF2SyxLQUFBMGhDLElBQUE2QixNQUFBLEdBQUFyMEIsUUFBQSxTQUNBLEtBQUFsUCxLQUFBMGhDLElBQUE4QixPQUFBK0QsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUF6SSxVQUFBLEVBQ0F2N0IsRUFBQWtILE1BQUF2SyxLQUFBMGhDLElBQUE4QixRQUFBLEdBQUF0MEIsUUFBQSxTQUNBLEtBQUFsUCxLQUFBMGhDLElBQUErQixLQUFBOEQsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUFqRCxRQUFBLEVBQ0EsT0FDQSxLQUFBcGtDLEtBQUEwaEMsSUFBQWdDLEtBQUE2RCxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQS9DLFFBQUEsRUFDQSxPQUNBLFFBQ0Esa0JBSUF0a0MsS0FBQTRuQyxZQUFBLFNBQUF2a0MsR0FDQSxXQUNBLEtBQUFyRCxLQUFBMmpDLFVBQUFDLFFBQUEyRCxLQUFBbGtDLEdBQ0EsMEJBQ0EsS0FBQXJELEtBQUEyakMsVUFBQUUsYUFBQTBELEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBUSxnQkFBQSxFQUNBLDBCQUNBLEtBQUE3bkMsS0FBQTJqQyxVQUFBVCxJQUFBcUUsS0FBQWxrQyxHQUNBLGtCQUNBLEtBQUFyRCxLQUFBMmpDLFVBQUFELEtBQUE2RCxLQUFBbGtDLEdBQ0EsYUFDQSxLQUFBckQsS0FBQTJqQyxVQUFBSyxRQUFBdUQsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUF2SSxXQUFBLEVBQ0EsVUFDQSxLQUFBOStCLEtBQUEyakMsVUFBQU0sV0FBQXNELEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBbkksY0FBQSxFQUNBLGFBQ0EsS0FBQWwvQixLQUFBMmpDLFVBQUFSLE1BQUFvRSxLQUFBbGtDLEdBQ0EsY0FDQSxLQUFBckQsS0FBQTJqQyxVQUFBTCxJQUFBaUUsS0FBQWxrQyxHQUNBLFlBQ0EsS0FBQXJELEtBQUEyakMsVUFBQUcsWUFBQXlELEtBQUFsa0MsR0FDQSxvQkFDQSxLQUFBckQsS0FBQTJqQyxVQUFBSixLQUFBZ0UsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUExSSxRQUFBLEVBQ0EsT0FDQSxLQUFBMytCLEtBQUEyakMsVUFBQUksS0FBQXdELEtBQUFsa0MsR0FFQSxPQURBckQsS0FBQXFuQyxNQUFBeEksUUFBQSxFQUNBLE9BQ0EsS0FBQTcrQixLQUFBMmpDLFVBQUFILE9BQUErRCxLQUFBbGtDLEdBRUEsT0FEQXJELEtBQUFxbkMsTUFBQXpJLFVBQUEsRUFDQSxTQUNBLEtBQUE1K0IsS0FBQTJqQyxVQUFBTyxRQUFBcUQsS0FBQWxrQyxHQUVBLE9BREFyRCxLQUFBcW5DLE1BQUFTLFlBQUEsRUFDQSxVQUNBLFFBQ0Esa0JBSUE5bkMsS0FBQStuQyxzQkFBQSxXQUNBLElBQUFDLEVBQUFob0MsS0FDQSxHQUFBQSxLQUFBcW5DLE1BQUFoSSxNQUNBLG9CQUFBa0ksS0FBQVMsRUFBQVgsTUFBQXZvQixRQUFBLENBQ0EsSUFBQW1wQixFQUFBM2hDLFNBQUFpM0IsT0FBQWlLLEdBQUEsSUFDQTN3QixFQUFBdlEsU0FBQTBoQyxFQUFBWCxNQUFBeHdCLFFBQUEsSUFDQSxJQUFBQSxHQUFBLElBQUFveEIsSUFDQUQsRUFBQVgsTUFBQTlILHVCQUFBLEVBQ0F5SSxFQUFBWCxNQUFBeHdCLFFBQUEsSUFHQSxJQUFBQSxHQUFBLElBQUFveEIsSUFDQUQsRUFBQVgsTUFBQTlILHVCQUFBLEVBQ0F5SSxFQUFBWCxNQUFBeHdCLFFBQUEsSUFHQSxJQUFBQSxHQUFBLElBQUFveEIsSUFDQUQsRUFBQVgsTUFBQTlILHVCQUFBLEVBQ0F5SSxFQUFBWCxNQUFBeHdCLFFBQUEsR0FHQSxJQUFBQSxHQUFBLElBQUFveEIsSUFDQUQsRUFBQVgsTUFBQTlILHVCQUFBLEVBQ0F5SSxFQUFBWCxNQUFBeHdCLFFBQUEsS0FNQTdXLEtBQUFrb0MsU0FBQSxXQUVBLFdBQ0EsU0FBQTNLLE9BQUEsYUFBQWdLLEtBRkF2bkMsS0FFQXFuQyxNQUFBdm9CLFFBQ0E5ZSxLQUFBcW5DLE1BQUE1QyxRQUFBLEVBUUEsTUFIQSwwQkFBQThDLEtBUkF2bkMsS0FRQXFuQyxNQUFBdm9CLFVBQ0E5ZSxLQUFBcW5DLE1BQUFjLGlCQUFBLEtBRUFub0MsS0FBQXFuQyxNQUFBNUMsUUFBQSxRQUdBemtDLEtBQUFvb0MsZUFBQSxXQUNBLElBQUFKLEVBQUFob0MsS0FDQSxXQUNBLGFBQUF1bkMsS0FBQVMsRUFBQVgsTUFBQXZvQixRQUVBLE9BREE5ZSxLQUFBcW5DLE1BQUFuSixjQUFBLEVBQ0EsY0FDQSxhQUFBcUosS0FBQVMsRUFBQVgsTUFBQXZvQixRQUVBLE9BREE5ZSxLQUFBcW5DLE1BQUFuSixjQUFBLEVBQ0EsaUJBQ0EsY0FBQXFKLEtBQUFTLEVBQUFYLE1BQUF2b0IsUUFFQSxPQURBOWUsS0FBQXFuQyxNQUFBbkosY0FBQSxFQUNBLHFCQUNBLGNBQUFxSixLQUFBUyxFQUFBWCxNQUFBdm9CLFFBRUEsT0FEQTllLEtBQUFxbkMsTUFBQW5KLGNBQUEsRUFDQSx3QkFDQSxlQUFBcUosS0FBQVMsRUFBQVgsTUFBQXZvQixRQUVBLE9BREE5ZSxLQUFBcW5DLE1BQUFuSixjQUFBLEVBQ0EsbUJBQ0EsZUFBQXFKLEtBQUFTLEVBQUFYLE1BQUF2b0IsUUFFQSxPQURBOWUsS0FBQXFuQyxNQUFBbkosY0FBQSxFQUNBLG9CQUNBLGVBQUFxSixLQUFBUyxFQUFBWCxNQUFBdm9CLFFBRUEsT0FEQTllLEtBQUFxbkMsTUFBQW5KLGNBQUEsRUFDQSx1QkFDQSxlQUFBcUosS0FBQVMsRUFBQVgsTUFBQXZvQixRQUVBLE9BREE5ZSxLQUFBcW5DLE1BQUFuSixjQUFBLEVBQ0Esc0JBQ0EsZUFBQXFKLEtBQUFTLEVBQUFYLE1BQUF2b0IsUUFFQSxPQURBOWUsS0FBQXFuQyxNQUFBbkosY0FBQSxFQUNBLHlCQUNBLFFBQ0EsV0FJQWwrQixLQUFBcW9DLG1CQUFBLFdBRUEsV0FDQSx1QkFBQWQsS0FGQXZuQyxLQUVBcW5DLE1BQUF2b0IsUUFJQSxPQU5BOWUsS0FHQXFuQyxNQUFBM0MsV0FBQSxFQUhBMWtDLEtBSUFxbkMsTUFBQTNJLE9BQUEsRUFKQTErQixLQUtBcW5DLE1BQUExSixTQUFBLFlBQ0EsaUJBQ0EsUUFDQSxXQUlBMzlCLEtBQUFzb0MsV0FBQSxXQUNBLElBQUFOLEVBQUFob0MsS0FDQSxXQUNBLEtBQUFnb0MsRUFBQVgsTUFBQS9JLFVBQ0EsS0FBQTBKLEVBQUFYLE1BQUE5SSxRQUNBLEtBQUF5SixFQUFBWCxNQUFBM0ksTUFDQSxLQUFBc0osRUFBQVgsTUFBQTVJLFdBQ0F1SixFQUFBWCxNQUFBbEosV0FBQSxFQUNBLE1BQ0EsS0FBQTZKLEVBQUFYLE1BQUF2SSxVQUNBLEtBQUFrSixFQUFBWCxNQUFBdEksVUFDQWlKLEVBQUFYLE1BQUFqSixVQUFBLEVBQ0E0SixFQUFBWCxNQUFBbEosV0FBQSxFQUlBLFdBQ0EsS0FBQTZKLEVBQUFYLE1BQUExSSxPQUNBLEtBQUFxSixFQUFBWCxNQUFBeEksT0FDQSxLQUFBbUosRUFBQVgsTUFBQXpJLFNBQ0EsS0FBQW9KLEVBQUFYLE1BQUFqRCxPQUNBLEtBQUE0RCxFQUFBWCxNQUFBbkksYUFDQSxLQUFBOEksRUFBQVgsTUFBQXZJLFVBQ0EsS0FBQWtKLEVBQUFYLE1BQUFRLGVBQ0FHLEVBQUFYLE1BQUFqSixVQUFBLEVBQ0E0SixFQUFBWCxNQUFBbEosV0FBQSxFQUlBLFVBQUFvSixLQUFBUyxFQUFBWCxNQUFBdm9CLFVBQ0FrcEIsRUFBQVgsTUFBQWpKLFVBQUEsRUFDQTRKLEVBQUFYLE1BQUFsSixXQUFBLElBSUFuK0IsS0FBQXVvQyxXQUFBLFdBQ0EsSUFBQVAsRUFBQWhvQyxLQUNBLFdBQ0EsS0FBQWdvQyxFQUFBWCxNQUFBMUksT0FDQSxLQUFBcUosRUFBQVgsTUFBQTlDLGdCQUNBLEtBQUF5RCxFQUFBWCxNQUFBbkosYUFDQThKLEVBQUFYLE1BQUFoSixVQUFBLEVBR0EsVUFBQWtKLEtBQUFTLEVBQUFYLE1BQUF2b0IsVUFDQWtwQixFQUFBWCxNQUFBaEosVUFBQSxJQUlBcitCLEtBQUF3b0MsZUFBQSxTQUFBQyxHQUNBLElBQUFULEVBQUFob0MsS0FDQXBDLE9BQUE2UixLQUFBZzVCLEdBQUF4dEIsUUFBQSxTQUFBeGMsR0FDQSxVQUFBOG9DLEtBQUE5b0MsS0FDQXVwQyxFQUFBWCxNQUFBekMsTUFBQW5tQyxHQUFBZ3FDLEVBQUFocUMsT0FLQXVCLEtBQUEwb0MsUUFBQSxXQUNBLElBQUFWLEVBQUFob0MsS0FDQXFrQyxFQUFBL0csRUFBQXFMLEtBQUFYLEVBQUFYLE1BQUF2b0IsT0FBQWxhLGVBQ0F5L0IsRUFDQTJELEVBQUFYLE1BQUFoRCxRQUFBLEdBQ2EyRCxFQUFBWCxNQUFBckosa0JBRWJnSyxFQUFBWCxNQUFBaEQsTUFBQSxPQUFBa0QsS0FBQVMsRUFBQVgsTUFBQXZvQixVQUlBOWUsS0FBQTRvQyxZQUFBLFdBQ0EsSUFDQTVKLEVBQUEsSUFBQXpCLE9BQUEsa0VBQUFvTCxLQURBM29DLEtBQ0FxbkMsTUFBQXZvQixPQUFBbGEsZUFDQW82QixJQUZBaC9CLEtBR0FxbkMsTUFBQXJJLFlBQUEsS0FJQWgvQixLQUFBNm9DLGtCQUFBLFdBQ0E3b0MsS0FDQXFuQyxNQUFBdkksWUFBQSxVQUFBeUksS0FEQXZuQyxLQUNBcW5DLE1BQUF2b0IsVUFEQTllLEtBRUFxbkMsTUFBQTlDLGlCQUFBLElBSUF2a0MsS0FBQThvQyxpQkFBQSxXQUNBOW9DLEtBQ0FxbkMsTUFBQWxJLGNBQUEsaUJBQUEzOUIsUUFBQXVuQyxVQUFBQyxlQUFBLEdBQUFELFVBQUFFLGlCQUFBLEdBR0FqcEMsS0FBQWtwQyxXQUFBLFdBQ0FscEMsS0FDQXFuQyxNQUFBM0osVUFBQXFMLFVBQUFyTCxVQUFBcUwsVUFBQUksY0FBQUosVUFBQUssaUJBQUFMLFVBQUFNLGdCQUFBLElBQUF6a0MsZUFHQTVFLEtBQUFzcEMsY0FBQSxXQUNBdHBDLEtBQ0FxbkMsTUFBQXZKLFdBQUF5TCxPQUFBekwsYUFBQSxHQUdBOTlCLEtBQUF3cEMsb0JBQUEsV0FDQXhwQyxLQUNBcW5DLE1BQUF0SixXQUFBLENBQUF3TCxPQUFBRSxXQUFBRixPQUFBRyxjQUdBMXBDLEtBQUEycEMsY0FBQSxXQUNBM3BDLEtBQ0FxbkMsTUFBQXhKLFdBQUEwTCxPQUFBMUwsYUFBQSxHQUdBNzlCLEtBQUE0cEMsT0FBQSxXQUNBNXBDLEtBQ0FxbkMsTUFBQWxILFNBQUE0SSxVQUFBYyxzQkFBQSxHQUdBN3BDLEtBQUFzYyxNQUFBLFdBQ0EsSUFBQTByQixFQUFBaG9DLEtBQ0EsUUFBQXZCLEtBQUF1cEMsRUFBQTdELGFBQ0E2RCxFQUFBN0QsYUFBQXBsQyxlQUFBTixLQUNBdXBDLEVBQUFYLE1BQUE1b0MsR0FBQXVwQyxFQUFBN0QsYUFBQTFsQyxJQUdBLE9BQUF1cEMsR0FHQWhvQyxLQUFBOHBDLE1BQUEsU0FBQWhyQixHQUNBQSxLQUFBaXFCLFVBQUFnQixVQUNBLElBQUEvQixFQUFBLElBQUF4SyxFQXFCQSxPQXBCQXdLLEVBQUFYLE1BQUF2b0IsU0FBQTVQLFFBQUEsV0FBQUEsUUFBQSxXQUNBODRCLEVBQUFYLE1BQUF6SixHQUFBb0ssRUFBQUwsTUFBQUssRUFBQVgsTUFBQXZvQixRQUNBa3BCLEVBQUFYLE1BQUExSixTQUFBcUssRUFBQUosWUFBQUksRUFBQVgsTUFBQXZvQixRQUNBa3BCLEVBQUFYLE1BQUEzd0IsUUFBQXN4QixFQUFBVixXQUFBVSxFQUFBWCxNQUFBdm9CLFFBQ0FrcEIsRUFBQVgsTUFBQXh3QixRQUFBbXhCLEVBQUFQLGtCQUFBTyxFQUFBWCxNQUFBdm9CLFFBQ0FrcEIsRUFBQVUsVUFDQVYsRUFBQVksY0FDQVosRUFBQU0sYUFDQU4sRUFBQWEsb0JBQ0FiLEVBQUFPLGFBQ0FQLEVBQUFELHdCQUNBQyxFQUFBRSxXQUNBRixFQUFBSSxpQkFDQUosRUFBQUsscUJBQ0FMLEVBQUFjLG1CQUNBZCxFQUFBa0IsYUFDQWxCLEVBQUFzQixnQkFDQXRCLEVBQUEyQixnQkFDQTNCLEVBQUF3QixzQkFDQXhCLEVBQUE0QixTQUNBNUIsRUFBQVgsT0FHQXJuQyxLQUFBakMsSUFBQSxTQUFBaXNDLEdBQ0EsSUFBQUMsRUFBQWpxQyxLQUFBOHBDLFFBQ0FJLEVBQUEsR0FDQSxRQUFBenJDLEtBQUF1QixLQUFBaVEsUUFDQWpRLEtBQUFpUSxRQUFBbFIsZUFBQU4sS0FBQSxJQUFBdUIsS0FBQWlRLFFBQUF4UixJQUNBeXJDLEVBQUFyakMsS0FBQW9qQyxFQUFBeHJDLElBR0F1ckMsR0FDQUUsRUFBQXJqQyxLQUFBbWpDLElBRUFocUMsS0FBQWlRLFFBQUE4dEIsWUFBQWtNLEVBQUE3TCxVQUNBOEwsRUFBQXJqQyxLQUFBb2pDLEVBQUFsTSxZQUlBLElBQUFvTSxFQUFBRixFQUFBbkYsUUFBQW9GLEVBQUExL0IsS0FBQSxNQVFBLE1BUEEsQ0FDQTIvQixFQUFBem1DLE1BQUEsS0FDQXltQyxFQUFBem1DLE1BQUEsTUFDQSxJQUFBeW1DLEVBQUF6bUMsTUFBQSxPQUxBLElBTUF5bUMsRUFBQXptQyxNQUFBLE9BQ0F5bUMsRUFBQXptQyxNQUFBLEtBRUE4RyxLQUFBLE1BR0F4SyxLQUFBcW5DLE1BQUFybkMsS0FBQW1rQyxhQUNBbmtDLE1BR0FoRCxFQUFBd2dDLGFBQ0EsSUFBQUEsRUFBQXVMLFVBQUFnQixXQW5nQ0EsQ0FxZ0NDL3BDLDhSQzVnQ0dvcUMsa0VDRFNDLEVBQXFCLHFCQUNyQkMsRUFBaUIsaUJDdUNmQyxFQURVLGVBOUJyQixTQUFBaGhDLElBQWNpaEMsSUFBQXhxQyxLQUFBdUosR0FDVnZKLEtBQUt5cUMsUUFBVSxrREFHUkMsR0FDVDFxQyxLQUFLMHFDLE9BQU9BLEVBQU9qdEMsT0FDdEJ1QyxLQUFLeXFDLFFBQVE1akMsS0FBSzZqQyxxQ0FJYixPQUFPMXFDLEtBQUt5cUMsUUFBUUUsT0FBTyxTQUFBRCxHQUFNLE9BQUlBLEVBQU94bUMsT0FBUzBtQyxpREFJckQsT0FBTzVxQyxLQUFLeXFDLFFBQVFFLE9BQU8sU0FBQUQsR0FBTSxPQUFJQSxFQUFPeG1DLE9BQVMwbUMsbURBSXJELE9BQU81cUMsS0FBSzZxQyxxQkFBcUJDLElBQUksa0JBQVVydEMsc0NBRzVDQSxHQUNILE9BQU91QyxLQUFLeXFDLFFBQVFNLEtBQUssU0FBQUwsR0FBTSxPQUFJQSxFQUFPanRDLE9BQVNBLCtKQUl0Q21DLFFBQVFvckMsSUFBSWhyQyxLQUFLNnFDLHFCQUFxQkMsSUFBMUIsZUFBQXZoQyxFQUFBMGhDLElBQUFDLEVBQUEzaEMsRUFBQXFULEtBQThCLFNBQUFyVCxFQUFNbWhDLEdBQU4sT0FBQVEsRUFBQTNoQyxFQUFBeVAsS0FBQSxTQUFBelAsR0FBQSxjQUFBQSxFQUFBMlQsS0FBQTNULEVBQUFtUyxNQUFBLGNBQUFuUyxFQUFBbVMsS0FBQSxFQUFzQmd2QixFQUFPUyxxQkFBN0IsY0FBQTVoQyxFQUFBNlEsT0FBQSxTQUFBN1EsRUFBQTBRLE1BQUEsd0JBQUExUSxFQUFBNlQsU0FBQTdULE1BQTlCLHlCQUFBQSxFQUFBcEosTUFBQUgsS0FBQUUsWUFBQSw4TUNuQzdCa3JDLEVBQVUsR0FDUkMsRUFBWSxXQUFNLE1BQ0Msb0JBQVg3cEMsT0FDSCxDQUNINndCLGFBQWEsQ0FDVGlaLFFBQVEsU0FBQzdzQyxFQUFLd0YsR0FBTixPQUFjbW5DLEVBQVEzc0MsR0FBT3dGLEdBQ3JDc25DLFFBQVEsU0FBQzlzQyxHQUFELE9BQVMyc0MsRUFBUTNzQyxJQUFRLE1BQ2pDK3NDLFdBQVcsU0FBQy9zQyxHQUFELGNBQWdCMnNDLEVBQVEzc0MsTUFMRitDLFFBVXhCaXFDLGFBRWpCLFNBQUFsaUMsSUFBY2loQyxJQUFBeHFDLEtBQUF1SixzREFFR21pQyxHQUNiTCxJQUFZaFosYUFBYWlaLFFBQVEsU0FBVUksdUNBSTNDLE9BQU9MLElBQVloWixhQUFha1osUUFBUSxpREFJeEMsT0FBT0YsSUFBWWhaLGFBQWFtWixXQUFXLDJDQUcvQkcsR0FDWk4sSUFBWWhaLGFBQWFpWixRQUFRLFFBQVNLLHNDQUkxQyxPQUFPTixJQUFZaFosYUFBYWtaLFFBQVEsK0NBSXhDLE9BQU9GLElBQVloWixhQUFhbVosV0FBVyx3RUhsQ25ELEdBQXdCLG9CQUFkekMsVUFDVHFCLEVBQVMsaUJBQ0gsS0FHQUgsR0FBSyxJQUFJek0sRUFGTW9PLEVBQVEsS0FBdEJwTyxhQUVxQnNNLFFBQ3RCSSxFQUFNLENBQ1hELEVBQUd2TSxTQUNIdU0sRUFBR3RNLFNBQ0hzTSxFQUFHck0sR0FDSHFNLEVBQUc5SixTQUNIOEosRUFBR25NLFlBRUpzTSxFQUFTSCxFQUFHbkYsUUFBUW9GLEVBQUkxL0IsS0FBSyxNQUdmNC9CLFVJVlR4TyxFQUFTLFNBQUF6M0IsR0FBSSxPQUFJMG5DLElBQVcsVUFBVXBsQixPQUFPdGlCLEdBQU00aUIsT0FBTyxRQUUxRGlMLEVBQVMsV0FDWCxJQUFNaHZCLEVBQVEsSUFBSU4sV0FBVyxJQUU3QixPQURBczJCLElBQWdCaDJCLEdBQ1RBLEVBQU13SCxLQUFLLEtBR0RzaEMsYUFFakIsU0FBQXZpQyxFQUFZd2lDLEVBQVNDLEdBQVV4QixJQUFBeHFDLEtBQUF1SixHQUM5QnZKLEtBQUswcUMsT0FBU3FCLEVBQ2QvckMsS0FBS21XLFFBQVU2MUIsRUFFWmhzQyxLQUFLaXNDLEtBQU8sS0FDWmpzQyxLQUFLa3NDLE9BQVMsS0FDZGxzQyxLQUFLbXNDLFdBQUwsRUFDQW5zQyxLQUFLb3NDLFFBQUwsRUFDQXBzQyxLQUFLcXNDLGFBQWUsR0FDcEJyc0MsS0FBS3NzQyxlQUFpQixLQUN0QnRzQyxLQUFLdXNDLGNBQWdCLEdBRXhCdnNDLEtBQUswckMsT0FBU0QsRUFBZWUsWUFDekJ4c0MsS0FBSzByQyxTQUFRMXJDLEtBQUswckMsT0FBUyxVQUFVMVoseURBRzFCaGUsRUFBU3ZWLEdBQ2pCQSxJQUFLQSxFQUFNLE9BQ2xCdUIsS0FBS3VzQyxjQUFjOXRDLEdBQU91Viw2Q0FHUnZWLEdBQ2RBLElBQUtBLEVBQU0sY0FDUnVCLEtBQUt1c0MsY0FBYzl0QyxrQ0FHNEIsSUFBQThLLEVBQUF2SixLQUFsRHlzQyxJQUFrRCxFQUFBdnNDLFVBQUFhLGFBQUEsSUFBQWIsVUFBQSxLQUFBQSxVQUFBLEdBQWhDd3NDLEVBQWdDLEVBQUF4c0MsVUFBQWEsYUFBQSxJQUFBYixVQUFBLEdBQUFBLFVBQUEsR0FBeEIsS0FBTXlzQyxFQUFrQixFQUFBenNDLFVBQUFhLGFBQUEsSUFBQWIsVUFBQSxHQUFBQSxVQUFBLEdBQUwsS0FHOUMsT0FGSEYsS0FBS2lzQyxLQUFPUyxFQUVGOXNDLFFBQVFndEMsS0FBSyxDQUNoQixJQUFJaHRDLFFBQVEsU0FBQ1IsR0FBRCxPQUFxQnVXLFdBQVcsV0FDckNwTSxFQUFLNGlDLFlBQ1Ivc0MsR0FBTyxHQUVKbUssRUFBSzJpQyxTQUNQM2lDLEVBQUsyaUMsT0FBTzVjLFFBQ1ovbEIsRUFBSzJpQyxPQUFTLFFBRWhCM2lDLEVBQUs0TSxXQUNSLElBQUl2VyxRQUFKLGVBQUFyQyxFQUFBMHRDLElBQUFDLEVBQUEzaEMsRUFBQXFULEtBQVksU0FBQXJmLEVBQU82QixHQUFQLElBQUErMEIsRUFBQTl5QixFQUFBK3lCLEVBQUFydUIsRUFBQW8wQixFQUFBaDlCLEVBQUEsT0FBQSt0QyxFQUFBM2hDLEVBQUF5UCxLQUFBLFNBQUF6YixHQUFBLGNBQUFBLEVBQUEyZixLQUFBM2YsRUFBQW1lLE1BQUEsY0FFRm14QixFQUFjLFdBQ25CdGpDLEVBQUsyaUMsT0FBTzdhLFVBQVksU0FBQWlCLEdBRWpCLElBQXVDLElBQXBDQSxFQUFJbnVCLEtBQUtnQixRQUFRLGNBQXNCLFNBRmxCLElBQUE5RCxFQU1IeXJDLEtBQUtoRCxNQUFNeFgsRUFBSW51QixLQUFLK0ssUUFBUSxjQUFlLEtBTnhDa2xCLEVBQUEyWSxJQUFBMXJDLEVBQUEsR0FNakI2QyxFQU5pQmt3QixFQUFBLEdBTVhqd0IsRUFOV2l3QixFQUFBLEdBUTlCLE1BQVksU0FBVGx3QixFQUNTLFNBQVRBLEVBQXdCcUYsRUFBSzJpQyxPQUFPYyxLQUFaLHVCQUdaLFdBREY5b0MsRUFDbUIrb0MsRUFBVzlvQyxHQUM1QixVQUZGRCxFQUVrQmdwQyxJQUNoQixRQUhGaHBDLEVBR2dCaXBDLEVBQVFocEMsR0FDdEIsVUFKRkQsRUFJa0JrcEMsRUFBVWpwQyxRQVB6QyxVQVR3QixJQXFCaEI4b0MsRUFBYSxTQUFBM3hCLEdBR2YsR0FGSC9SLEVBQUs2aUMsT0FBUzl3QixFQUVSL1IsRUFBSzZpQyxPQUFRLEtBQ05pQixFQUFXNUIsRUFBZWUsWUFDMUJjLEdBQTJDLEVBQWxDL2pDLEVBQUttaUMsT0FBT3ZtQyxRQUFRLFdBQWtCeTJCLEVBQU9yeUIsRUFBS21pQyxRQUFVbmlDLEVBQUttaUMsT0FFM0UyQixHQUFZQSxJQUFhQyxJQUMxQjdCLEVBQWU4QixVQUFVRCxHQUM1Qi9qQyxFQUFLbWlDLE9BQVNELEVBQWVlLGFBSXJDampDLEVBQUsraUMsZUFBZWx0QyxRQUFRa2MsSUFHdkI0eEIsRUFBWSxXQUNqQjNqQyxFQUFLbWlDLE9BQVMsVUFBVTFaLElBQ3hCem9CLEVBQUt5akMsS0FBSyxVQUFXLENBQUM3b0MsS0FBSyxDQUFFdW5DLE9BQU9uaUMsRUFBS21pQyxPQUFROEIsT0FBT2prQyxFQUFLa2tDLGFBQWUvQyxPQUFPbmhDLEVBQUttaEMsVUFHbkZ5QyxFQUFVLFNBQUFPLEdBQ1osSUFBTUMsRUFBY3BrQyxFQUFLOGlDLGFBQWF0QixLQUFLLFNBQUF2aEMsR0FBQyxPQUFJQSxFQUFFd2xCLEtBQU8wZSxFQUFTMWUsS0FDOUQyZSxJQUVQcGtDLEVBQUs4aUMsYUFBZTlpQyxFQUFLOGlDLGFBQWExQixPQUFPLFNBQUFuaEMsR0FBQyxPQUFJQSxFQUFFd2xCLEtBQU8wZSxFQUFTMWUsS0FFZCxXQUEzQjRlLElBQU9GLEVBQVNweUIsU0FDYixPQUFwQm95QixFQUFTcHlCLFFBQ1RveUIsRUFBU3B5QixPQUFPdmMsZUFBZSxXQUVsQjR1QyxFQUFZdHVDLE9BQU9xdUMsRUFBU3B5QixRQUMzQ3F5QixFQUFZdnVDLFFBQVFzdUMsRUFBU3B5QixVQUdoQzh4QixFQUFZLFNBQUF0b0MsR0FBc0IsSUFBcEJ5b0IsRUFBb0J6b0IsRUFBcEJ5b0IsTUFBT3NnQixFQUFhL29DLEVBQWIrb0MsUUFDdENqd0MsT0FBTzZSLEtBQUtsRyxFQUFLZ2pDLGVBQWV4ckMsUUFBUW5ELE9BQU82UixLQUFLbEcsRUFBS2dqQyxlQUFlekIsSUFBSSxTQUFBcnNDLEdBQzlFOEssRUFBS2dqQyxjQUFjOXRDLEdBQUs4dUIsRUFBT3NnQixPQUtoQkMsRUFBYyxTQUFDQyxFQUFNQyxHQUFRLE9BQzVCckIsSUFDSXFCLEVBQUcseUJBQUF0a0MsT0FBNEJxa0MsR0FBNUIsYUFBQXJrQyxPQUFrRHFrQyxLQW5FeER4d0MsRUFBQW1lLEtBQUEsRUFzRVl1dkIsSUFBQUMsRUFBQTNoQyxFQUFBcVQsS0FBQyxTQUFBclQsSUFBQSxJQUFBaE0sRUFBQTQyQixFQUFBQyxFQUFBLE9BQUE4VyxFQUFBM2hDLEVBQUF5UCxLQUFBLFNBQUF6UCxHQUFBLGNBQUFBLEVBQUEyVCxLQUFBM1QsRUFBQW1TLE1BQUEsV0FDZGl4QixFQURjLENBQUFwakMsRUFBQW1TLEtBQUEsZUFBQW5TLEVBQUE2USxPQUFBLFNBQ0ssQ0FBQyxRQUROLE9BR1g2ekIsRUFBWSxTQUFDQyxFQUFNcDlCLEdBQVAsT0FBY3E5QixNQUFNRCxHQUFNcnVDLEtBQUssU0FBQTdCLEdBQUMsT0FBSUEsRUFBRWluQixTQUFRcGxCLEtBQUssU0FBQTdCLEdBQUMsT0FBSThTLEVBQVMsWUFBTjlTLEtBQTdDLE1BQXFFLGtCQUFNOFMsR0FBRSxNQUUxRixNQUNmczlCLEVBQWlCLEdBQ3hCQyxJQUFJLFFBQWE1K0IsUUFBUXE3QixJQUFJLFNBQUE1dEMsR0FDNUIsSUFBTW94QyxFQUhlLE1BR1MsS0FBRnB4QyxFQUM1QixPQUFPMEMsUUFBUW9yQyxJQUFJLENBQ2xCaUQsRUFBVSxXQUFXSCxFQUFZUSxFQUFNLEdBQVAsR0FBaUIsU0FBQTlrQyxHQUFDLE9BQUlBLEVBQUk0a0MsRUFBZXZuQyxLQUFLeW5DLEVBQU0sR0FBSyxPQUN6RjdCLEVBQVl3QixFQUFVLFVBQVVILEVBQVlRLEdBQUQsR0FBZ0IsU0FBQTlrQyxHQUFDLE9BQUlBLEVBQUk0a0MsRUFBZXZuQyxLQUFLeW5DLEdBQVMsT0FBUSxTQUlwR0MsRUFBUSxFQWZLLFlBZ0JILEdBQVJBLEdBaEJXLENBQUFobEMsRUFBQW1TLEtBQUEsYUFpQmIweUIsRUFBZXJ0QyxPQWpCRixDQUFBd0ksRUFBQW1TLEtBQUEsZ0JBQUFuUyxFQUFBNlEsT0FBQSwyQkFBQTdRLEVBQUFtUyxLQUFBLEdBa0JWLElBQUk5YixRQUFRLFNBQUE1QixHQUFDLE9BQUkyWCxXQUFXLGtCQUFNM1gsR0FBQyxJQUFPLEtBbEJoQyxRQW1CaEJ1d0MsSUFuQmdCaGxDLEVBQUFtUyxLQUFBLHVCQUFBblMsRUFBQTZRLE9BQUEsVUFzQlJnMEIsRUFBZXJ0QyxPQUFrRHF0QyxFQUFqQixDQUFDLE1BQU8sUUFBeUJ6RCxPQUFPLFNBQUFuaEMsR0FBSyxTQUNsR2lqQyxHQUNNampDLEVBQUksS0FDWGdsQyxLQUFLLFNBQUNqbEMsRUFBRXpFLEdBRVYsT0FBU0EsRUFBSSxFQUFXeUUsRUFBSSxFQUFVLEdBQUosRUFBaEIsS0EzQkYseUJBQUFBLEVBQUE2VCxTQUFBN1QsS0FBRDBoQyxHQXRFWixPQXNFRndELEVBdEVFbHhDLEVBQUEwYyxLQXNHRnkwQixFQUFZLFNBQUNYLEdBQTBCLElBQ3JDWSxFQURpQkMsRUFBb0IsRUFBQTF1QyxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFULEtBRTVCMHVDLElBQVVELEVBQVUsSUFBSS91QyxRQUFRLFNBQUE1QixHQUFDLE9BQUk0d0MsRUFBVzV3QyxLQUZYLElBR3RDZ3dDLElBQVFELEVBQU8sR0FDWmMsRUFBV2YsRUFBWUMsRUFBTUMsR0FFN0JFLEVBQUksR0FBQXhrQyxPQURPc2tDLEVBQU0sU0FBVyxTQUN4QnRrQyxPQUFpQm1sQyxHQUFqQm5sQyxPQWhLZix5Q0FpS1d6SyxFQUFJLElBQUl3NkIsSUFBVXlVLEdBS3hCLE9BSEFqdkMsRUFBRXVnQixRQUFVLGtCQUFNb3ZCLEdBQVEsSUFDMUIzdkMsRUFBRTZ2QyxPQUFTLGtCQUFNRixFQUFTM3ZDLElBRW5CMHZDLEdBR0h6eEMsRUFBSSxFQXJISixZQXFIT0EsRUFBSXV4QyxFQUFNMXRDLFFBckhqQixDQUFBeEQsRUFBQW1lLEtBQUEsZ0JBQUFuZSxFQUFBbWUsS0FBQSxHQXNIWWd6QixFQUFVRCxFQUFNdnhDLElBdEg1QixhQXNIRStCLEVBdEhGMUIsRUFBQTBjLE1BQUEsQ0FBQTFjLEVBQUFtZSxLQUFBLGdCQXdISG5TLEVBQUsyaUMsT0FBU2p0QyxFQUNkc0ssRUFBS3lqQyxPQUNMempDLEVBQUs0aUMsV0FBTCxFQUNBNWlDLEVBQUt3bEMsTUFBTCxHQUFnQmx2QyxLQUFLLGtCQUFNVCxHQUFPLEtBQ2xDeXRDLElBNUhHdHZDLEVBQUE2YyxPQUFBLG9CQXFIeUJsZCxJQXJIekJLLEVBQUFtZSxLQUFBLGlDQUFBbmUsRUFBQTZmLFNBQUE3ZixNQUFaLHlCQUFBQSxFQUFBNEMsTUFBQUgsS0FBQUUsWUFBQSw0Q0FzSUosT0FBT0YsS0FBS21zQyw2Q0FJWixPQUFPbnNDLEtBQUtvc0MsNENBTVosT0FGQXg1QixRQUFRc1csSUFBSSxjQUNUbHBCLEtBQUtrc0MsUUFBUWxzQyxLQUFLa3NDLE9BQU81YyxTQUM1Qix5Q0FHVzBmLEdBQVEsSUFBQWxxQyxFQUFBOUUsS0FDbkIsT0FBTyxJQUFJSixRQUFRLFNBQUNSLEVBQVNDLEdBQVcsTUFDaEIsNEJBQWpCMnZDLEVBQVE5cUMsTUFBdUNZLEVBQUtzbkMsWUFFMUR0bkMsRUFBS2lxQyxPQUFPbHZDLEtBQUssV0FDVixJQUFJaUYsRUFBS3NuQyxPQUFRLE9BQU8vc0MsRUFBTyxDQUFDdVAsS0FBSyxhQUFja0YsUUFBUSxnRUFHM0RrN0IsRUFBUWhnQixHQUFLZ0QsSUFHYmdkLEVBQVF0RCxPQUFTNW1DLEVBQUs0bUMsT0FHdEJzRCxFQUFRckQsTUFBUUYsRUFBZXdELFlBQWMsRUFFN0MsSUFBTUMsRUFBWWxkLElBQ2xCZ2QsRUFBUUUsVUFBWXRULEVBQU9zVCxHQUMzQnpELEVBQWUwRCxTQUFTRCxHQUVyQkYsRUFBUWp3QyxlQUFlLGFBQWVpd0MsRUFBUW5CLFFBQVE5dUMsZUFBZSxZQUNwRWl3QyxFQUFRbkIsUUFBUUwsT0FBUzFvQyxFQUFLMm9DLGFBR3hDM29DLEVBQUt1bkMsYUFBYXhsQyxLQUFLakosT0FBT3d4QyxPQUFPSixFQUFTLENBQUM1dkMsVUFBU0MsWUFDeER5RixFQUFLa29DLEtBQUssTUFBTyxDQUFDN29DLEtBQUs2cUMsRUFBU3RFLE9BQU81bEMsRUFBSzRsQyxXQXZCNEJ0ckMsR0FBTyxvQ0FnQy9ELElBQUFtSyxFQUFBdkosS0FBcEJxdkMsS0FBb0IsRUFBQW52QyxVQUFBYSxhQUFBLElBQUFiLFVBQUEsS0FBQUEsVUFBQSxHQUN4QixPQUFPLElBQUlOLFFBQVEsU0FBQ1IsRUFBU0MsR0FDNUJrSyxFQUFLK2lDLGVBQWlCLENBQUNsdEMsVUFBU0MsVUFDaENrSyxFQUFLeWpDLEtBQUssT0FBUSxDQUFDN29DLEtBQUssQ0FBRXVuQyxPQUFPbmlDLEVBQUttaUMsT0FBUThCLE9BQU9qa0MsRUFBS2trQyxZQUFhNEIsZUFBZTNFLE9BQU9uaEMsRUFBS21oQywwQ0FJdEUsSUFBekJ4bUMsRUFBeUIsRUFBQWhFLFVBQUFhLGFBQUEsSUFBQWIsVUFBQSxHQUFBQSxVQUFBLEdBQWxCLEtBQU1pRSxFQUFZLEVBQUFqRSxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFMLEtBQ1osT0FBVGdFLEdBQTBCLE9BQVRDLEVBQWVuRSxLQUFLa3NDLE9BQU9jLEtBQUssY0FDL0NodEMsS0FBS2tzQyxPQUFPYyxLQUFLLGNBQWdCRixLQUFLd0MsVUFBVSxDQUFDcHJDLEVBQU10RyxPQUFPd3hDLE9BQU9qckMsRUFBTSxDQUFDaW1DLFNBQVE2QixLQUFLanNDLEtBQUtpc0MsOENBS25HLE9BQU9ILEVBQWN5RCxrQkFBa0J2dkMsS0FBSzBxQyxvREFHcEJBLEdBQ3hCLElBQUk4QyxFQU9KLE1BRDJCLFVBRHRCQSxFQUprQixvQkFBYmdDLFNBSUk5RSxFQUhWOEUsU0FBU3p3QyxlQUFlLGFBQWV5d0MsU0FBU1gsU0FBUzl0QyxRQUFnQyxjQUF0Qnl1QyxTQUFTWCxTQUNyRVcsU0FBU1gsU0FDTG5FLEdBRUxua0MsT0FBTyxFQUFHLEtBQWVpbkMsRUFBU0EsRUFBT3QrQixRQUFRLE9BQU8sS0FDM0RzK0IsV0N0UVlpQyxhQUVqQixTQUFBbG1DLElBQW1DLElBQXZCbW1DLEVBQXVCLEVBQUF4dkMsVUFBQWEsYUFBQSxJQUFBYixVQUFBLEdBQUFBLFVBQUEsR0FBZixHQUFJeXZDLEVBQVcsRUFBQXp2QyxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFILEdBQUdzcUMsSUFBQXhxQyxLQUFBdUosR0FDL0J2SixLQUFLdkMsS0FBT2l5QyxFQUNaMXZDLEtBQUtrRSxLQUFPeXJDLDREQU9mLE9BQU8zdkMsS0FBS2tFLE9BQVMwbUMsb0NBSXJCLE9BQU9odEMsT0FBTzZSLEtBQUttN0IsR0FBYUUsSUFBSSxTQUFBdGhDLEdBQUMsT0FBSW9oQyxFQUFZcGhDLEtBQUlxQixTQUFTN0ssS0FBS2tFLDhDQVJsRCxPQUFPLElBQUl1ckMsbUNBQ2pCRyxHQUFPLE9BQU9oeUMsT0FBT3d4QyxPQUFPSyxFQUFPSSxjQUFlRCxZQ1R6REUsRUFBYyxDQUN2QkMsSUFBSSxNQUNKQyxJQUFJLE1BQ0pDLElBQUksT0NGYUMsR0RNakJ0eUMsT0FBTzZSLEtBQUtxZ0MsR0FBYWhGLElBQUksU0FBQXJzQyxHQUFHLE1BQUssQ0FBQ0EsTUFBS04sTUFBTTJ4QyxFQUFZcnhDLGlCQ0poRSxTQUFBOEssSUFBbUcsSUFBdkY0bUMsRUFBdUYsRUFBQWp3QyxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUExRTR2QyxFQUFZQyxJQUFLSyxFQUF5RCxFQUFBbHdDLFVBQUFhLGFBQUEsSUFBQWIsVUFBQSxHQUFBQSxVQUFBLEdBQTlDLEdBQUltd0MsRUFBMEMsRUFBQW53QyxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFqQyxHQUFJekMsRUFBNkIsRUFBQXlDLFVBQUFhLGFBQUEsSUFBQWIsVUFBQSxHQUFBQSxVQUFBLEdBQXRCLEtBQU1vd0MsRUFBZ0IsRUFBQXB3QyxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFMLEtBQUtzcUMsSUFBQXhxQyxLQUFBdUosR0FDbEd2SixLQUFLbXdDLFdBQWFBLEVBQ2xCbndDLEtBQUtvd0MsU0FBV0EsRUFDaEJwd0MsS0FBS3F3QyxPQUFTQSxFQUNkcndDLEtBQUt2QyxLQUFPQSxHQUFjNHlDLEVBQzFCcndDLEtBQUtzd0MsU0FBV0EseURBR0ssT0FBTyxJQUFJSixtQ0FDakJOLEdBQU8sT0FBT2h5QyxPQUFPd3hDLE9BQU9wdkMsS0FBSzZ2QyxjQUFlRCxhQ1Y1Q1csYUFDakIsU0FBQWhuQyxJQUErRyxJQUFuR21tQyxFQUFtRyxFQUFBeHZDLFVBQUFhLGFBQUEsSUFBQWIsVUFBQSxHQUFBQSxVQUFBLEdBQTNGLEdBQUlzd0MsRUFBdUYsRUFBQXR3QyxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUEzRSxRQUFTdXdDLEVBQWtFLEVBQUF2d0MsVUFBQWEsYUFBQSxJQUFBYixVQUFBLEdBQUFBLFVBQUEsR0FBMUQsR0FBSW91QyxFQUFzRCxFQUFBcHVDLFVBQUFhLGFBQUEsSUFBQWIsVUFBQSxHQUFBQSxVQUFBLEdBQTlDLEVBQUdpd0MsRUFBMkMsRUFBQWp3QyxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUE5QjR2QyxFQUFZQyxJQUFLVyxFQUFhLEVBQUF4d0MsVUFBQWEsYUFBQSxJQUFBYixVQUFBLEdBQUFBLFVBQUEsR0FBSCxHQUFHc3FDLElBQUF4cUMsS0FBQXVKLEdBQzNHdkosS0FBS3ZDLEtBQU9peUMsRUFDWjF2QyxLQUFLMndDLFNBQVdILEVBQ2hCeHdDLEtBQUtrdUMsS0FBT3VDLEVBQ1p6d0MsS0FBSyt0QyxLQUFPTyxFQUNadHVDLEtBQUttd0MsV0FBYUEsRUFDbEJud0MsS0FBSzB3QyxRQUFVQSxFQUFRbnNDLFdBRXZCdkUsS0FBSzR3QyxNQUFRLG9EQVlMLFNBQUFsbkMsT0FBVTFKLEtBQUsyd0MsU0FBZixPQUFBam5DLE9BQTZCMUosS0FBS2t1QyxNQUFsQ3hrQyxPQUF5QzFKLEtBQUsrdEMsS0FBTyxJQUFNLElBQTNEcmtDLE9BQWdFMUosS0FBSyt0Qyx1Q0FDMUUsT0FBUSxHQUFBcmtDLE9BQUcxSixLQUFLbXdDLFdBQVIsTUFBeUJud0MsS0FBSzB3QyxRQUFRM3ZDLE9BQWIsU0FBQTJJLE9BQStCMUosS0FBSzB3QyxTQUFwQyxHQUFBaG5DLE9BQW1EMUosS0FBS2t1QyxLQUF4RCxLQUFBeGtDLE9BQWdFMUosS0FBSyt0QyxRQUFTbnBDLHNEQVZoRyxPQUFPLElBQUkyckMsbUNBRWpCWCxHQUNaLElBQU01d0MsRUFBSXBCLE9BQU93eEMsT0FBT21CLEVBQVFWLGNBQWVELEdBRy9DLE9BRkE1d0MsRUFBRTB4QyxRQUFVMXhDLEVBQUUweEMsUUFBVTF4QyxFQUFFMHhDLFFBQVFuc0MsV0FBYSxHQUNsRHZGLEVBQUU0eEMsTUFBUWhCLEVBQUs3d0MsZUFBZSxVQUFZNndDLEVBQUtnQixNQUFRVixFQUFNVyxTQUFTakIsRUFBS2dCLE9BQVMsS0FDMUU1eEMsMkJDckJGOHhDLEVBQWlCLENBQzdCQyxXQUFXLGFBQ1hDLFlBQVksY0FDWkMsU0FBUyxXQUNUQyxnQkFBZ0Isa0JBQ2hCQyxtQkFBbUIscUJBQ25CQyxPQUFPLFNBRVBDLFdBQVcsYUFDWEMsWUFBWSxjQUNaQyxrQkFBa0Isb0JBQ2xCQywyQkFBMkIsNkJBQzNCQyxlQUFlLGlCQUNmQyxlQUFlLGlCQUNmQyxhQUFhLGVBQ2JDLHNCQUFzQix3QkFDdEJDLGFBQWEsZUFDYkMsWUFBWSxjQUNaQyxjQUFjLGdCQUNkQyxlQUFlLGlCQUNmQyxnQkFBZ0Isa0JBQ2hCQyxVQUFVLFlBQ1ZDLGlCQUFpQixtQkFDakJDLGtCQUFrQixvQkFDbEJDLFNBQVMsWUFHSkMsR0FBVUMsRUFBQSxHQUFBQyxJQUFBRCxFQUNkekIsRUFBZVEsWUFBYSxTQURka0IsSUFBQUQsRUFFZHpCLEVBQWVTLGtCQUFtQixZQUZwQmlCLElBQUFELEVBR2R6QixFQUFlVyxlQUFnQixVQUhqQmUsSUFBQUQsRUFJZHpCLEVBQWVVLDJCQUE0QixjQUo3QmUsR0FRS0UsYUFFcEIsU0FBQWxwQyxFQUFZbXBDLEVBQVlDLEVBQVM1K0IsR0FBU3kyQixJQUFBeHFDLEtBQUF1SixHQUFBLElBQ25DcXBDLEVBQWMsU0FBQTVpQyxHQUFNLE9BQUksV0FFN0IsTUFEQTRDLFFBQVFsVCxNQUFSLEdBQUFnSyxPQUFpQmdwQyxFQUFqQiwwQkFBQWhwQyxPQUFvRHNHLEVBQXBELGFBQ00sSUFBSXBOLE1BQUosR0FBQThHLE9BQWFncEMsRUFBYiwwQkFBQWhwQyxPQUFnRHNHLEVBQWhELGVBWVBwUyxPQUFPNlIsS0FBS3FoQyxHQUFnQmhHLElBQUksU0FBQXJzQyxHQUFHLE9BVGIsU0FBQ3VSLEVBQVF2UixRQUNILElBQWpCc1YsRUFBUXRWLEtBQ2pCc1YsRUFBUXRWLEdBQU91UixHQUFrQjRpQyxFQUFZbjBDLElBRTNDNnpDLEVBQVc3ekMsU0FBNEMsSUFBN0JzVixFQUFRdStCLEVBQVc3ekMsTUFDL0NzVixFQUFRdStCLEVBQVc3ekMsSUFBUXNWLEVBQVF0VixHQUFPc1YsRUFBUXRWLEdBQU9tMEMsRUFBWW4wQyxJQUloQ28wQyxDQUFjRixFQUFRbDBDLEdBQU1BLHlEQUdsRHNWLEdBRWpCQSxFQUFRKytCLFFBQVUsU0FBQzNDLEdBQWUsT0FDN0JwOEIsRUFBUWcvQixVQUNSaC9CLEVBQVFnL0IsU0FBU0MsU0FDZGovQixFQUFRZy9CLFNBQVNDLFNBQVNqSSxLQUFLLFNBQUF2aEMsR0FBQyxPQUFJQSxFQUFFMm1DLGFBQWVBLFNBSDNCLDREQ2xEZjhDLGNBQ3BCLFNBQUFudUMsRUFBWWlQLEVBQVNtL0IsR0FBVSxJQUFBMTFDLEVBQUEsT0FBQWd0QyxJQUFBeHFDLEtBQUE4RSxJQUFBdEgsRUFBQTIxQyxJQUFBbnpDLEtBQUFvekMsSUFBQXR1QyxHQUFBekgsS0FBQTJDLEtBQ3hCLGNBQWU0cUMsS0FDaEJudEMsS0FBTyxjQUNaRCxFQUFLdVcsUUFBVUEsRUFDZnZXLEVBQUswMUMsVUFBWUEsRUFKYTExQyx1REFPdkI2MUMsR0FBeUIsSUFBQXZ1QyxFQUFBOUUsS0FBYmlRLEVBQWEsRUFBQS9QLFVBQUFhLGFBQUEsSUFBQWIsVUFBQSxHQUFBQSxVQUFBLEdBQUgsR0FDN0IsT0FBTyxJQUFJTixRQUFRLFNBQUFSLEdBQ2xCLElBQUlpMEMsSUFBZUEsRUFBV3R5QyxPQUFRLE1BQU0sSUFBSTZCLE1BQU0sK0NBQ3REcU4sRUFBVXJTLE9BQU93eEMsT0FBTyxDQUFDa0UsWUFBWSxJQUFNQyxZQUFZLElBQU05RyxXQUFTLEdBQVF4OEIsR0FJOUVuTCxFQUFLMHVDLGNBQWdCLElBQUkxSCxFQUFjdUgsRUFBWXBqQyxFQUFRc2pDLGFBQzNEenVDLEVBQUswdUMsY0FBY0MsS0FBS3hqQyxFQUFRdzhCLFdBQVc1c0MsS0FBM0MsZUFBQTBKLEVBQUEwaEMsSUFBQUMsRUFBQTNoQyxFQUFBcVQsS0FBZ0QsU0FBQXJULEVBQU1tcUMsR0FBTixPQUFBeEksRUFBQTNoQyxFQUFBeVAsS0FBQSxTQUFBelAsR0FBQSxjQUFBQSxFQUFBMlQsS0FBQTNULEVBQUFtUyxNQUFBLFVBQzNDZzRCLEVBRDJDLENBQUFucUMsRUFBQW1TLEtBQUEsZUFBQW5TLEVBQUE2USxPQUFBLFNBQ3JCaGIsR0FBTyxJQURjLGNBRS9DMEYsRUFBS291QyxVQUFVbjFDLE1BQU00MUMsYUFBckIsRUFDSTd1QyxFQUFLb3VDLFVBQVVuMUMsTUFBTTYxQyxTQUFROXVDLEVBQUtvdUMsVUFBVW4xQyxNQUFNNjFDLE9BQVM5dUMsRUFBS3JILE1BSHJCOEwsRUFBQTZRLE9BQUEsU0FJeENoYixFQUFRMEYsRUFBSzB1QyxnQkFKMkIsd0JBQUFqcUMsRUFBQTZULFNBQUE3VCxNQUFoRCx5QkFBQUEsRUFBQXBKLE1BQUFILEtBQUFFLFlBQUEsc0tBVURGLEtBQUtrekMsVUFBVW4xQyxNQUFNbXpDLGdCQUFnQixTQUFDOXlDLEVBQUVvTCxHQUFILE9BQVMxRSxFQUFLK3VDLGFBQWF6MUMsRUFBRW9MLElBQUkscUJBQ2hDeEosS0FBS2t6QyxVQUFVbjFDLE1BQU15ekMsMkNBQTNEeHhDLEtBQUtrekMsVUFBVW4xQyxNQUFNZzFDLDBLQXNGckIsT0FBT0UsRUFBWWEsV0FBVzl6QywyRUFHWnV0Qix3RUFDWEEsZ0JBQ0R3bUIsR0FBT0Msc0JBR1BELEdBQU9FLGtDQUZYajBDLEtBQUtrekMsVUFBVW4xQyxNQUFNZzFDLFNBQVcsZ0RBR00veUMsS0FBS2t6QyxVQUFVbjFDLE1BQU15ekMsMkNBQTNEeHhDLEtBQUtrekMsVUFBVW4xQyxNQUFNZzFDLDJLQTNGTmgvQixHQUFRLElBQUFqUCxFQUNuQm92QyxFQUFpQixTQUFDbGxCLEVBQUltbEIsR0FFM0IsT0FER25sQixHQUFNbWxCLEtBQVFwZ0MsRUFBUW0vQixVQUFVbjFDLE1BQU1nMUMsU0FBVy9qQixHQUM3Q21sQixHQUFVbmxCLEdBR2xCLE9BQUFscUIsRUFBQSxHQUFBMHRDLElBQUExdEMsRUFDRWdzQyxFQUFlQyxXQUFZLGtCQUFNaDlCLEVBQVF5L0IsY0FBY3pDLGVBRHpEeUIsSUFBQTF0QyxFQUVFZ3NDLEVBQWVFLFlBQWEsa0JBQU1qOUIsRUFBUXkvQixjQUFjeEMsZ0JBRjFEd0IsSUFBQTF0QyxFQUdFZ3NDLEVBQWVHLFNBQVUsa0JBQU1sOUIsRUFBUXkvQixjQUFjdkMsYUFIdkR1QixJQUFBMXRDLEVBSUVnc0MsRUFBZUksZ0JBQWlCLFNBQUNsOUIsR0FBRCxJQUFVdlYsRUFBVixFQUFBeUIsVUFBQWEsYUFBQSxJQUFBYixVQUFBLEdBQUFBLFVBQUEsR0FBZ0IsS0FBaEIsT0FBeUI2VCxFQUFReS9CLGNBQWN0QyxnQkFBZ0JsOUIsRUFBU3ZWLEtBSjFHK3pDLElBQUExdEMsRUFLRWdzQyxFQUFlSyxtQkFBb0IsZUFBQzF5QyxFQUFELEVBQUF5QixVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFPLEtBQVAsT0FBZ0I2VCxFQUFReS9CLGNBQWNyQyxtQkFBbUIxeUMsS0FMOUYrekMsSUFBQTF0QyxFQU1FZ3NDLEVBQWVNLE9BQVEsU0FBQ3A5QixHQUFELE9BQWFELEVBQVF5L0IsY0FBY3RDLGdCQUFnQmw5QixLQU41RXcrQixJQUFBMXRDLEVBT0Vnc0MsRUFBZU8sV0FBWSxrQkFBTXQ5QixFQUFReS9CLGNBQWNZLGVBQWUsQ0FBRWx3QyxLQUFLLGFBQWMycEMsUUFBUSxPQVByRzJFLElBQUExdEMsRUFRRWdzQyxFQUFlUSxZQUFhLFNBQUMrQyxHQUFELE9BQW9CdGdDLEVBQVF5L0IsY0FBY1ksZUFBZSxDQUNyRmx3QyxLQUFLLHVCQUNMMnBDLFFBQVEsQ0FBRXlHLE9BQU9ELEdBQWtDLENBQUNyQixTQUFTLENBQUNqL0IsRUFBUW0vQixVQUFVbjFDLE1BQU13MkMsYUFDcEYxMEMsS0FBS3EwQyxLQVhUMUIsSUFBQTF0QyxFQVlFZ3NDLEVBQWVTLGtCQUFtQixTQUFDOEMsR0FBRCxPQUFvQnRnQyxFQUFReS9CLGNBQWNZLGVBQWUsQ0FDM0Zsd0MsS0FBSyxvQkFDTDJwQyxRQUFRLENBQUV5RyxPQUFPRCxHQUFrQyxDQUFDckIsU0FBUyxDQUFDai9CLEVBQVFtL0IsVUFBVW4xQyxNQUFNdzJDLGFBQ3BGMTBDLEtBQUtxMEMsS0FmVDFCLElBQUExdEMsRUFnQkVnc0MsRUFBZVUsMkJBQTRCLGtCQUFNejlCLEVBQVF5L0IsY0FBY1ksZUFBZSxDQUN0Rmx3QyxLQUFLLDBCQUNMMnBDLFFBQVEsS0FDTmh1QyxLQUFLcTBDLEtBbkJUMUIsSUFBQTF0QyxFQW9CRWdzQyxFQUFlVyxlQUFnQixrQkFBTTE5QixFQUFReS9CLGNBQWNZLGVBQWUsQ0FDMUVsd0MsS0FBSyxpQkFDTDJwQyxRQUFRLEtBQ05odUMsS0FBSyxTQUFBaUksR0FBRyxPQUFJb3NDLEVBQWUsS0FBTXBzQyxPQXZCckMwcUMsSUFBQTF0QyxFQXdCRWdzQyxFQUFlWSxlQUFnQixTQUFBNXNDLEdBQUEsSUFBRXJILEVBQUZxSCxFQUFFckgsS0FBTSsyQyxFQUFSMXZDLEVBQVEwdkMsSUFBUixPQUFpQnpnQyxFQUFReS9CLGNBQWNZLGVBQWUsQ0FDckZsd0MsS0FBSyxpQkFDTDJwQyxRQUFRLENBQUNwd0MsT0FBTSsyQyxTQUNiMzBDLEtBQUssU0FBQW12QixHQUFFLE9BQUlBLEVBQUtrbEIsRUFBZWxsQixHQUFNLFNBM0J6Q3dqQixJQUFBMXRDLEVBNEJFZ3NDLEVBQWVhLGFBQWMsU0FBQ2hHLEdBQUQsSUFBUXhuQyxFQUFSLEVBQUFqRSxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFlLEtBQU11MEMsRUFBckIsRUFBQXYwQyxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFpQyxLQUFqQyxPQUEwQzZULEVBQVF5L0IsY0FBY1ksZUFBZSxDQUM1R2x3QyxLQUFLLGVBQ0wycEMsUUFBUSxDQUFFbEMsUUFBT3huQyxPQUFNc3dDLGlCQTlCekJqQyxJQUFBMXRDLEVBZ0NFZ3NDLEVBQWVjLHNCQUF1QixTQUFDNkMsRUFBV3R3QyxHQUFaLE9BQXFCNFAsRUFBUXkvQixjQUFjWSxlQUFlLENBQ2hHbHdDLEtBQUssNEJBQ0wycEMsUUFBUSxDQUFFNEcsWUFBV3R3QyxZQWxDdkJxdUMsSUFBQTF0QyxFQW9DRWdzQyxFQUFlZSxhQUFjLFNBQUMxQixHQUFELE9BQWdCcDhCLEVBQVF5L0IsY0FBY1ksZUFBZSxDQUNsRmx3QyxLQUFLLGVBQ0wycEMsUUFBUSxDQUFFc0Msa0JBdENacUMsSUFBQTF0QyxFQXdDRWdzQyxFQUFlZ0IsWUFBYSxTQUFDZ0IsRUFBU3lCLEdBQVYsT0FBc0J4Z0MsRUFBUXkvQixjQUFjWSxlQUFlLENBQ3ZGbHdDLEtBQUssY0FDTDJwQyxRQUFRLENBQUVpRixVQUFTeUIsUUFBUUEsR0FBV3hnQyxFQUFRbS9CLFVBQVVuMUMsTUFBTXcyQyxhQTFDaEUvQixJQUFBMXRDLEVBNENFZ3NDLEVBQWVpQixjQUFlLFNBQUN3QyxHQUFELE9BQWF4Z0MsRUFBUXkvQixjQUFjWSxlQUFlLENBQ2hGbHdDLEtBQUssZ0JBQ0wycEMsUUFBUSxDQUFFMEcsUUFBUUEsR0FBV3hnQyxFQUFRbS9CLFVBQVVuMUMsTUFBTXcyQyxhQTlDdkQvQixJQUFBMXRDLEVBZ0RFZ3NDLEVBQWVrQixlQUFnQixTQUFDdUMsR0FBRCxPQUFheGdDLEVBQVF5L0IsY0FBY1ksZUFBZSxDQUNqRmx3QyxLQUFLLG9CQUNMMnBDLFFBQVEsQ0FBRTBHLFFBQVFBLEdBQVd4Z0MsRUFBUW0vQixVQUFVbjFDLE1BQU13MkMsYUFsRHZEL0IsSUFBQTF0QyxFQW9ERWdzQyxFQUFlbUIsZ0JBQWlCLFNBQUNzQyxFQUFTRyxFQUFJQyxHQUFkLElBQXNCMWtDLEVBQXRCLEVBQUEvUCxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFnQyxHQUFoQyxPQUF1QzZULEVBQVF5L0IsY0FBY1ksZUFBZSxDQUM1R2x3QyxLQUFLLGtCQUNMMnBDLFFBQVEsQ0FBQzBHLFFBQVFBLEdBQVd4Z0MsRUFBUW0vQixVQUFVbjFDLE1BQU13MkMsUUFBU0csS0FBSUMsU0FBUTFrQyxlQXREM0V1aUMsSUFBQTF0QyxFQXdERWdzQyxFQUFlb0IsVUFBVyxrQkFBTW4rQixFQUFReS9CLGNBQWNZLGVBQWUsQ0FDckVsd0MsS0FBSyxZQUNMMnBDLFFBQVEsT0ExRFYyRSxJQUFBMXRDLEVBNERFZ3NDLEVBQWVxQixpQkFBa0IsU0FBQ3RFLEdBQUQsT0FBYTk1QixFQUFReS9CLGNBQWNZLGVBQWUsQ0FDbkZsd0MsS0FBSyxtQkFDTDJwQyxjQTlERjJFLElBQUExdEMsRUFnRUVnc0MsRUFBZXNCLGtCQUFtQixTQUFDakMsRUFBWXlFLEVBQVM5QixFQUFTeUIsR0FBL0IsT0FBMkN4Z0MsRUFBUXkvQixjQUFjWSxlQUFlLENBQ2xIbHdDLEtBQUssb0JBQ0wycEMsUUFBUSxDQUFFc0MsYUFBWXlFLFVBQVM5QixVQUFTeUIsUUFBUUEsR0FBV3hnQyxFQUFRbS9CLFVBQVVuMUMsTUFBTXcyQyxhQWxFckYvQixJQUFBMXRDLEVBb0VFZ3NDLEVBQWV1QixTQUFVLFNBQUN6QixFQUFPMkQsR0FBUixPQUFvQnhnQyxFQUFReS9CLGNBQWNZLGVBQWUsQ0FDbEZsd0MsS0FBSyxXQUNMMnBDLFFBQVEsQ0FBRStDLFFBQU8yRCxRQUFRQSxHQUFXeGdDLEVBQVFtL0IsVUFBVW4xQyxNQUFNdzJDLGFBdEU5RHp2QyxTQXJDdUMycUMsR0NNcEJvRixlQUNwQixTQUFBL3ZDLEVBQVlpUCxFQUFTbS9CLEdBQVUsSUFBQTExQyxFQUFBLE9BQUFndEMsSUFBQXhxQyxLQUFBOEUsSUFBQXRILEVBQUEyMUMsSUFBQW56QyxLQUFBb3pDLElBQUF0dUMsR0FBQXpILEtBQUEyQyxLQUN4QixjQUFlNHFDLEtBQ2hCbnRDLEtBQU8sY0FDWkQsRUFBS3VXLFFBQVVBLEVBQ2Z2VyxFQUFLMDFDLFVBQVlBLEVBSmExMUMsdURBT3ZCNjFDLEdBQXlCLElBQUF2dUMsRUFBQTlFLEtBQWJpUSxFQUFhLEVBQUEvUCxVQUFBYSxhQUFBLElBQUFiLFVBQUEsR0FBQUEsVUFBQSxHQUFILEdBQzdCLE9BQU8sSUFBSU4sUUFBSixlQUFBcEMsRUFBQXl0QyxJQUFBQyxFQUFBM2hDLEVBQUFxVCxLQUFZLFNBQUFwZixFQUFNNEIsR0FBTixJQUFBKzBCLEVBQUEsT0FBQStXLEVBQUEzaEMsRUFBQXlQLEtBQUEsU0FBQXhiLEdBQUEsY0FBQUEsRUFBQTBmLEtBQUExZixFQUFBa2UsTUFBQSxVQUNkMjNCLEdBQWVBLEVBQVd0eUMsT0FEWixDQUFBdkQsRUFBQWtlLEtBQUEsY0FDMEIsSUFBSTlZLE1BQU0sK0NBRHBDLGNBRWxCcU4sRUFBVXJTLE9BQU93eEMsT0FBTyxDQUFDa0UsWUFBWSxJQUFNQyxZQUFZLElBQU05RyxXQUFTLEdBQVF4OEIsR0FGNUR6UyxFQUFBa2UsS0FBQSxFQUlDeXlCLE1BQUssR0FBQXprQyxPQWhCYixvQ0FnQmEsaUJBQUFBLE9BQTRCMGdDLElBQVV2cUMsS0FBSyxTQUFBMkosR0FBQyxPQUFJQSxFQUFFb21DLFNBSnhELFVBSVozRCxFQUpZenVDLEVBQUF5YyxLQUFBLENBQUF6YyxFQUFBa2UsS0FBQSxlQUFBbGUsRUFBQTRjLE9BQUEsU0FLRGhiLEdBQU8sSUFMTixPQVFsQjBGLEVBQUswdUMsY0FBZ0IsSUFBSTFILEVBQWN1SCxFQUFZcGpDLEVBQVFzakMsYUFDM0R6dUMsRUFBSzB1QyxjQUFjQyxLQUFLeGpDLEVBQVF3OEIsVUFBV1IsRUFwQjdCLGlDQW9CZ0Rwc0MsS0FBOUQsZUFBQTBKLEVBQUEwaEMsSUFBQUMsRUFBQTNoQyxFQUFBcVQsS0FBbUUsU0FBQXJULEVBQU1tcUMsR0FBTixPQUFBeEksRUFBQTNoQyxFQUFBeVAsS0FBQSxTQUFBelAsR0FBQSxjQUFBQSxFQUFBMlQsS0FBQTNULEVBQUFtUyxNQUFBLFVBQzlEZzRCLEVBRDhELENBQUFucUMsRUFBQW1TLEtBQUEsZUFBQW5TLEVBQUE2USxPQUFBLFNBQ3hDaGIsR0FBTyxJQURpQyxjQUVsRTBGLEVBQUtvdUMsVUFBVW4xQyxNQUFNNDFDLGFBQXJCLEVBQ0k3dUMsRUFBS291QyxVQUFVbjFDLE1BQU02MUMsU0FBUTl1QyxFQUFLb3VDLFVBQVVuMUMsTUFBTTYxQyxPQUFTOXVDLEVBQUtySCxNQUhGOEwsRUFBQTZRLE9BQUEsU0FJM0RoYixFQUFRMEYsRUFBSzB1QyxnQkFKOEMsd0JBQUFqcUMsRUFBQTZULFNBQUE3VCxNQUFuRSx5QkFBQUEsRUFBQXBKLE1BQUFILEtBQUFFLFlBQUEsSUFUa0IseUJBQUExQyxFQUFBNGYsU0FBQTVmLE1BQVoseUJBQUFBLEVBQUEyQyxNQUFBSCxLQUFBRSxZQUFBLGtLQW9CK0JGLEtBQUtrekMsVUFBVW4xQyxNQUFNeXpDLDJDQUEzRHh4QyxLQUFLa3pDLFVBQVVuMUMsTUFBTWcxQywwS0FLckIsT0FBT0UsRUFBWWEsV0FBVzl6QywyRUFHWnV0Qix3RUFDWEEsZ0JBQ0R3bUIsR0FBT0Msc0JBR1BELEdBQU9FLGtDQUZYajBDLEtBQUtrekMsVUFBVW4xQyxNQUFNZzFDLFNBQVcsZ0RBR00veUMsS0FBS2t6QyxVQUFVbjFDLE1BQU15ekMsMkNBQTNEeHhDLEtBQUtrekMsVUFBVW4xQyxNQUFNZzFDLDZJQTNDZ0J0RCxHQ1RyQ3FGLElBQVcsRUFDTSxvQkFBWHR6QyxRQUE4QyxvQkFBYnN2QixnQkFDYixJQUFuQnR2QixPQUFPdXpDLFFBQ1pqa0IsU0FBU21CLGlCQUFpQixnQkFBaUIsa0JBQU02aUIsSUFBVyxJQUR2QkEsSUFBVyxPQUloREUsR0FBYSxlQUFBenJDLEVBQUEwaEMsSUFBQUMsRUFBQTNoQyxFQUFBcVQsS0FBRyxTQUFBclQsSUFBQSxJQUFBekUsRUFBQXZILEVBQUFDLEVBQUEwQyxVQUFBLE9BQUFnckMsRUFBQTNoQyxFQUFBeVAsS0FBQSxTQUFBelAsR0FBQSxjQUFBQSxFQUFBMlQsS0FBQTNULEVBQUFtUyxNQUFBLGNBQU9rekIsRUFBUCxFQUFBcHhDLEVBQUF1RCxhQUFBLElBQUF2RCxFQUFBLEdBQUFBLEVBQUEsR0FBa0IsS0FBTSt3QyxFQUF4QixFQUFBL3dDLEVBQUF1RCxhQUFBLElBQUF2RCxFQUFBLEdBQUFBLEVBQUEsR0FBZ0MsRUFBaEMrTCxFQUFBNlEsT0FBQSxTQUNkLElBQUl4YSxRQUFRLFNBQUE1QixHQUFLLE9BQ25CNHdDLElBQVVBLEVBQVc1d0MsR0FDdEI4MkMsR0FBb0JsRyxHQUFRLEdBQ3BCLEVBQVJMLEVBQWtCSyxHQUFRLFFBQzdCajVCLFdBQVcsa0JBQU1xL0IsR0FBY3BHLEVBQVVMLEVBQVEsSUFBSSxRQUxqQyx3QkFBQWhsQyxFQUFBNlQsU0FBQTdULE1BQUgseUJBQUFBLEVBQUFwSixNQUFBSCxLQUFBRSxZQUFBLEdBU0UrMEMsZUFFcEIsU0FBQW53QyxFQUFZaVAsRUFBU20vQixHQUFVLElBQUExMUMsRUFBQSxPQUFBZ3RDLElBQUF4cUMsS0FBQThFLElBQUF0SCxFQUFBMjFDLElBQUFuekMsS0FBQW96QyxJQUFBdHVDLEdBQUF6SCxLQUFBMkMsS0FDeEIsaUJBQWtCNHFDLEtBQ25CbnRDLEtBQU8saUJBQ1pELEVBQUt1VyxRQUFVQSxFQUNmdlcsRUFBSzAxQyxVQUFZQSxFQUphMTFDLDZMQVF2QixJQUFJb0MsUUFBSixlQUFBMkosRUFBQTBoQyxJQUFBQyxFQUFBM2hDLEVBQUFxVCxLQUFZLFNBQUFyVCxFQUFNbkssR0FBTixPQUFBOHJDLEVBQUEzaEMsRUFBQXlQLEtBQUEsU0FBQXpQLEdBQUEsY0FBQUEsRUFBQTJULEtBQUEzVCxFQUFBbVMsTUFBQSxjQUFBblMsRUFBQW1TLEtBQUEsRUFDRXM1QixLQURGLE9BQUF6ckMsRUFBQTBRLE9BR2RuVixFQUFLb3VDLFlBQWNwdUMsRUFBS291QyxVQUFVbjFDLE1BQU02MUMsU0FBUTl1QyxFQUFLb3VDLFVBQVVuMUMsTUFBTTYxQyxPQUFTOXVDLEVBQUtySCxNQUN0RjJCLEVBQVEsY0FKUyx3QkFBQW1LLEVBQUE2VCxTQUFBN1QsTUFBWix5QkFBQUEsRUFBQXBKLE1BQUFILEtBQUFFLFlBQUEsMlFBVURxMEMsRUFBVXYwQyxLQUFLK1QsUUFBUXdnQyxXQUd0QlcsRUFBUTF6QyxPQUFPdXpDLFFBQVF6RCxZQUFZNXlDLEtBQUs4QyxPQUFPdXpDLFNBQy9DSSxFQUFjM3pDLE9BQU91ekMsUUFBUUksWUFBWXoyQyxLQUFLOEMsT0FBT3V6QyxTQUMzRHZ6QyxPQUFPdXpDLFFBQVF6RCxZQUFjLFNBQUFnRCxHQUFNLE9BQUlZLEVBQU1aLEdBQWtCLENBQUN0QixTQUFTLENBQUN1QixLQUFXMTBDLEtBQUssU0FBQW12QixHQUd6RixPQUZBbUYsRUFBSytlLFVBQVVuMUMsTUFBTWcxQyxTQUFXL2pCLEVBQ2hDbW1CLEVBQVlubUIsR0FDTEEsS0FHRm9tQixFQUFVNXpDLE9BQU91ekMsUUFBUS9DLGVBQWV0ekMsS0FBSzhDLE9BQU91ekMsU0FDMUR2ekMsT0FBT3V6QyxRQUFRL0MsZUFBaUIsU0FBQXFELEdBQUcsT0FBSUQsRUFBUUMsR0FBWWQsS0FHekR2MEMsS0FBS2t6QyxVQUFVbjFDLE1BQU02MUMsU0FBVzV6QyxLQUFLdkMsT0FDdkMrRCxPQUFPdXpDLFFBQVFuQixPQUFTNXpDLEtBQUt2QyxNQUc5QnVDLEtBQUtrekMsVUFBVXZrQyxJQUFJbk4sT0FBT3V6QyxTQUMxQi8wQyxLQUFLK1QsUUFBVS9ULEtBQUtrekMsVUFBVW4xQyxtUkFNOUJpQyxLQUFLK1QsUUFBUTQvQixhQUFiLEVBQ0EzekMsS0FBSytULFFBQVF1aEMsUUFBVXQxQyxLQUFLczFDLGtLQUlsQixNQUFPLFVBbkRvQjdGLG1WQ0xqQ3NFLEdBQVMsQ0FDZEMsYUFBYSxPQUNiQyxVQUFVLFVBR1BzQixHQUFnQixHQUNoQnJDLEdBQVksR0FDVnNDLGNBRUwsU0FBQWpzQyxJQUFjaWhDLElBQUF4cUMsS0FBQXVKLEdBQ2J2SixLQUFLK3lDLFNBQVcsS0FDaEIveUMsS0FBS3UwQyxRQUFVLEtBRWZoSyxFQUFpQmtMLFdBQVcsSUFBSVosR0FBWTcwQyxLQUFNa3pDLEtBQ2xEM0ksRUFBaUJrTCxXQUFXLElBQUl4QyxFQUFZanpDLEtBQU1rekMsS0FDbEQzSSxFQUFpQmtMLFdBQVcsSUFBSVIsR0FBVWoxQyxLQUFNa3pDLG9EQUd0Q3hJLEdBRVYsSUFBSUEsRUFBT2dMLFVBQVcsTUFBTSxJQUFJOXlDLE1BQUosR0FBQThHLE9BQWFnaEMsRUFBT2p0QyxLQUFwQixrREFFNUI4c0MsRUFBaUJrTCxXQUFXL0ssR0FFekJBLEVBQU94bUMsT0FBUzBtQyxJQUNsQjVxQyxLQUFLMHFDLEVBQU9qdEMsTUFBUWl0QyxFQUFPaUwsa0JBTlgsV0FBUSxJQUFJekMsR0FBVW4xQyxNQUFNZzFDLFNBQVUsTUFBTSxJQUFJbndDLE1BQU0sZ0JBTWYsa0JBQU1zd0MsR0FBVW4xQyxNQUFNZzFDLFdBQzdFL3lDLEtBQUswcUMsRUFBT2p0QyxLQUFLLFFBQVVpdEMsRUFBT2tMLGFBQ2xDTCxHQUFjMXVDLEtBQUs2akMsRUFBT21MLG1CQUd4Qm5MLEVBQU94bUMsT0FBUzBtQyxHQUNsQkYsRUFBT2o1QixLQUFLelIsS0FBTWt6QyxHQUFXcUMsb0VBSWpCbEMsRUFBWXBqQyx1R0FDbEIsSUFBSXJRLFFBQUosZUFBQTJKLEVBQUEwaEMsSUFBQUMsRUFBQTNoQyxFQUFBcVQsS0FBWSxTQUFBclQsRUFBT25LLEdBQVAsSUFBQSswQixFQUFBOXlCLEVBQUEreUIsRUFBQXJ1QixFQUFBbzBCLEVBQUEsT0FBQStRLEVBQUEzaEMsRUFBQXlQLEtBQUEsU0FBQXpQLEdBQUEsY0FBQUEsRUFBQTJULEtBQUEzVCxFQUFBbVMsTUFBQSxPQVFsQixJQVBJekwsSUFBU0EsRUFBVSxJQUN2QnpTLEVBQUsrMkMsUUFBVXRrQyxFQUFRbFIsZUFBZSxXQUFha1IsRUFBUXNrQyxRQUFVLEtBRS9EdUIsRUFBVXZMLEVBQWlCdUwsVUFFN0IzSixHQUVKLEVBREk0SixFQUFXLEdBQ2Zod0MsRUFBQSxTQUFRN0ksR0FDUCxJQUFNMDJDLEVBQVNrQyxFQUFRNTRDLEdBQ3ZCNjRDLEVBQVNsdkMsS0FBS2pILFFBQVFndEMsS0FBSyxDQUMxQmdILEVBQU8wQixRQUFRakMsRUFBWXBqQyxHQUFTcFEsS0FBcEMsZUFBQTBKLEVBQUEwaEMsSUFBQUMsRUFBQTNoQyxFQUFBcVQsS0FBeUMsU0FBQXJULEVBQU1pcUMsR0FBTixPQUFBdEksRUFBQTNoQyxFQUFBeVAsS0FBQSxTQUFBelAsR0FBQSxjQUFBQSxFQUFBMlQsS0FBQTNULEVBQUFtUyxNQUFBLFdBQ3JDODNCLEVBRHFDLENBQUFqcUMsRUFBQW1TLEtBQUEsWUFFbEIsY0FBbEI4M0IsR0FBK0IrQixHQUFjekssSUFBSSxTQUFBdGhDLEdBQUMsT0FBSUEsRUFBRWdxQyxLQUNqQixtQkFBaENJLEVBQU9vQyxxQkFIc0IsQ0FBQXpzQyxFQUFBbVMsS0FBQSxlQUFBblMsRUFBQW1TLEtBQUEsRUFHcUJrNEIsRUFBT29DLHVCQUg1QixVQUl2QyxJQUFJdkQsRUFBZ0JtQixFQUFPbjJDLEtBQU1tMkMsRUFBT2pCLFVBQVdPLEdBQVVuMUMsT0FDcEIsbUJBQS9CNjFDLEVBQU9xQyxvQkFMc0IsQ0FBQTFzQyxFQUFBbVMsS0FBQSxlQUFBblMsRUFBQW1TLEtBQUEsRUFLb0JrNEIsRUFBT3FDLHNCQUwzQixPQU12Q3hELEVBQWdCeUQsV0FBV2hELEdBQVVuMUMsT0FDckNvdUMsR0FBUyxFQUNUL3NDLEdBQU8sR0FSZ0MseUJBQUFtSyxFQUFBNlQsU0FBQTdULE1BQXpDLHlCQUFBQSxFQUFBcEosTUFBQUgsS0FBQUUsWUFBQSxJQVdBLElBQUlOLFFBQVEsU0FBQTVCLEdBQUMsT0FBSTJYLFdBQVcsa0JBQU0zWCxHQUFDLElBQVNpUyxFQUFRcWpDLGFBQWUsWUFkN0RwMkMsRUFBSSxFQUFHQSxFQUFJNDRDLEVBQVEvMEMsT0FBUTdELElBQW5DNkksRUFBUTdJLEdBUlUsT0FBQXFNLEVBQUFtUyxLQUFBLEVBMEJaOWIsUUFBUW9yQyxJQUFJK0ssR0ExQkEsY0FBQXhzQyxFQUFBNlEsT0FBQSxTQTJCWGhiLEVBQVErc0MsSUEzQkcseUJBQUE1aUMsRUFBQTZULFNBQUE3VCxNQUFaLHlCQUFBQSxFQUFBcEosTUFBQUgsS0FBQUUsWUFBQSwyR0FzRExnakIsR0FBUyxJQUFJaXpCLE1BQU0sZUFwQm5CLFNBQUE1c0MsRUFBWTZzQyxHQUFVNUwsSUFBQXhxQyxLQUFBdUosR0FDbEJ2SixLQUFLKzBDLFFBQVVxQixnREFHRixJQUFBN3NDLEVBQUF2SixLQUNuQixJQUFLQSxLQUFLKzBDLFFBQVFwQixZQUFhLFNBQUE3dUMsRUFBQTVFLFVBQUFhLE9BRHJCMHBDLEVBQ3FCei9CLE1BQUFsRyxHQUFBdEgsRUFBQSxFQUFBQSxFQUFBc0gsRUFBQXRILElBRHJCaXRDLEVBQ3FCanRDLEdBQUEwQyxVQUFBMUMsR0FDOUJpdEMsRUFBUUssSUFBSSxTQUFBSixHQUFNLE9BQUluaEMsRUFBS3dyQyxRQUFRVSxXQUFXL0ssd0NBSTlCLElBQUFuaEMsRUFDZCxPQUFPQSxFQUFBdkosS0FBSyswQyxTQUFRTyxRQUFibjFDLE1BQUFvSixFQUFBckosd0RBU1csQ0FBVyxJQUFJczFDLElBQVUsQ0FDL0N6M0MsSUFEK0MsU0FDM0M4QyxFQUFPcEQsR0FBTSxZQUNXLElBQWpCb0QsRUFBT3BELEdBQ1ZvRCxFQUFPazBDLFFBQVF0M0MsR0FEeUJvRCxFQUFPcEQsTUFJeER5MUMsR0FBVXZrQyxJQUFNLFNBQUExUCxHQUFDLE9BQUlpa0IsR0FBTzZ4QixRQUFVOTFDLEdBQ3RDaTBDLEdBQVVuMUMsSUFBTSxrQkFBTW1sQixHQUFPNnhCLFNBQ1Isb0JBQVh2ekMsU0FBd0JBLE9BQU82MEMsVUFBWW56QixJQUdyREEsR0FBT3VzQixPQUFTQSxFQUNoQnZzQixHQUFPMG5CLFlBQWNBLEVBQ3JCMW5CLEdBQU80c0IsWUFBY0EsRUFDckI1c0IsR0FBT3F0QixRQUFVQSxFQUNqQnJ0QixHQUFPZ3RCLE1BQVFBLEVBQ2ZodEIsR0FBTzRvQixjQUFnQkEsRUFDdkI1b0IsR0FBTzZ3QixPQUFTQSxHQUNoQjd3QixHQUFPdXZCLGdCQUFrQkEsRUFDekJ2dkIsR0FBTzR0QixlQUFpQkEsRUFFVDV0QiIsImZpbGUiOiJzY2F0dGVyanMtY29yZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjY3KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSAkZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgUmVmbGVjdEFwcGx5KHRoaXMubGlzdGVuZXIsIHRoaXMudGFyZ2V0LCBhcmdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuaW5oZXJpdHMoU3RyZWFtLCBFRSk7XG5TdHJlYW0uUmVhZGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMnKTtcblN0cmVhbS5Xcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcycpO1xuU3RyZWFtLkR1cGxleCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9kdXBsZXguanMnKTtcblN0cmVhbS5UcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzJyk7XG5TdHJlYW0uUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMnKTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC40LnhcblN0cmVhbS5TdHJlYW0gPSBTdHJlYW07XG5cblxuXG4vLyBvbGQtc3R5bGUgc3RyZWFtcy4gIE5vdGUgdGhhdCB0aGUgcGlwZSBtZXRob2QgKHRoZSBvbmx5IHJlbGV2YW50XG4vLyBwYXJ0IG9mIHRoaXMgY2xhc3MpIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJlYWRhYmxlIGNsYXNzLlxuXG5mdW5jdGlvbiBTdHJlYW0oKSB7XG4gIEVFLmNhbGwodGhpcyk7XG59XG5cblN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgaWYgKGRlc3Qud3JpdGFibGUpIHtcbiAgICAgIGlmIChmYWxzZSA9PT0gZGVzdC53cml0ZShjaHVuaykgJiYgc291cmNlLnBhdXNlKSB7XG4gICAgICAgIHNvdXJjZS5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZGF0YScsIG9uZGF0YSk7XG5cbiAgZnVuY3Rpb24gb25kcmFpbigpIHtcbiAgICBpZiAoc291cmNlLnJlYWRhYmxlICYmIHNvdXJjZS5yZXN1bWUpIHtcbiAgICAgIHNvdXJjZS5yZXN1bWUoKTtcbiAgICB9XG4gIH1cblxuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIC8vIElmIHRoZSAnZW5kJyBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAgLy8gc291cmNlIGdldHMgdGhlICdlbmQnIG9yICdjbG9zZScgZXZlbnRzLiAgT25seSBkZXN0LmVuZCgpIG9uY2UuXG4gIGlmICghZGVzdC5faXNTdGRpbyAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5lbmQgIT09IGZhbHNlKSkge1xuICAgIHNvdXJjZS5vbignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfVxuXG4gIHZhciBkaWRPbkVuZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgZGVzdC5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSBkZXN0LmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8vIGRvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGNsZWFudXAoKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudCh0aGlzLCAnZXJyb3InKSA9PT0gMCkge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS5cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZC5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcbiAgfVxuXG4gIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7XG4gIHNvdXJjZS5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0Lm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3QuZW1pdCgncGlwZScsIHNvdXJjZSk7XG5cbiAgLy8gQWxsb3cgZm9yIHVuaXgtbGlrZSB1c2FnZTogQS5waXBlKEIpLnBpcGUoQylcbiAgcmV0dXJuIGRlc3Q7XG59O1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwbmEubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG4vLyBwcm90b3R5cGUgY2xhc3MgZm9yIGhhc2ggZnVuY3Rpb25zXG5mdW5jdGlvbiBIYXNoIChibG9ja1NpemUsIGZpbmFsU2l6ZSkge1xuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvYyhibG9ja1NpemUpXG4gIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fbGVuID0gMFxufVxuXG5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuYylcbiAgfVxuXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBibG9ja1NpemUgPSB0aGlzLl9ibG9ja1NpemVcbiAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoXG4gIHZhciBhY2N1bSA9IHRoaXMuX2xlblxuXG4gIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGxlbmd0aDspIHtcbiAgICB2YXIgYXNzaWduZWQgPSBhY2N1bSAlIGJsb2NrU2l6ZVxuICAgIHZhciByZW1haW5kZXIgPSBNYXRoLm1pbihsZW5ndGggLSBvZmZzZXQsIGJsb2NrU2l6ZSAtIGFzc2lnbmVkKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1haW5kZXI7IGkrKykge1xuICAgICAgYmxvY2tbYXNzaWduZWQgKyBpXSA9IGRhdGFbb2Zmc2V0ICsgaV1cbiAgICB9XG5cbiAgICBhY2N1bSArPSByZW1haW5kZXJcbiAgICBvZmZzZXQgKz0gcmVtYWluZGVyXG5cbiAgICBpZiAoKGFjY3VtICUgYmxvY2tTaXplKSA9PT0gMCkge1xuICAgICAgdGhpcy5fdXBkYXRlKGJsb2NrKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2xlbiArPSBsZW5ndGhcbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICB2YXIgcmVtID0gdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXG5cbiAgdGhpcy5fYmxvY2tbcmVtXSA9IDB4ODBcblxuICAvLyB6ZXJvIChyZW0gKyAxKSB0cmFpbGluZyBiaXRzLCB3aGVyZSAocmVtICsgMSkgaXMgdGhlIHNtYWxsZXN0XG4gIC8vIG5vbi1uZWdhdGl2ZSBzb2x1dGlvbiB0byB0aGUgZXF1YXRpb24gKGxlbmd0aCArIDEgKyAocmVtICsgMSkpID09PSBmaW5hbFNpemUgbW9kIGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9jay5maWxsKDAsIHJlbSArIDEpXG5cbiAgaWYgKHJlbSA+PSB0aGlzLl9maW5hbFNpemUpIHtcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gICAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB9XG5cbiAgdmFyIGJpdHMgPSB0aGlzLl9sZW4gKiA4XG5cbiAgLy8gdWludDMyXG4gIGlmIChiaXRzIDw9IDB4ZmZmZmZmZmYpIHtcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG5cbiAgLy8gdWludDY0XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxvd0JpdHMgPSAoYml0cyAmIDB4ZmZmZmZmZmYpID4+PiAwXG4gICAgdmFyIGhpZ2hCaXRzID0gKGJpdHMgLSBsb3dCaXRzKSAvIDB4MTAwMDAwMDAwXG5cbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGhpZ2hCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA4KVxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobG93Qml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gdm9pZCAwO1xuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0Jyk7XG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKGlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHJlYWRhYmxlSHdtID0gb3B0aW9ucy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgY2IoZXJyKTtcbn07XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgc2tpcENodW5rQ2hlY2s7XG5cbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgICBpZiAoZXIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyLnByb3RvdHlwZSkge1xuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlcjtcbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcG5hLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXG4gICAgY2xlYW5lZFVwID0gdHJ1ZTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcbiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2VcbiAgLy8gZGVzdCB3aWxsIG9ubHkgZW1pdCBvbmUgJ2RyYWluJyBldmVudCBmb3IgdGhlIG11bHRpcGxlIHdyaXRlcy5cbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxuICB2YXIgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHJldCAmJiAhaW5jcmVhc2VkQXdhaXREcmFpbikge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7IGhhc1VucGlwZWQ6IGZhbHNlIH07XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwbmEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge31cbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgcC5kYXRhLmNvcHkocmV0KTtcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XG4gICAgICBpZiAoX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveVxufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIHNyYy5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgLS10aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgfXJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKHApIHtcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTtcblxuaWYgKHV0aWwgJiYgdXRpbC5pbnNwZWN0ICYmIHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgbW9kdWxlLmV4cG9ydHMucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoeyBsZW5ndGg6IHRoaXMubGVuZ3RoIH0pO1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBvYmo7XG4gIH07XG59IiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5UcmFuc2Zvcm1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlBhc3NUaHJvdWdoXG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIgKHZhbCwgcHJlZml4KSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHZhbCkgJiYgdHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHByZWZpeCArICcgbXVzdCBiZSBhIHN0cmluZyBvciBhIGJ1ZmZlcicpXG4gIH1cbn1cblxuZnVuY3Rpb24gSGFzaEJhc2UgKGJsb2NrU2l6ZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2NrU2l6ZSlcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB0aGlzLl9sZW5ndGggPSBbMCwgMCwgMCwgMF1cblxuICB0aGlzLl9maW5hbGl6ZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhIYXNoQmFzZSwgVHJhbnNmb3JtKVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnVwZGF0ZShjaHVuaywgZW5jb2RpbmcpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuZGlnZXN0KCkpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZykge1xuICB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIoZGF0YSwgJ0RhdGEnKVxuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jb2RpbmcpXG5cbiAgLy8gY29uc3VtZSBkYXRhXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBvZmZzZXQgPSAwXG4gIHdoaWxlICh0aGlzLl9ibG9ja09mZnNldCArIGRhdGEubGVuZ3RoIC0gb2Zmc2V0ID49IHRoaXMuX2Jsb2NrU2l6ZSkge1xuICAgIGZvciAodmFyIGkgPSB0aGlzLl9ibG9ja09mZnNldDsgaSA8IHRoaXMuX2Jsb2NrU2l6ZTspIGJsb2NrW2krK10gPSBkYXRhW29mZnNldCsrXVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cbiAgd2hpbGUgKG9mZnNldCA8IGRhdGEubGVuZ3RoKSBibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IGRhdGFbb2Zmc2V0KytdXG5cbiAgLy8gdXBkYXRlIGxlbmd0aFxuICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSBkYXRhLmxlbmd0aCAqIDg7IGNhcnJ5ID4gMDsgKytqKSB7XG4gICAgdGhpcy5fbGVuZ3RoW2pdICs9IGNhcnJ5XG4gICAgY2FycnkgPSAodGhpcy5fbGVuZ3RoW2pdIC8gMHgwMTAwMDAwMDAwKSB8IDBcbiAgICBpZiAoY2FycnkgPiAwKSB0aGlzLl9sZW5ndGhbal0gLT0gMHgwMTAwMDAwMDAwICogY2FycnlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIHRoaXMuX2ZpbmFsaXplZCA9IHRydWVcblxuICB2YXIgZGlnZXN0ID0gdGhpcy5fZGlnZXN0KClcbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIGRpZ2VzdCA9IGRpZ2VzdC50b1N0cmluZyhlbmNvZGluZylcblxuICAvLyByZXNldCBzdGF0ZVxuICB0aGlzLl9ibG9jay5maWxsKDApXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkgdGhpcy5fbGVuZ3RoW2ldID0gMFxuXG4gIHJldHVybiBkaWdlc3Rcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX2RpZ2VzdCBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hCYXNlXG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOEEyRjk4LCAweDcxMzc0NDkxLCAweEI1QzBGQkNGLCAweEU5QjVEQkE1LFxuICAweDM5NTZDMjVCLCAweDU5RjExMUYxLCAweDkyM0Y4MkE0LCAweEFCMUM1RUQ1LFxuICAweEQ4MDdBQTk4LCAweDEyODM1QjAxLCAweDI0MzE4NUJFLCAweDU1MEM3REMzLFxuICAweDcyQkU1RDc0LCAweDgwREVCMUZFLCAweDlCREMwNkE3LCAweEMxOUJGMTc0LFxuICAweEU0OUI2OUMxLCAweEVGQkU0Nzg2LCAweDBGQzE5REM2LCAweDI0MENBMUNDLFxuICAweDJERTkyQzZGLCAweDRBNzQ4NEFBLCAweDVDQjBBOURDLCAweDc2Rjk4OERBLFxuICAweDk4M0U1MTUyLCAweEE4MzFDNjZELCAweEIwMDMyN0M4LCAweEJGNTk3RkM3LFxuICAweEM2RTAwQkYzLCAweEQ1QTc5MTQ3LCAweDA2Q0E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3QjcwQTg1LCAweDJFMUIyMTM4LCAweDREMkM2REZDLCAweDUzMzgwRDEzLFxuICAweDY1MEE3MzU0LCAweDc2NkEwQUJCLCAweDgxQzJDOTJFLCAweDkyNzIyQzg1LFxuICAweEEyQkZFOEExLCAweEE4MUE2NjRCLCAweEMyNEI4QjcwLCAweEM3NkM1MUEzLFxuICAweEQxOTJFODE5LCAweEQ2OTkwNjI0LCAweEY0MEUzNTg1LCAweDEwNkFBMDcwLFxuICAweDE5QTRDMTE2LCAweDFFMzc2QzA4LCAweDI3NDg3NzRDLCAweDM0QjBCQ0I1LFxuICAweDM5MUMwQ0IzLCAweDRFRDhBQTRBLCAweDVCOUNDQTRGLCAweDY4MkU2RkYzLFxuICAweDc0OEY4MkVFLCAweDc4QTU2MzZGLCAweDg0Qzg3ODE0LCAweDhDQzcwMjA4LFxuICAweDkwQkVGRkZBLCAweEE0NTA2Q0VCLCAweEJFRjlBM0Y3LCAweEM2NzE3OEYyXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDY0KVxuXG5mdW5jdGlvbiBTaGEyNTYgKCkge1xuICB0aGlzLmluaXQoKVxuXG4gIHRoaXMuX3cgPSBXIC8vIG5ldyBBcnJheSg2NClcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEyNTYsIEhhc2gpXG5cblNoYTI1Ni5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYiA9IDB4YmI2N2FlODVcbiAgdGhpcy5fYyA9IDB4M2M2ZWYzNzJcbiAgdGhpcy5fZCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZSA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZiA9IDB4OWIwNTY4OGNcbiAgdGhpcy5fZyA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faCA9IDB4NWJlMGNkMTlcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBjaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gbWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBzaWdtYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAyIHwgeCA8PCAzMCkgXiAoeCA+Pj4gMTMgfCB4IDw8IDE5KSBeICh4ID4+PiAyMiB8IHggPDwgMTApXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDYgfCB4IDw8IDI2KSBeICh4ID4+PiAxMSB8IHggPDwgMjEpIF4gKHggPj4+IDI1IHwgeCA8PCA3KVxufVxuXG5mdW5jdGlvbiBnYW1tYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA3IHwgeCA8PCAyNSkgXiAoeCA+Pj4gMTggfCB4IDw8IDE0KSBeICh4ID4+PiAzKVxufVxuXG5mdW5jdGlvbiBnYW1tYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAxNyB8IHggPDwgMTUpIF4gKHggPj4+IDE5IHwgeCA8PCAxMykgXiAoeCA+Pj4gMTApXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuICB2YXIgZiA9IHRoaXMuX2YgfCAwXG4gIHZhciBnID0gdGhpcy5fZyB8IDBcbiAgdmFyIGggPSB0aGlzLl9oIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgNjQ7ICsraSkgV1tpXSA9IChnYW1tYTEoV1tpIC0gMl0pICsgV1tpIC0gN10gKyBnYW1tYTAoV1tpIC0gMTVdKSArIFdbaSAtIDE2XSkgfCAwXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA2NDsgKytqKSB7XG4gICAgdmFyIFQxID0gKGggKyBzaWdtYTEoZSkgKyBjaChlLCBmLCBnKSArIEtbal0gKyBXW2pdKSB8IDBcbiAgICB2YXIgVDIgPSAoc2lnbWEwKGEpICsgbWFqKGEsIGIsIGMpKSB8IDBcblxuICAgIGggPSBnXG4gICAgZyA9IGZcbiAgICBmID0gZVxuICAgIGUgPSAoZCArIFQxKSB8IDBcbiAgICBkID0gY1xuICAgIGMgPSBiXG4gICAgYiA9IGFcbiAgICBhID0gKFQxICsgVDIpIHwgMFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxuICB0aGlzLl9mID0gKGYgKyB0aGlzLl9mKSB8IDBcbiAgdGhpcy5fZyA9IChnICsgdGhpcy5fZykgfCAwXG4gIHRoaXMuX2ggPSAoaCArIHRoaXMuX2gpIHwgMFxufVxuXG5TaGEyNTYucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgzMilcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5faCwgMjgpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyNTZcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXVxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTUxMiAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGE1MTIsIEhhc2gpXG5cblNoYTUxMi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYWggPSAweDZhMDllNjY3XG4gIHRoaXMuX2JoID0gMHhiYjY3YWU4NVxuICB0aGlzLl9jaCA9IDB4M2M2ZWYzNzJcbiAgdGhpcy5fZGggPSAweGE1NGZmNTNhXG4gIHRoaXMuX2VoID0gMHg1MTBlNTI3ZlxuICB0aGlzLl9maCA9IDB4OWIwNTY4OGNcbiAgdGhpcy5fZ2ggPSAweDFmODNkOWFiXG4gIHRoaXMuX2hoID0gMHg1YmUwY2QxOVxuXG4gIHRoaXMuX2FsID0gMHhmM2JjYzkwOFxuICB0aGlzLl9ibCA9IDB4ODRjYWE3M2JcbiAgdGhpcy5fY2wgPSAweGZlOTRmODJiXG4gIHRoaXMuX2RsID0gMHg1ZjFkMzZmMVxuICB0aGlzLl9lbCA9IDB4YWRlNjgyZDFcbiAgdGhpcy5fZmwgPSAweDJiM2U2YzFmXG4gIHRoaXMuX2dsID0gMHhmYjQxYmQ2YlxuICB0aGlzLl9obCA9IDB4MTM3ZTIxNzlcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBDaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gbWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBzaWdtYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMjggfCB4bCA8PCA0KSBeICh4bCA+Pj4gMiB8IHggPDwgMzApIF4gKHhsID4+PiA3IHwgeCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gc2lnbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE0IHwgeGwgPDwgMTgpIF4gKHggPj4+IDE4IHwgeGwgPDwgMTQpIF4gKHhsID4+PiA5IHwgeCA8PCAyMylcbn1cblxuZnVuY3Rpb24gR2FtbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDEgfCB4bCA8PCAzMSkgXiAoeCA+Pj4gOCB8IHhsIDw8IDI0KSBeICh4ID4+PiA3KVxufVxuXG5mdW5jdGlvbiBHYW1tYTBsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDEgfCB4bCA8PCAzMSkgXiAoeCA+Pj4gOCB8IHhsIDw8IDI0KSBeICh4ID4+PiA3IHwgeGwgPDwgMjUpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMWwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2IHwgeGwgPDwgMjYpXG59XG5cbmZ1bmN0aW9uIGdldENhcnJ5IChhLCBiKSB7XG4gIHJldHVybiAoYSA+Pj4gMCkgPCAoYiA+Pj4gMCkgPyAxIDogMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYWggPSB0aGlzLl9haCB8IDBcbiAgdmFyIGJoID0gdGhpcy5fYmggfCAwXG4gIHZhciBjaCA9IHRoaXMuX2NoIHwgMFxuICB2YXIgZGggPSB0aGlzLl9kaCB8IDBcbiAgdmFyIGVoID0gdGhpcy5fZWggfCAwXG4gIHZhciBmaCA9IHRoaXMuX2ZoIHwgMFxuICB2YXIgZ2ggPSB0aGlzLl9naCB8IDBcbiAgdmFyIGhoID0gdGhpcy5faGggfCAwXG5cbiAgdmFyIGFsID0gdGhpcy5fYWwgfCAwXG4gIHZhciBibCA9IHRoaXMuX2JsIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jbCB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZGwgfCAwXG4gIHZhciBlbCA9IHRoaXMuX2VsIHwgMFxuICB2YXIgZmwgPSB0aGlzLl9mbCB8IDBcbiAgdmFyIGdsID0gdGhpcy5fZ2wgfCAwXG4gIHZhciBobCA9IHRoaXMuX2hsIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkgKz0gMikge1xuICAgIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICAgIFdbaSArIDFdID0gTS5yZWFkSW50MzJCRShpICogNCArIDQpXG4gIH1cbiAgZm9yICg7IGkgPCAxNjA7IGkgKz0gMikge1xuICAgIHZhciB4aCA9IFdbaSAtIDE1ICogMl1cbiAgICB2YXIgeGwgPSBXW2kgLSAxNSAqIDIgKyAxXVxuICAgIHZhciBnYW1tYTAgPSBHYW1tYTAoeGgsIHhsKVxuICAgIHZhciBnYW1tYTBsID0gR2FtbWEwbCh4bCwgeGgpXG5cbiAgICB4aCA9IFdbaSAtIDIgKiAyXVxuICAgIHhsID0gV1tpIC0gMiAqIDIgKyAxXVxuICAgIHZhciBnYW1tYTEgPSBHYW1tYTEoeGgsIHhsKVxuICAgIHZhciBnYW1tYTFsID0gR2FtbWExbCh4bCwgeGgpXG5cbiAgICAvLyBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl1cbiAgICB2YXIgV2k3aCA9IFdbaSAtIDcgKiAyXVxuICAgIHZhciBXaTdsID0gV1tpIC0gNyAqIDIgKyAxXVxuXG4gICAgdmFyIFdpMTZoID0gV1tpIC0gMTYgKiAyXVxuICAgIHZhciBXaTE2bCA9IFdbaSAtIDE2ICogMiArIDFdXG5cbiAgICB2YXIgV2lsID0gKGdhbW1hMGwgKyBXaTdsKSB8IDBcbiAgICB2YXIgV2loID0gKGdhbW1hMCArIFdpN2ggKyBnZXRDYXJyeShXaWwsIGdhbW1hMGwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgZ2FtbWExbCkgfCAwXG4gICAgV2loID0gKFdpaCArIGdhbW1hMSArIGdldENhcnJ5KFdpbCwgZ2FtbWExbCkpIHwgMFxuICAgIFdpbCA9IChXaWwgKyBXaTE2bCkgfCAwXG4gICAgV2loID0gKFdpaCArIFdpMTZoICsgZ2V0Q2FycnkoV2lsLCBXaTE2bCkpIHwgMFxuXG4gICAgV1tpXSA9IFdpaFxuICAgIFdbaSArIDFdID0gV2lsXG4gIH1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDE2MDsgaiArPSAyKSB7XG4gICAgV2loID0gV1tqXVxuICAgIFdpbCA9IFdbaiArIDFdXG5cbiAgICB2YXIgbWFqaCA9IG1haihhaCwgYmgsIGNoKVxuICAgIHZhciBtYWpsID0gbWFqKGFsLCBibCwgY2wpXG5cbiAgICB2YXIgc2lnbWEwaCA9IHNpZ21hMChhaCwgYWwpXG4gICAgdmFyIHNpZ21hMGwgPSBzaWdtYTAoYWwsIGFoKVxuICAgIHZhciBzaWdtYTFoID0gc2lnbWExKGVoLCBlbClcbiAgICB2YXIgc2lnbWExbCA9IHNpZ21hMShlbCwgZWgpXG5cbiAgICAvLyB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbal0gKyBXW2pdXG4gICAgdmFyIEtpaCA9IEtbal1cbiAgICB2YXIgS2lsID0gS1tqICsgMV1cblxuICAgIHZhciBjaGggPSBDaChlaCwgZmgsIGdoKVxuICAgIHZhciBjaGwgPSBDaChlbCwgZmwsIGdsKVxuXG4gICAgdmFyIHQxbCA9IChobCArIHNpZ21hMWwpIHwgMFxuICAgIHZhciB0MWggPSAoaGggKyBzaWdtYTFoICsgZ2V0Q2FycnkodDFsLCBobCkpIHwgMFxuICAgIHQxbCA9ICh0MWwgKyBjaGwpIHwgMFxuICAgIHQxaCA9ICh0MWggKyBjaGggKyBnZXRDYXJyeSh0MWwsIGNobCkpIHwgMFxuICAgIHQxbCA9ICh0MWwgKyBLaWwpIHwgMFxuICAgIHQxaCA9ICh0MWggKyBLaWggKyBnZXRDYXJyeSh0MWwsIEtpbCkpIHwgMFxuICAgIHQxbCA9ICh0MWwgKyBXaWwpIHwgMFxuICAgIHQxaCA9ICh0MWggKyBXaWggKyBnZXRDYXJyeSh0MWwsIFdpbCkpIHwgMFxuXG4gICAgLy8gdDIgPSBzaWdtYTAgKyBtYWpcbiAgICB2YXIgdDJsID0gKHNpZ21hMGwgKyBtYWpsKSB8IDBcbiAgICB2YXIgdDJoID0gKHNpZ21hMGggKyBtYWpoICsgZ2V0Q2FycnkodDJsLCBzaWdtYTBsKSkgfCAwXG5cbiAgICBoaCA9IGdoXG4gICAgaGwgPSBnbFxuICAgIGdoID0gZmhcbiAgICBnbCA9IGZsXG4gICAgZmggPSBlaFxuICAgIGZsID0gZWxcbiAgICBlbCA9IChkbCArIHQxbCkgfCAwXG4gICAgZWggPSAoZGggKyB0MWggKyBnZXRDYXJyeShlbCwgZGwpKSB8IDBcbiAgICBkaCA9IGNoXG4gICAgZGwgPSBjbFxuICAgIGNoID0gYmhcbiAgICBjbCA9IGJsXG4gICAgYmggPSBhaFxuICAgIGJsID0gYWxcbiAgICBhbCA9ICh0MWwgKyB0MmwpIHwgMFxuICAgIGFoID0gKHQxaCArIHQyaCArIGdldENhcnJ5KGFsLCB0MWwpKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2FsID0gKHRoaXMuX2FsICsgYWwpIHwgMFxuICB0aGlzLl9ibCA9ICh0aGlzLl9ibCArIGJsKSB8IDBcbiAgdGhpcy5fY2wgPSAodGhpcy5fY2wgKyBjbCkgfCAwXG4gIHRoaXMuX2RsID0gKHRoaXMuX2RsICsgZGwpIHwgMFxuICB0aGlzLl9lbCA9ICh0aGlzLl9lbCArIGVsKSB8IDBcbiAgdGhpcy5fZmwgPSAodGhpcy5fZmwgKyBmbCkgfCAwXG4gIHRoaXMuX2dsID0gKHRoaXMuX2dsICsgZ2wpIHwgMFxuICB0aGlzLl9obCA9ICh0aGlzLl9obCArIGhsKSB8IDBcblxuICB0aGlzLl9haCA9ICh0aGlzLl9haCArIGFoICsgZ2V0Q2FycnkodGhpcy5fYWwsIGFsKSkgfCAwXG4gIHRoaXMuX2JoID0gKHRoaXMuX2JoICsgYmggKyBnZXRDYXJyeSh0aGlzLl9ibCwgYmwpKSB8IDBcbiAgdGhpcy5fY2ggPSAodGhpcy5fY2ggKyBjaCArIGdldENhcnJ5KHRoaXMuX2NsLCBjbCkpIHwgMFxuICB0aGlzLl9kaCA9ICh0aGlzLl9kaCArIGRoICsgZ2V0Q2FycnkodGhpcy5fZGwsIGRsKSkgfCAwXG4gIHRoaXMuX2VoID0gKHRoaXMuX2VoICsgZWggKyBnZXRDYXJyeSh0aGlzLl9lbCwgZWwpKSB8IDBcbiAgdGhpcy5fZmggPSAodGhpcy5fZmggKyBmaCArIGdldENhcnJ5KHRoaXMuX2ZsLCBmbCkpIHwgMFxuICB0aGlzLl9naCA9ICh0aGlzLl9naCArIGdoICsgZ2V0Q2FycnkodGhpcy5fZ2wsIGdsKSkgfCAwXG4gIHRoaXMuX2hoID0gKHRoaXMuX2hoICsgaGggKyBnZXRDYXJyeSh0aGlzLl9obCwgaGwpKSB8IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoNjQpXG5cbiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFIChoLCBsLCBvZmZzZXQpIHtcbiAgICBILndyaXRlSW50MzJCRShoLCBvZmZzZXQpXG4gICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgfVxuXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9haCwgdGhpcy5fYWwsIDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9iaCwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jaCwgdGhpcy5fY2wsIDE2KVxuICB3cml0ZUludDY0QkUodGhpcy5fZGgsIHRoaXMuX2RsLCAyNClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2VoLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9maCwgdGhpcy5fZmwsIDQwKVxuICB3cml0ZUludDY0QkUodGhpcy5fZ2gsIHRoaXMuX2dsLCA0OClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2hoLCB0aGlzLl9obCwgNTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGE1MTJcbiIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiLCJ2YXIgYXJyYXlXaXRoSG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheUxpbWl0ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5TGltaXRcIik7XG5cbnZhciBub25JdGVyYWJsZVJlc3QgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVJlc3RcIik7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zbGljZWRUb0FycmF5OyIsInZhciB3aW5kb3cgPSByZXF1aXJlKCdnbG9iYWwvd2luZG93Jyk7XG52YXIgbm9kZUNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG5mdW5jdGlvbiBnZXRSYW5kb21WYWx1ZXMoYnVmKSB7XG4gIGlmICh3aW5kb3cuY3J5cHRvICYmIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGJ1Zik7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cubXNDcnlwdG8gPT09ICdvYmplY3QnICYmIHR5cGVvZiB3aW5kb3cubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnVmKTtcbiAgfVxuICBpZiAobm9kZUNyeXB0by5yYW5kb21CeXRlcykge1xuICAgIGlmICghKGJ1ZiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleHBlY3RlZCBVaW50OEFycmF5Jyk7XG4gICAgfVxuICAgIGlmIChidWYubGVuZ3RoID4gNjU1MzYpIHtcbiAgICAgIHZhciBlID0gbmV3IEVycm9yKCk7XG4gICAgICBlLmNvZGUgPSAyMjtcbiAgICAgIGUubWVzc2FnZSA9ICdGYWlsZWQgdG8gZXhlY3V0ZSBcXCdnZXRSYW5kb21WYWx1ZXNcXCcgb24gXFwnQ3J5cHRvXFwnOiBUaGUgJyArXG4gICAgICAgICdBcnJheUJ1ZmZlclZpZXdcXCdzIGJ5dGUgbGVuZ3RoICgnICsgYnVmLmxlbmd0aCArICcpIGV4Y2VlZHMgdGhlICcgK1xuICAgICAgICAnbnVtYmVyIG9mIGJ5dGVzIG9mIGVudHJvcHkgYXZhaWxhYmxlIHZpYSB0aGlzIEFQSSAoNjU1MzYpLic7XG4gICAgICBlLm5hbWUgPSAnUXVvdGFFeGNlZWRlZEVycm9yJztcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIHZhciBieXRlcyA9IG5vZGVDcnlwdG8ucmFuZG9tQnl0ZXMoYnVmLmxlbmd0aCk7XG4gICAgYnVmLnNldChieXRlcyk7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBhdmFpbGFibGUuJyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYW5kb21WYWx1ZXM7XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG5mdW5jdGlvbiBIYXNoIChoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxufVxuXG5pbmhlcml0cyhIYXNoLCBCYXNlKVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSGFzaC5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faGFzaC5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2ggKGFsZykge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG5ldyBNRDUoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSByZXR1cm4gbmV3IFJJUEVNRDE2MCgpXG5cbiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKVxufVxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL21heG9nZGVuL3dlYnNvY2tldC1zdHJlYW0vYmxvYi80OGRjM2RkZjk0M2U1YWRhNjY4YzMxY2NkOTRlOTE4NmYwMmZhZmJkL3dzLWZhbGxiYWNrLmpzXG5cbnZhciB3cyA9IG51bGxcblxuaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdzID0gV2ViU29ja2V0XG59IGVsc2UgaWYgKHR5cGVvZiBNb3pXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdzID0gTW96V2ViU29ja2V0XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdzID0gZ2xvYmFsLldlYlNvY2tldCB8fCBnbG9iYWwuTW96V2ViU29ja2V0XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdzID0gd2luZG93LldlYlNvY2tldCB8fCB3aW5kb3cuTW96V2ViU29ja2V0XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICB3cyA9IHNlbGYuV2ViU29ja2V0IHx8IHNlbGYuTW96V2ViU29ja2V0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd3NcbiIsImZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsImZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRoSG9sZXM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheUxpbWl0OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3Q7IiwidmFyIHdpbjtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW4gPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW4gPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICB3aW4gPSBzZWxmO1xufSBlbHNlIHtcbiAgICB3aW4gPSB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aW47XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbmZ1bmN0aW9uIE1ENSAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbn1cblxuaW5oZXJpdHMoTUQ1LCBIYXNoQmFzZSlcblxuTUQ1LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgTSA9IEFSUkFZMTZcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBNW2ldID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaSAqIDQpXG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG5cbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzBdLCAweGQ3NmFhNDc4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMV0sIDB4ZThjN2I3NTYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMl0sIDB4MjQyMDcwZGIsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bM10sIDB4YzFiZGNlZWUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bNF0sIDB4ZjU3YzBmYWYsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVs1XSwgMHg0Nzg3YzYyYSwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVs2XSwgMHhhODMwNDYxMywgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVs3XSwgMHhmZDQ2OTUwMSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs4XSwgMHg2OTgwOThkOCwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzldLCAweDhiNDRmN2FmLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzEwXSwgMHhmZmZmNWJiMSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxMV0sIDB4ODk1Y2Q3YmUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMTJdLCAweDZiOTAxMTIyLCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMTNdLCAweGZkOTg3MTkzLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzE0XSwgMHhhNjc5NDM4ZSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxNV0sIDB4NDliNDA4MjEsIDIyKVxuXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxXSwgMHhmNjFlMjU2MiwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzZdLCAweGMwNDBiMzQwLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTFdLCAweDI2NWU1YTUxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzBdLCAweGU5YjZjN2FhLCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzVdLCAweGQ2MmYxMDVkLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTBdLCAweDAyNDQxNDUzLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTVdLCAweGQ4YTFlNjgxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzRdLCAweGU3ZDNmYmM4LCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzldLCAweDIxZTFjZGU2LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTRdLCAweGMzMzcwN2Q2LCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bM10sIDB4ZjRkNTBkODcsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bOF0sIDB4NDU1YTE0ZWQsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMTNdLCAweGE5ZTNlOTA1LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMl0sIDB4ZmNlZmEzZjgsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVs3XSwgMHg2NzZmMDJkOSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVsxMl0sIDB4OGQyYTRjOGEsIDIwKVxuXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs1XSwgMHhmZmZhMzk0MiwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzhdLCAweDg3NzFmNjgxLCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzExXSwgMHg2ZDlkNjEyMiwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxNF0sIDB4ZmRlNTM4MGMsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMV0sIDB4YTRiZWVhNDQsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs0XSwgMHg0YmRlY2ZhOSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVs3XSwgMHhmNmJiNGI2MCwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxMF0sIDB4YmViZmJjNzAsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMTNdLCAweDI4OWI3ZWM2LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMF0sIDB4ZWFhMTI3ZmEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bM10sIDB4ZDRlZjMwODUsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bNl0sIDB4MDQ4ODFkMDUsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bOV0sIDB4ZDlkNGQwMzksIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVsxMl0sIDB4ZTZkYjk5ZTUsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTVdLCAweDFmYTI3Y2Y4LCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzJdLCAweGM0YWM1NjY1LCAyMylcblxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZjQyOTIyNDQsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVs3XSwgMHg0MzJhZmY5NywgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxNF0sIDB4YWI5NDIzYTcsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bNV0sIDB4ZmM5M2EwMzksIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMTJdLCAweDY1NWI1OWMzLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bM10sIDB4OGYwY2NjOTIsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZWZmNDdkLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzFdLCAweDg1ODQ1ZGQxLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzhdLCAweDZmYTg3ZTRmLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTVdLCAweGZlMmNlNmUwLCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzZdLCAweGEzMDE0MzE0LCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzEzXSwgMHg0ZTA4MTFhMSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVs0XSwgMHhmNzUzN2U4MiwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzExXSwgMHhiZDNhZjIzNSwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsyXSwgMHgyYWQ3ZDJiYiwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs5XSwgMHhlYjg2ZDM5MSwgMjEpXG5cbiAgdGhpcy5fYSA9ICh0aGlzLl9hICsgYSkgfCAwXG4gIHRoaXMuX2IgPSAodGhpcy5fYiArIGIpIHwgMFxuICB0aGlzLl9jID0gKHRoaXMuX2MgKyBjKSB8IDBcbiAgdGhpcy5fZCA9ICh0aGlzLl9kICsgZCkgfCAwXG59XG5cbk1ENS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbkYgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbmZ1bmN0aW9uIGZuRyAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5IIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5JIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYyBeIChiIHwgKH5kKSkpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTUQ1XG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG5cbnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KVxuXG52YXIgemwgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl1cblxudmFyIHpyID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dXG5cbnZhciBzbCA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl1cblxudmFyIHNyID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXVxuXG52YXIgaGwgPSBbMHgwMDAwMDAwMCwgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhhOTUzZmQ0ZV1cbnZhciBociA9IFsweDUwYTI4YmU2LCAweDVjNGRkMTI0LCAweDZkNzAzZWYzLCAweDdhNmQ3NmU5LCAweDAwMDAwMDAwXVxuXG5mdW5jdGlvbiBSSVBFTUQxNjAgKCkge1xuICBIYXNoQmFzZS5jYWxsKHRoaXMsIDY0KVxuXG4gIC8vIHN0YXRlXG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG59XG5cbmluaGVyaXRzKFJJUEVNRDE2MCwgSGFzaEJhc2UpXG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHdvcmRzID0gQVJSQVkxNlxuICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHdvcmRzW2pdID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaiAqIDQpXG5cbiAgdmFyIGFsID0gdGhpcy5fYSB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYiB8IDBcbiAgdmFyIGNsID0gdGhpcy5fYyB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZSB8IDBcblxuICB2YXIgYXIgPSB0aGlzLl9hIHwgMFxuICB2YXIgYnIgPSB0aGlzLl9iIHwgMFxuICB2YXIgY3IgPSB0aGlzLl9jIHwgMFxuICB2YXIgZHIgPSB0aGlzLl9kIHwgMFxuICB2YXIgZXIgPSB0aGlzLl9lIHwgMFxuXG4gIC8vIGNvbXB1dGF0aW9uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkgKz0gMSkge1xuICAgIHZhciB0bFxuICAgIHZhciB0clxuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIHRsID0gZm4xKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFswXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMF0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XG4gICAgICB0bCA9IGZuMihhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMV0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjQoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzFdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA0OCkge1xuICAgICAgdGwgPSBmbjMoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzJdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4zKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclsyXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgNjQpIHtcbiAgICAgIHRsID0gZm40KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFszXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMihhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbM10sIHNyW2ldKVxuICAgIH0gZWxzZSB7IC8vIGlmIChpPDgwKSB7XG4gICAgICB0bCA9IGZuNShhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbNF0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjEoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzRdLCBzcltpXSlcbiAgICB9XG5cbiAgICBhbCA9IGVsXG4gICAgZWwgPSBkbFxuICAgIGRsID0gcm90bChjbCwgMTApXG4gICAgY2wgPSBibFxuICAgIGJsID0gdGxcblxuICAgIGFyID0gZXJcbiAgICBlciA9IGRyXG4gICAgZHIgPSByb3RsKGNyLCAxMClcbiAgICBjciA9IGJyXG4gICAgYnIgPSB0clxuICB9XG5cbiAgLy8gdXBkYXRlIHN0YXRlXG4gIHZhciB0ID0gKHRoaXMuX2IgKyBjbCArIGRyKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9jICsgZGwgKyBlcikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fZCArIGVsICsgYXIpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2UgKyBhbCArIGJyKSB8IDBcbiAgdGhpcy5fZSA9ICh0aGlzLl9hICsgYmwgKyBjcikgfCAwXG4gIHRoaXMuX2EgPSB0XG59XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jID8gQnVmZmVyLmFsbG9jKDIwKSA6IG5ldyBCdWZmZXIoMjApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZSwgMTYpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuMSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIGMgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuMiAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4zIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiB8ICh+YykpIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjQgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgZCkgfCAoYyAmICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIChjIHwgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSSVBFTUQxNjBcbiIsInZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTSEEgKGFsZ29yaXRobSkge1xuICBhbGdvcml0aG0gPSBhbGdvcml0aG0udG9Mb3dlckNhc2UoKVxuXG4gIHZhciBBbGdvcml0aG0gPSBleHBvcnRzW2FsZ29yaXRobV1cbiAgaWYgKCFBbGdvcml0aG0pIHRocm93IG5ldyBFcnJvcihhbGdvcml0aG0gKyAnIGlzIG5vdCBzdXBwb3J0ZWQgKHdlIGFjY2VwdCBwdWxsIHJlcXVlc3RzKScpXG5cbiAgcmV0dXJuIG5ldyBBbGdvcml0aG0oKVxufVxuXG5leHBvcnRzLnNoYSA9IHJlcXVpcmUoJy4vc2hhJylcbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpXG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhMjI0JylcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYTM4NCcpXG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMgfCAwLCAweGNhNjJjMWQ2IHwgMFxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEsIEhhc2gpXG5cblNoYS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDgwOyArK2kpIFdbaV0gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGExICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGExLCBIYXNoKVxuXG5TaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGwxIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMSkgfCAobnVtID4+PiAzMSlcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IHJvdGwxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0pXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhMS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTIyNCAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTIyNCwgU2hhMjU2KVxuXG5TaGEyMjQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2MgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2QgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2YgPSAweDY4NTgxNTExXG4gIHRoaXMuX2cgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMjI0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjgpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyMjRcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGEzODQgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhMzg0LCBTSEE1MTIpXG5cblNoYTM4NC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYWggPSAweGNiYmI5ZDVkXG4gIHRoaXMuX2JoID0gMHg2MjlhMjkyYVxuICB0aGlzLl9jaCA9IDB4OTE1OTAxNWFcbiAgdGhpcy5fZGggPSAweDE1MmZlY2Q4XG4gIHRoaXMuX2VoID0gMHg2NzMzMjY2N1xuICB0aGlzLl9maCA9IDB4OGViNDRhODdcbiAgdGhpcy5fZ2ggPSAweGRiMGMyZTBkXG4gIHRoaXMuX2hoID0gMHg0N2I1NDgxZFxuXG4gIHRoaXMuX2FsID0gMHhjMTA1OWVkOFxuICB0aGlzLl9ibCA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fY2wgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2RsID0gMHhmNzBlNTkzOVxuICB0aGlzLl9lbCA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZmwgPSAweDY4NTgxNTExXG4gIHRoaXMuX2dsID0gMHg2NGY5OGZhN1xuICB0aGlzLl9obCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEzODQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0OClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEzODRcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIGlmICh0aGlzLl9maW5hbCkge1xuICAgIHRoaXMuX19maW5hbCA9IHRoaXMuX2ZpbmFsXG4gICAgdGhpcy5fZmluYWwgPSBudWxsXG4gIH1cbiAgdGhpcy5fZGVjb2RlciA9IG51bGxcbiAgdGhpcy5fZW5jb2RpbmcgPSBudWxsXG59XG5pbmhlcml0cyhDaXBoZXJCYXNlLCBUcmFuc2Zvcm0pXG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgaW5wdXRFbmMpXG4gIH1cblxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkgcmV0dXJuIHRoaXNcblxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuXG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKCkge31cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfVxuXG4gIGRvbmUoZXJyKVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fX2ZpbmFsKCkgfHwgQnVmZmVyLmFsbG9jKDApXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW4pIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG5cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHRocm93IG5ldyBFcnJvcignY2FuXFwndCBzd2l0Y2ggZW5jb2RpbmdzJylcblxuICB2YXIgb3V0ID0gdGhpcy5fZGVjb2Rlci53cml0ZSh2YWx1ZSlcbiAgaWYgKGZpbikge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuIiwiLyoqXG4gKlxuICogQHJldmlzaW9uICAgICRJZDogaW5kZXguanMgMjAxMi0wMy0yNCAxNjoyMToxMCBBbGVrc2V5ICRcbiAqIEBjcmVhdGVkICAgICAyMDE2LTA5LTI0IDE2OjIxOjEwXG4gKiBAY2F0ZWdvcnkgICAgRXhwcmVzcyBIZWxwZXJzXG4gKiBAcGFja2FnZSAgICAgZGV2aWNlLXV1aWRcbiAqIEB2ZXJzaW9uICAgICAxLjAuMlxuICogQGNvcHlyaWdodCAgIENvcHlyaWdodCAoYykgMjAxNi0yMDE3IC0gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlICAgICBNSVQgTGljZW5zZVxuICogQGF1dGhvciAgICAgIEFsZXhleSBHb3JkZXlldiBJSyA8YWxla3NlakBnb3JkZWpldi5sdj5cbiAqIEBsaW5rICAgICAgICBodHRwOi8vd3d3LmdvcmRlamV2Lmx2XG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2RldmljZS11dWlkJyk7IiwiLyohXG4gKiBkZXZpY2UtdXVpZC5qcyB2MS4wLjQgKGh0dHBzOi8vZ2l0aHViLmNvbS9iaWdnb3JhL2RldmljZS11dWlkLylcbiAqIENvcHlyaWdodCAyMDE2LTIwMTcgQWxleGV5IEdvcmRleWV2XG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS9iaWdnb3JhL2RldmljZS11dWlkL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKi9cbi8qZ2xvYmFsXG4gc2NyZWVuLCB3aW5kb3csIG5hdmlnYXRvclxuICovXG4oZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgQk9UUyA9IFtcbiAgICAgICAgJ1xcXFwraHR0cHM6XFxcXC9cXFxcL2RldmVsb3BlcnMuZ29vZ2xlLmNvbVxcXFwvXFxcXCtcXFxcL3dlYlxcXFwvc25pcHBldFxcXFwvJyxcbiAgICAgICAgJ2dvb2dsZWJvdCcsXG4gICAgICAgICdiYWlkdXNwaWRlcicsXG4gICAgICAgICdndXJ1amlib3QnLFxuICAgICAgICAneWFuZGV4Ym90JyxcbiAgICAgICAgJ3NsdXJwJyxcbiAgICAgICAgJ21zbmJvdCcsXG4gICAgICAgICdiaW5nYm90JyxcbiAgICAgICAgJ2ZhY2Vib29rZXh0ZXJuYWxoaXQnLFxuICAgICAgICAnbGlua2VkaW5ib3QnLFxuICAgICAgICAndHdpdHRlcmJvdCcsXG4gICAgICAgICdzbGFja2JvdCcsXG4gICAgICAgICd0ZWxlZ3JhbWJvdCcsXG4gICAgICAgICdhcHBsZWJvdCcsXG4gICAgICAgICdwaW5nZG9tJyxcbiAgICAgICAgJ3R1bWJsciAnLFxuICAgICAgICAnRW1iZWRseScsXG4gICAgICAgICdzcGJvdCdcbiAgICBdO1xuICAgIHZhciBJU19CT1RfUkVHRVhQID0gbmV3IFJlZ0V4cCgnXi4qKCcgKyBCT1RTLmpvaW4oJ3wnKSArICcpLiokJyk7XG5cbiAgICB2YXIgRGV2aWNlVVVJRCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gb3B0aW9ucyA6IHt9O1xuICAgICAgICB2YXIgZGVmT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHZlcnNpb246IGZhbHNlLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IGZhbHNlLFxuICAgICAgICAgICAgcGxhdGZvcm06IHRydWUsXG4gICAgICAgICAgICBvczogdHJ1ZSxcbiAgICAgICAgICAgIHBpeGVsRGVwdGg6IHRydWUsXG4gICAgICAgICAgICBjb2xvckRlcHRoOiB0cnVlLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogZmFsc2UsXG4gICAgICAgICAgICBpc0F1dGhvcml0YXRpdmU6IHRydWUsXG4gICAgICAgICAgICBzaWxrQWNjZWxlcmF0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpc0tpbmRsZUZpcmU6IHRydWUsXG4gICAgICAgICAgICBpc0Rlc2t0b3A6IHRydWUsXG4gICAgICAgICAgICBpc01vYmlsZTogdHJ1ZSxcbiAgICAgICAgICAgIGlzVGFibGV0OiB0cnVlLFxuICAgICAgICAgICAgaXNXaW5kb3dzOiB0cnVlLFxuICAgICAgICAgICAgaXNMaW51eDogdHJ1ZSxcbiAgICAgICAgICAgIGlzTGludXg2NDogdHJ1ZSxcbiAgICAgICAgICAgIGlzQ2hyb21lT1M6IHRydWUsXG4gICAgICAgICAgICBpc01hYzogdHJ1ZSxcbiAgICAgICAgICAgIGlzaVBhZDogdHJ1ZSxcbiAgICAgICAgICAgIGlzaVBob25lOiB0cnVlLFxuICAgICAgICAgICAgaXNpUG9kOiB0cnVlLFxuICAgICAgICAgICAgaXNBbmRyb2lkOiB0cnVlLFxuICAgICAgICAgICAgaXNTYW1zdW5nOiB0cnVlLFxuICAgICAgICAgICAgaXNTbWFydFRWOiB0cnVlLFxuICAgICAgICAgICAgaXNSYXNwYmVycnk6IHRydWUsXG4gICAgICAgICAgICBpc0JsYWNrYmVycnk6IHRydWUsXG4gICAgICAgICAgICBpc1RvdWNoU2NyZWVuOiB0cnVlLFxuICAgICAgICAgICAgaXNPcGVyYTogZmFsc2UsXG4gICAgICAgICAgICBpc0lFOiBmYWxzZSxcbiAgICAgICAgICAgIGlzRWRnZTogZmFsc2UsXG4gICAgICAgICAgICBpc0lFQ29tcGF0aWJpbGl0eU1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgaXNTYWZhcmk6IGZhbHNlLFxuICAgICAgICAgICAgaXNGaXJlZm94OiBmYWxzZSxcbiAgICAgICAgICAgIGlzV2Via2l0OiBmYWxzZSxcbiAgICAgICAgICAgIGlzQ2hyb21lOiBmYWxzZSxcbiAgICAgICAgICAgIGlzS29ucXVlcm9yOiBmYWxzZSxcbiAgICAgICAgICAgIGlzT21uaVdlYjogZmFsc2UsXG4gICAgICAgICAgICBpc1NlYU1vbmtleTogZmFsc2UsXG4gICAgICAgICAgICBpc0Zsb2NrOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQW1heWE6IGZhbHNlLFxuICAgICAgICAgICAgaXNQaGFudG9tSlM6IGZhbHNlLFxuICAgICAgICAgICAgaXNFcGlwaGFueTogZmFsc2UsXG4gICAgICAgICAgICBzb3VyY2U6IGZhbHNlLFxuICAgICAgICAgICAgY3B1Q29yZXM6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHR5cGVvZiBkZWZPcHRpb25zW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZGVmT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRlZk9wdGlvbnM7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9ICcxLjAuMCc7XG4gICAgICAgIHRoaXMuX1ZlcnNpb25zID0ge1xuICAgICAgICAgICAgRWRnZTogL0VkZ2VcXC8oW1xcZFxcd1xcLlxcLV0rKS9pLFxuICAgICAgICAgICAgRmlyZWZveDogL2ZpcmVmb3hcXC8oW1xcZFxcd1xcLlxcLV0rKS9pLFxuICAgICAgICAgICAgSUU6IC9tc2llXFxzKFtcXGRcXC5dK1tcXGRdKXx0cmlkZW50XFwvXFxkK1xcLlxcZCs7LipbcnY6XSsoXFxkK1xcLlxcZCkvaSxcbiAgICAgICAgICAgIENocm9tZTogL2Nocm9tZVxcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBDaHJvbWl1bTogLyg/OmNocm9taXVtfGNyaW9zKVxcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBTYWZhcmk6IC92ZXJzaW9uXFwvKFtcXGRcXHdcXC5cXC1dKykvaSxcbiAgICAgICAgICAgIE9wZXJhOiAvdmVyc2lvblxcLyhbXFxkXFx3XFwuXFwtXSspfE9QUlxcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBQczM6IC8oW1xcZFxcd1xcLlxcLV0rKVxcKVxccyokL2ksXG4gICAgICAgICAgICBQc3A6IC8oW1xcZFxcd1xcLlxcLV0rKVxcKT9cXHMqJC9pLFxuICAgICAgICAgICAgQW1heWE6IC9hbWF5YVxcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBTZWFNb25rZXk6IC9zZWFtb25rZXlcXC8oW1xcZFxcd1xcLlxcLV0rKS9pLFxuICAgICAgICAgICAgT21uaVdlYjogL29tbml3ZWJcXC92KFtcXGRcXHdcXC5cXC1dKykvaSxcbiAgICAgICAgICAgIEZsb2NrOiAvZmxvY2tcXC8oW1xcZFxcd1xcLlxcLV0rKS9pLFxuICAgICAgICAgICAgRXBpcGhhbnk6IC9lcGlwaGFueVxcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBXaW5KczogL21zYXBwaG9zdFxcLyhbXFxkXFx3XFwuXFwtXSspL2ksXG4gICAgICAgICAgICBQaGFudG9tSlM6IC9waGFudG9tanNcXC8oW1xcZFxcd1xcLlxcLV0rKS9pLFxuICAgICAgICAgICAgVUM6IC9VQ0Jyb3dzZXJcXC8oW1xcZFxcd1xcLl0rKS9pXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX0Jyb3dzZXJzID0ge1xuICAgICAgICAgICAgRWRnZTogL2VkZ2UvaSxcbiAgICAgICAgICAgIEFtYXlhOiAvYW1heWEvaSxcbiAgICAgICAgICAgIEtvbnF1ZXJvcjogL2tvbnF1ZXJvci9pLFxuICAgICAgICAgICAgRXBpcGhhbnk6IC9lcGlwaGFueS9pLFxuICAgICAgICAgICAgU2VhTW9ua2V5OiAvc2VhbW9ua2V5L2ksXG4gICAgICAgICAgICBGbG9jazogL2Zsb2NrL2ksXG4gICAgICAgICAgICBPbW5pV2ViOiAvb21uaXdlYi9pLFxuICAgICAgICAgICAgQ2hyb21pdW06IC9jaHJvbWl1bXxjcmlvcy9pLFxuICAgICAgICAgICAgQ2hyb21lOiAvY2hyb21lL2ksXG4gICAgICAgICAgICBTYWZhcmk6IC9zYWZhcmkvaSxcbiAgICAgICAgICAgIElFOiAvbXNpZXx0cmlkZW50L2ksXG4gICAgICAgICAgICBPcGVyYTogL29wZXJhfE9QUi9pLFxuICAgICAgICAgICAgUFMzOiAvcGxheXN0YXRpb24gMy9pLFxuICAgICAgICAgICAgUFNQOiAvcGxheXN0YXRpb24gcG9ydGFibGUvaSxcbiAgICAgICAgICAgIEZpcmVmb3g6IC9maXJlZm94L2ksXG4gICAgICAgICAgICBXaW5KczogL21zYXBwaG9zdC9pLFxuICAgICAgICAgICAgUGhhbnRvbUpTOiAvcGhhbnRvbWpzL2ksXG4gICAgICAgICAgICBVQzogL1VDQnJvd3Nlci9pXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX09TID0ge1xuICAgICAgICAgICAgV2luZG93czEwOiAvd2luZG93cyBudCAxMFxcLjAvaSxcbiAgICAgICAgICAgIFdpbmRvd3M4MTogL3dpbmRvd3MgbnQgNlxcLjMvaSxcbiAgICAgICAgICAgIFdpbmRvd3M4OiAvd2luZG93cyBudCA2XFwuMi9pLFxuICAgICAgICAgICAgV2luZG93czc6IC93aW5kb3dzIG50IDZcXC4xL2ksXG4gICAgICAgICAgICBVbmtub3duV2luZG93czogL3dpbmRvd3MgbnQgNlxcLlxcZCsvaSxcbiAgICAgICAgICAgIFdpbmRvd3NWaXN0YTogL3dpbmRvd3MgbnQgNlxcLjAvaSxcbiAgICAgICAgICAgIFdpbmRvd3MyMDAzOiAvd2luZG93cyBudCA1XFwuMi9pLFxuICAgICAgICAgICAgV2luZG93c1hQOiAvd2luZG93cyBudCA1XFwuMS9pLFxuICAgICAgICAgICAgV2luZG93czIwMDA6IC93aW5kb3dzIG50IDVcXC4wL2ksXG4gICAgICAgICAgICBXaW5kb3dzUGhvbmU4OiAvd2luZG93cyBwaG9uZSA4XFwuLyxcbiAgICAgICAgICAgIE9TWENoZWV0YWg6IC9vcyB4IDEwWy5fXTAvaSxcbiAgICAgICAgICAgIE9TWFB1bWE6IC9vcyB4IDEwWy5fXTEoXFxEfCQpL2ksXG4gICAgICAgICAgICBPU1hKYWd1YXI6IC9vcyB4IDEwWy5fXTIvaSxcbiAgICAgICAgICAgIE9TWFBhbnRoZXI6IC9vcyB4IDEwWy5fXTMvaSxcbiAgICAgICAgICAgIE9TWFRpZ2VyOiAvb3MgeCAxMFsuX100L2ksXG4gICAgICAgICAgICBPU1hMZW9wYXJkOiAvb3MgeCAxMFsuX101L2ksXG4gICAgICAgICAgICBPU1hTbm93TGVvcGFyZDogL29zIHggMTBbLl9dNi9pLFxuICAgICAgICAgICAgT1NYTGlvbjogL29zIHggMTBbLl9dNy9pLFxuICAgICAgICAgICAgT1NYTW91bnRhaW5MaW9uOiAvb3MgeCAxMFsuX104L2ksXG4gICAgICAgICAgICBPU1hNYXZlcmlja3M6IC9vcyB4IDEwWy5fXTkvaSxcbiAgICAgICAgICAgIE9TWFlvc2VtaXRlOiAvb3MgeCAxMFsuX10xMC9pLFxuICAgICAgICAgICAgT1NYRWxDYXBpdGFuOiAvb3MgeCAxMFsuX10xMS9pLFxuICAgICAgICAgICAgT1NYU2llcnJhOiAvb3MgeCAxMFsuX10xMi9pLFxuICAgICAgICAgICAgTWFjOiAvb3MgeC9pLFxuICAgICAgICAgICAgTGludXg6IC9saW51eC9pLFxuICAgICAgICAgICAgTGludXg2NDogL2xpbnV4IHg4Nl82NC9pLFxuICAgICAgICAgICAgQ2hyb21lT1M6IC9jcm9zL2ksXG4gICAgICAgICAgICBXaWk6IC93aWkvaSxcbiAgICAgICAgICAgIFBTMzogL3BsYXlzdGF0aW9uIDMvaSxcbiAgICAgICAgICAgIFBTUDogL3BsYXlzdGF0aW9uIHBvcnRhYmxlL2ksXG4gICAgICAgICAgICBpUGFkOiAvXFwoaVBhZC4qb3MgKFxcZCspWy5fXShcXGQrKS9pLFxuICAgICAgICAgICAgaVBob25lOiAvXFwoaVBob25lLipvcyAoXFxkKylbLl9dKFxcZCspL2ksXG4gICAgICAgICAgICBCYWRhOiAvQmFkYVxcLyhcXGQrKVxcLihcXGQrKS9pLFxuICAgICAgICAgICAgQ3VybDogL2N1cmxcXC8oXFxkKylcXC4oXFxkKylcXC4oXFxkKykvaVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9QbGF0Zm9ybSA9IHtcbiAgICAgICAgICAgIFdpbmRvd3M6IC93aW5kb3dzIG50L2ksXG4gICAgICAgICAgICBXaW5kb3dzUGhvbmU6IC93aW5kb3dzIHBob25lL2ksXG4gICAgICAgICAgICBNYWM6IC9tYWNpbnRvc2gvaSxcbiAgICAgICAgICAgIExpbnV4OiAvbGludXgvaSxcbiAgICAgICAgICAgIFdpaTogL3dpaS9pLFxuICAgICAgICAgICAgUGxheXN0YXRpb246IC9wbGF5c3RhdGlvbi9pLFxuICAgICAgICAgICAgaVBhZDogL2lwYWQvaSxcbiAgICAgICAgICAgIGlQb2Q6IC9pcG9kL2ksXG4gICAgICAgICAgICBpUGhvbmU6IC9pcGhvbmUvaSxcbiAgICAgICAgICAgIEFuZHJvaWQ6IC9hbmRyb2lkL2ksXG4gICAgICAgICAgICBCbGFja2JlcnJ5OiAvYmxhY2tiZXJyeS9pLFxuICAgICAgICAgICAgU2Ftc3VuZzogL3NhbXN1bmcvaSxcbiAgICAgICAgICAgIEN1cmw6IC9jdXJsL2lcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLkRlZmF1bHRBZ2VudCA9IHtcbiAgICAgICAgICAgIGlzQXV0aG9yaXRhdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGlzTW9iaWxlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzVGFibGV0OiBmYWxzZSxcbiAgICAgICAgICAgIGlzaVBhZDogZmFsc2UsXG4gICAgICAgICAgICBpc2lQb2Q6IGZhbHNlLFxuICAgICAgICAgICAgaXNpUGhvbmU6IGZhbHNlLFxuICAgICAgICAgICAgaXNBbmRyb2lkOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQmxhY2tiZXJyeTogZmFsc2UsXG4gICAgICAgICAgICBpc09wZXJhOiBmYWxzZSxcbiAgICAgICAgICAgIGlzSUU6IGZhbHNlLFxuICAgICAgICAgICAgaXNFZGdlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzSUVDb21wYXRpYmlsaXR5TW9kZTogZmFsc2UsXG4gICAgICAgICAgICBpc1NhZmFyaTogZmFsc2UsXG4gICAgICAgICAgICBpc0ZpcmVmb3g6IGZhbHNlLFxuICAgICAgICAgICAgaXNXZWJraXQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNDaHJvbWU6IGZhbHNlLFxuICAgICAgICAgICAgaXNLb25xdWVyb3I6IGZhbHNlLFxuICAgICAgICAgICAgaXNPbW5pV2ViOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU2VhTW9ua2V5OiBmYWxzZSxcbiAgICAgICAgICAgIGlzRmxvY2s6IGZhbHNlLFxuICAgICAgICAgICAgaXNBbWF5YTogZmFsc2UsXG4gICAgICAgICAgICBpc1BoYW50b21KUzogZmFsc2UsXG4gICAgICAgICAgICBpc0VwaXBoYW55OiBmYWxzZSxcbiAgICAgICAgICAgIGlzRGVza3RvcDogZmFsc2UsXG4gICAgICAgICAgICBpc1dpbmRvd3M6IGZhbHNlLFxuICAgICAgICAgICAgaXNMaW51eDogZmFsc2UsXG4gICAgICAgICAgICBpc0xpbnV4NjQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNNYWM6IGZhbHNlLFxuICAgICAgICAgICAgaXNDaHJvbWVPUzogZmFsc2UsXG4gICAgICAgICAgICBpc0JhZGE6IGZhbHNlLFxuICAgICAgICAgICAgaXNTYW1zdW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGlzUmFzcGJlcnJ5OiBmYWxzZSxcbiAgICAgICAgICAgIGlzQm90OiBmYWxzZSxcbiAgICAgICAgICAgIGlzQ3VybDogZmFsc2UsXG4gICAgICAgICAgICBpc0FuZHJvaWRUYWJsZXQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNXaW5KczogZmFsc2UsXG4gICAgICAgICAgICBpc0tpbmRsZUZpcmU6IGZhbHNlLFxuICAgICAgICAgICAgaXNTaWxrOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQ2FwdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBpc1NtYXJ0VFY6IGZhbHNlLFxuICAgICAgICAgICAgaXNVQzogZmFsc2UsXG4gICAgICAgICAgICBpc1RvdWNoU2NyZWVuOiBmYWxzZSxcbiAgICAgICAgICAgIHNpbGtBY2NlbGVyYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBjb2xvckRlcHRoOiAtMSxcbiAgICAgICAgICAgIHBpeGVsRGVwdGg6IC0xLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogW10sXG4gICAgICAgICAgICBjcHVDb3JlczogLTEsXG4gICAgICAgICAgICBsYW5ndWFnZTogJ3Vua25vd24nLFxuICAgICAgICAgICAgYnJvd3NlcjogJ3Vua25vd24nLFxuICAgICAgICAgICAgdmVyc2lvbjogJ3Vua25vd24nLFxuICAgICAgICAgICAgb3M6ICd1bmtub3duJyxcbiAgICAgICAgICAgIHBsYXRmb3JtOiAndW5rbm93bicsXG4gICAgICAgICAgICBnZW9JcDoge30sXG4gICAgICAgICAgICBzb3VyY2U6ICcnLFxuICAgICAgICAgICAgaGFzaEludDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciBoYXNoID0gMCwgaSwgY2hyLCBsZW47XG4gICAgICAgICAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPT09IDApIHsgcmV0dXJuIGhhc2g7IH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzdHJpbmcubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2hyID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNocjtcbiAgICAgICAgICAgICAgICAgICAgaGFzaCB8PSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzaDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNoTUQ1OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcm90YXRlTGVmdChsVmFsdWUsIGlTaGlmdEJpdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChsVmFsdWUgPDwgaVNoaWZ0Qml0cykgfCAobFZhbHVlID4+PiAoMzIgLSBpU2hpZnRCaXRzKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYWRkVW5zaWduZWQobFgsIGxZKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsWDQsIGxZNCwgbFg4LCBsWTgsIGxSZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIGxYOCA9IChsWCAmIDB4ODAwMDAwMDApO1xuICAgICAgICAgICAgICAgICAgICBsWTggPSAobFkgJiAweDgwMDAwMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgbFg0ID0gKGxYICYgMHg0MDAwMDAwMCk7XG4gICAgICAgICAgICAgICAgICAgIGxZNCA9IChsWSAmIDB4NDAwMDAwMDApO1xuICAgICAgICAgICAgICAgICAgICBsUmVzdWx0ID0gKGxYICYgMHgzRkZGRkZGRikgKyAobFkgJiAweDNGRkZGRkZGKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobFg0ICYgbFk0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGxSZXN1bHQgXiAweDgwMDAwMDAwIF4gbFg4IF4gbFk4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobFg0IHwgbFk0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobFJlc3VsdCAmIDB4NDAwMDAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGxSZXN1bHQgXiAweEMwMDAwMDAwIF4gbFg4IF4gbFk4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChsUmVzdWx0IF4gMHg0MDAwMDAwMCBeIGxYOCBeIGxZOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGxSZXN1bHQgXiBsWDggXiBsWTgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ0YoeCwgeSwgeikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHggJiB5KSB8ICgofngpICYgeik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ0coeCwgeSwgeikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHggJiB6KSB8ICh5ICYgKH56KSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ0goeCwgeSwgeikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHggXiB5IF4geik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ0koeCwgeSwgeikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHkgXiAoeCB8ICh+eikpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnRkYoYSwgYiwgYywgZCwgeCwgcywgYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGFkZFVuc2lnbmVkKGEsIGFkZFVuc2lnbmVkKGFkZFVuc2lnbmVkKGdGKGIsIGMsIGQpLCB4KSwgYWMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFkZFVuc2lnbmVkKHJvdGF0ZUxlZnQoYSwgcyksIGIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdHRyhhLCBiLCBjLCBkLCB4LCBzLCBhYykge1xuICAgICAgICAgICAgICAgICAgICBhID0gYWRkVW5zaWduZWQoYSwgYWRkVW5zaWduZWQoYWRkVW5zaWduZWQoZ0coYiwgYywgZCksIHgpLCBhYykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWRkVW5zaWduZWQocm90YXRlTGVmdChhLCBzKSwgYik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ0hIKGEsIGIsIGMsIGQsIHgsIHMsIGFjKSB7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBhZGRVbnNpZ25lZChhLCBhZGRVbnNpZ25lZChhZGRVbnNpZ25lZChnSChiLCBjLCBkKSwgeCksIGFjKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRVbnNpZ25lZChyb3RhdGVMZWZ0KGEsIHMpLCBiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnSUkoYSwgYiwgYywgZCwgeCwgcywgYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGFkZFVuc2lnbmVkKGEsIGFkZFVuc2lnbmVkKGFkZFVuc2lnbmVkKGdJKGIsIGMsIGQpLCB4KSwgYWMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFkZFVuc2lnbmVkKHJvdGF0ZUxlZnQoYSwgcyksIGIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRUb1dvcmRBcnJheShzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxXb3JkQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsTWVzc2FnZUxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsTnVtYmVyT2ZXb3Jkc1RlbXAxID0gbE1lc3NhZ2VMZW5ndGggKyA4O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbE51bWJlck9mV29yZHNUZW1wMiA9IChsTnVtYmVyT2ZXb3Jkc1RlbXAxIC0gKGxOdW1iZXJPZldvcmRzVGVtcDEgJSA2NCkpIC8gNjQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsTnVtYmVyT2ZXb3JkcyA9IChsTnVtYmVyT2ZXb3Jkc1RlbXAyICsgMSkgKiAxNjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxXb3JkQXJyYXkgPSBuZXcgQXJyYXkobE51bWJlck9mV29yZHMgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxCeXRlUG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbEJ5dGVDb3VudCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGxCeXRlQ291bnQgPCBsTWVzc2FnZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbFdvcmRDb3VudCA9IChsQnl0ZUNvdW50IC0gKGxCeXRlQ291bnQgJSA0KSkgLyA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbEJ5dGVQb3NpdGlvbiA9IChsQnl0ZUNvdW50ICUgNCkgKiA4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbFdvcmRBcnJheVtsV29yZENvdW50XSA9IChsV29yZEFycmF5W2xXb3JkQ291bnRdIHwgKHN0cmluZy5jaGFyQ29kZUF0KGxCeXRlQ291bnQpIDw8IGxCeXRlUG9zaXRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxCeXRlQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxXb3JkQ291bnQgPSAobEJ5dGVDb3VudCAtIChsQnl0ZUNvdW50ICUgNCkpIC8gNDtcbiAgICAgICAgICAgICAgICAgICAgbEJ5dGVQb3NpdGlvbiA9IChsQnl0ZUNvdW50ICUgNCkgKiA4O1xuICAgICAgICAgICAgICAgICAgICBsV29yZEFycmF5W2xXb3JkQ291bnRdID0gbFdvcmRBcnJheVtsV29yZENvdW50XSB8ICgweDgwIDw8IGxCeXRlUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBsV29yZEFycmF5W2xOdW1iZXJPZldvcmRzIC0gMl0gPSBsTWVzc2FnZUxlbmd0aCA8PCAzO1xuICAgICAgICAgICAgICAgICAgICBsV29yZEFycmF5W2xOdW1iZXJPZldvcmRzIC0gMV0gPSBsTWVzc2FnZUxlbmd0aCA+Pj4gMjk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsV29yZEFycmF5O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHdvcmRUb0hleChsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdvcmRUb0hleFZhbHVlID0gJycsIHdvcmRUb0hleFZhbHVlVGVtcCA9ICcnLCBsQnl0ZSwgbENvdW50O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxDb3VudCA9IDA7IGxDb3VudCA8PSAzOyBsQ291bnQrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbEJ5dGUgPSAobFZhbHVlID4+PiAobENvdW50ICogOCkpICYgMjU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgd29yZFRvSGV4VmFsdWVUZW1wID0gJzAnICsgbEJ5dGUudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd29yZFRvSGV4VmFsdWUgPSB3b3JkVG9IZXhWYWx1ZSArIHdvcmRUb0hleFZhbHVlVGVtcC5zdWJzdHIod29yZFRvSGV4VmFsdWVUZW1wLmxlbmd0aCAtIDIsIDIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3b3JkVG9IZXhWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1dGY4RW5jb2RlKHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHV0ZnRleHQgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHN0cmluZy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYyA+IDEyNykgJiYgKGMgPCAyMDQ4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyA+PiA2KSB8IDE5Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgNjMpIHwgMTI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjID4+IDEyKSB8IDIyNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyA+PiA2KSAmIDYzKSB8IDEyOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgNjMpIHwgMTI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRmdGV4dDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgeCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBrLCBBQSwgQkIsIENDLCBERCwgYSwgYiwgYywgZDtcbiAgICAgICAgICAgICAgICB2YXIgUzExID0gNywgUzEyID0gMTIsIFMxMyA9IDE3LCBTMTQgPSAyMjtcbiAgICAgICAgICAgICAgICB2YXIgUzIxID0gNSwgUzIyID0gOSwgUzIzID0gMTQsIFMyNCA9IDIwO1xuICAgICAgICAgICAgICAgIHZhciBTMzEgPSA0LCBTMzIgPSAxMSwgUzMzID0gMTYsIFMzNCA9IDIzO1xuICAgICAgICAgICAgICAgIHZhciBTNDEgPSA2LCBTNDIgPSAxMCwgUzQzID0gMTUsIFM0NCA9IDIxO1xuICAgICAgICAgICAgICAgIHN0cmluZyA9IHV0ZjhFbmNvZGUoc3RyaW5nKTtcbiAgICAgICAgICAgICAgICB4ID0gY29udmVydFRvV29yZEFycmF5KHN0cmluZyk7XG4gICAgICAgICAgICAgICAgYSA9IDB4Njc0NTIzMDE7XG4gICAgICAgICAgICAgICAgYiA9IDB4RUZDREFCODk7XG4gICAgICAgICAgICAgICAgYyA9IDB4OThCQURDRkU7XG4gICAgICAgICAgICAgICAgZCA9IDB4MTAzMjU0NzY7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgeC5sZW5ndGg7IGsgKz0gMTYpIHtcbiAgICAgICAgICAgICAgICAgICAgQUEgPSBhO1xuICAgICAgICAgICAgICAgICAgICBCQiA9IGI7XG4gICAgICAgICAgICAgICAgICAgIENDID0gYztcbiAgICAgICAgICAgICAgICAgICAgREQgPSBkO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0ZGKGEsIGIsIGMsIGQsIHhbayArIDBdLCBTMTEsIDB4RDc2QUE0NzgpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0ZGKGQsIGEsIGIsIGMsIHhbayArIDFdLCBTMTIsIDB4RThDN0I3NTYpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0ZGKGMsIGQsIGEsIGIsIHhbayArIDJdLCBTMTMsIDB4MjQyMDcwREIpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0ZGKGIsIGMsIGQsIGEsIHhbayArIDNdLCBTMTQsIDB4QzFCRENFRUUpO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0ZGKGEsIGIsIGMsIGQsIHhbayArIDRdLCBTMTEsIDB4RjU3QzBGQUYpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0ZGKGQsIGEsIGIsIGMsIHhbayArIDVdLCBTMTIsIDB4NDc4N0M2MkEpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0ZGKGMsIGQsIGEsIGIsIHhbayArIDZdLCBTMTMsIDB4QTgzMDQ2MTMpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0ZGKGIsIGMsIGQsIGEsIHhbayArIDddLCBTMTQsIDB4RkQ0Njk1MDEpO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0ZGKGEsIGIsIGMsIGQsIHhbayArIDhdLCBTMTEsIDB4Njk4MDk4RDgpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0ZGKGQsIGEsIGIsIGMsIHhbayArIDldLCBTMTIsIDB4OEI0NEY3QUYpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0ZGKGMsIGQsIGEsIGIsIHhbayArIDEwXSwgUzEzLCAweEZGRkY1QkIxKTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdGRihiLCBjLCBkLCBhLCB4W2sgKyAxMV0sIFMxNCwgMHg4OTVDRDdCRSk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnRkYoYSwgYiwgYywgZCwgeFtrICsgMTJdLCBTMTEsIDB4NkI5MDExMjIpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0ZGKGQsIGEsIGIsIGMsIHhbayArIDEzXSwgUzEyLCAweEZEOTg3MTkzKTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGdGRihjLCBkLCBhLCBiLCB4W2sgKyAxNF0sIFMxMywgMHhBNjc5NDM4RSk7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnRkYoYiwgYywgZCwgYSwgeFtrICsgMTVdLCBTMTQsIDB4NDlCNDA4MjEpO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0dHKGEsIGIsIGMsIGQsIHhbayArIDFdLCBTMjEsIDB4RjYxRTI1NjIpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0dHKGQsIGEsIGIsIGMsIHhbayArIDZdLCBTMjIsIDB4QzA0MEIzNDApO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0dHKGMsIGQsIGEsIGIsIHhbayArIDExXSwgUzIzLCAweDI2NUU1QTUxKTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdHRyhiLCBjLCBkLCBhLCB4W2sgKyAwXSwgUzI0LCAweEU5QjZDN0FBKTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdHRyhhLCBiLCBjLCBkLCB4W2sgKyA1XSwgUzIxLCAweEQ2MkYxMDVEKTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGdHRyhkLCBhLCBiLCBjLCB4W2sgKyAxMF0sIFMyMiwgMHgyNDQxNDUzKTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGdHRyhjLCBkLCBhLCBiLCB4W2sgKyAxNV0sIFMyMywgMHhEOEExRTY4MSk7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnR0coYiwgYywgZCwgYSwgeFtrICsgNF0sIFMyNCwgMHhFN0QzRkJDOCk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnR0coYSwgYiwgYywgZCwgeFtrICsgOV0sIFMyMSwgMHgyMUUxQ0RFNik7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnR0coZCwgYSwgYiwgYywgeFtrICsgMTRdLCBTMjIsIDB4QzMzNzA3RDYpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0dHKGMsIGQsIGEsIGIsIHhbayArIDNdLCBTMjMsIDB4RjRENTBEODcpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0dHKGIsIGMsIGQsIGEsIHhbayArIDhdLCBTMjQsIDB4NDU1QTE0RUQpO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0dHKGEsIGIsIGMsIGQsIHhbayArIDEzXSwgUzIxLCAweEE5RTNFOTA1KTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGdHRyhkLCBhLCBiLCBjLCB4W2sgKyAyXSwgUzIyLCAweEZDRUZBM0Y4KTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGdHRyhjLCBkLCBhLCBiLCB4W2sgKyA3XSwgUzIzLCAweDY3NkYwMkQ5KTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdHRyhiLCBjLCBkLCBhLCB4W2sgKyAxMl0sIFMyNCwgMHg4RDJBNEM4QSk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnSEgoYSwgYiwgYywgZCwgeFtrICsgNV0sIFMzMSwgMHhGRkZBMzk0Mik7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnSEgoZCwgYSwgYiwgYywgeFtrICsgOF0sIFMzMiwgMHg4NzcxRjY4MSk7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnSEgoYywgZCwgYSwgYiwgeFtrICsgMTFdLCBTMzMsIDB4NkQ5RDYxMjIpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0hIKGIsIGMsIGQsIGEsIHhbayArIDE0XSwgUzM0LCAweEZERTUzODBDKTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdISChhLCBiLCBjLCBkLCB4W2sgKyAxXSwgUzMxLCAweEE0QkVFQTQ0KTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGdISChkLCBhLCBiLCBjLCB4W2sgKyA0XSwgUzMyLCAweDRCREVDRkE5KTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGdISChjLCBkLCBhLCBiLCB4W2sgKyA3XSwgUzMzLCAweEY2QkI0QjYwKTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdISChiLCBjLCBkLCBhLCB4W2sgKyAxMF0sIFMzNCwgMHhCRUJGQkM3MCk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnSEgoYSwgYiwgYywgZCwgeFtrICsgMTNdLCBTMzEsIDB4Mjg5QjdFQzYpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0hIKGQsIGEsIGIsIGMsIHhbayArIDBdLCBTMzIsIDB4RUFBMTI3RkEpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0hIKGMsIGQsIGEsIGIsIHhbayArIDNdLCBTMzMsIDB4RDRFRjMwODUpO1xuICAgICAgICAgICAgICAgICAgICBiID0gZ0hIKGIsIGMsIGQsIGEsIHhbayArIDZdLCBTMzQsIDB4NDg4MUQwNSk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnSEgoYSwgYiwgYywgZCwgeFtrICsgOV0sIFMzMSwgMHhEOUQ0RDAzOSk7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnSEgoZCwgYSwgYiwgYywgeFtrICsgMTJdLCBTMzIsIDB4RTZEQjk5RTUpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0hIKGMsIGQsIGEsIGIsIHhbayArIDE1XSwgUzMzLCAweDFGQTI3Q0Y4KTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdISChiLCBjLCBkLCBhLCB4W2sgKyAyXSwgUzM0LCAweEM0QUM1NjY1KTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdJSShhLCBiLCBjLCBkLCB4W2sgKyAwXSwgUzQxLCAweEY0MjkyMjQ0KTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGdJSShkLCBhLCBiLCBjLCB4W2sgKyA3XSwgUzQyLCAweDQzMkFGRjk3KTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGdJSShjLCBkLCBhLCBiLCB4W2sgKyAxNF0sIFM0MywgMHhBQjk0MjNBNyk7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnSUkoYiwgYywgZCwgYSwgeFtrICsgNV0sIFM0NCwgMHhGQzkzQTAzOSk7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBnSUkoYSwgYiwgYywgZCwgeFtrICsgMTJdLCBTNDEsIDB4NjU1QjU5QzMpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0lJKGQsIGEsIGIsIGMsIHhbayArIDNdLCBTNDIsIDB4OEYwQ0NDOTIpO1xuICAgICAgICAgICAgICAgICAgICBjID0gZ0lJKGMsIGQsIGEsIGIsIHhbayArIDEwXSwgUzQzLCAweEZGRUZGNDdEKTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdJSShiLCBjLCBkLCBhLCB4W2sgKyAxXSwgUzQ0LCAweDg1ODQ1REQxKTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGdJSShhLCBiLCBjLCBkLCB4W2sgKyA4XSwgUzQxLCAweDZGQTg3RTRGKTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGdJSShkLCBhLCBiLCBjLCB4W2sgKyAxNV0sIFM0MiwgMHhGRTJDRTZFMCk7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBnSUkoYywgZCwgYSwgYiwgeFtrICsgNl0sIFM0MywgMHhBMzAxNDMxNCk7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBnSUkoYiwgYywgZCwgYSwgeFtrICsgMTNdLCBTNDQsIDB4NEUwODExQTEpO1xuICAgICAgICAgICAgICAgICAgICBhID0gZ0lJKGEsIGIsIGMsIGQsIHhbayArIDRdLCBTNDEsIDB4Rjc1MzdFODIpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZ0lJKGQsIGEsIGIsIGMsIHhbayArIDExXSwgUzQyLCAweEJEM0FGMjM1KTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGdJSShjLCBkLCBhLCBiLCB4W2sgKyAyXSwgUzQzLCAweDJBRDdEMkJCKTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGdJSShiLCBjLCBkLCBhLCB4W2sgKyA5XSwgUzQ0LCAweEVCODZEMzkxKTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGFkZFVuc2lnbmVkKGEsIEFBKTtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGFkZFVuc2lnbmVkKGIsIEJCKTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGFkZFVuc2lnbmVkKGMsIENDKTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGFkZFVuc2lnbmVkKGQsIEREKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRlbXAgPSB3b3JkVG9IZXgoYSkgKyB3b3JkVG9IZXgoYikgKyB3b3JkVG9IZXgoYykgKyB3b3JkVG9IZXgoZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlbXAudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLkFnZW50ID0ge307XG5cbiAgICAgICAgdGhpcy5nZXRCcm93c2VyID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5FZGdlLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0VkZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0VkZ2UnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuUGhhbnRvbUpTLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc1BoYW50b21KUyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnUGhhbnRvbUpTJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLktvbnF1ZXJvci50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNLb25xdWVyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0tvbnF1ZXJvcic7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5BbWF5YS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNBbWF5YSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQW1heWEnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuRXBpcGhhbnkudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzRXBpcGhhbnkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0VwaXBoYW55JztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLlNlYU1vbmtleS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNTZWFNb25rZXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1NlYU1vbmtleSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5GbG9jay50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNGbG9jayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnRmxvY2snO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuT21uaVdlYi50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNPbW5pV2ViID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPbW5pV2ViJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLk9wZXJhLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc09wZXJhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPcGVyYSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5DaHJvbWl1bS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNDaHJvbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0Nocm9taXVtJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLkNocm9tZS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNDaHJvbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0Nocm9tZSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5TYWZhcmkudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzU2FmYXJpID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdTYWZhcmknO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuV2luSnMudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzV2luSnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpbkpzJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX0Jyb3dzZXJzLklFLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0lFID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdJRSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5QUzMudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3BzMyc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5QU1AudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3BzcCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9Ccm93c2Vycy5GaXJlZm94LnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0ZpcmVmb3ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0ZpcmVmb3gnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fQnJvd3NlcnMuVUMudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzVUMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1VDQnJvd3Nlcic7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIFVBIGRvZXMgbm90IHN0YXJ0IHdpdGggTW96aWxsYSBndWVzcyB0aGUgdXNlciBhZ2VudC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZy5pbmRleE9mKCdNb3ppbGxhJykgIT09IDAgJiYgL14oW1xcZFxcd1xcLVxcLl0rKVxcL1tcXGRcXHdcXC5cXC1dKy9pLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0F1dGhvcml0YXRpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd1bmtub3duJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldEJyb3dzZXJWZXJzaW9uID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgdmFyIHJlZ2V4O1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLkFnZW50LmJyb3dzZXIpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdFZGdlJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLkVkZ2UudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1BoYW50b21KUyc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5QaGFudG9tSlMudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Nocm9tZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5DaHJvbWUudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Nocm9taXVtJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLkNocm9taXVtLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdTYWZhcmknOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fVmVyc2lvbnMuU2FmYXJpLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdPcGVyYSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5PcGVyYS50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDEgPyBSZWdFeHAuJDEgOiBSZWdFeHAuJDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnRmlyZWZveCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5GaXJlZm94LnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdXaW5Kcyc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5XaW5Kcy50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnSUUnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fVmVyc2lvbnMuSUUudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQyID8gUmVnRXhwLiQyIDogUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3BzMyc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5QczMudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3BzcCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5Qc3AudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0FtYXlhJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLkFtYXlhLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdFcGlwaGFueSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9WZXJzaW9ucy5FcGlwaGFueS50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnU2VhTW9ua2V5JzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLlNlYU1vbmtleS50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnRmxvY2snOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fVmVyc2lvbnMuRmxvY2sudGVzdChzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ09tbmlXZWInOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fVmVyc2lvbnMuT21uaVdlYi50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnVUNCcm93c2VyJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX1ZlcnNpb25zLlVDLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5BZ2VudC5icm93c2VyICE9PSAndW5rbm93bicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCh0aGlzLkFnZW50LmJyb3dzZXIgKyAnW1xcXFwvIF0oW1xcXFxkXFxcXHdcXFxcLlxcXFwtXSspJywgJ2knKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWdleC50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5nZXRPUyA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuV2luZG93c1Zpc3RhLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc1dpbmRvd3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpbmRvd3MgVmlzdGEnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuV2luZG93czcudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzV2luZG93cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2luZG93cyA3JztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLldpbmRvd3M4LnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc1dpbmRvd3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpbmRvd3MgOCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5XaW5kb3dzODEudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzV2luZG93cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2luZG93cyA4LjEnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuV2luZG93czEwLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc1dpbmRvd3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpbmRvd3MgMTAuMCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5XaW5kb3dzMjAwMy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNXaW5kb3dzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdXaW5kb3dzIDIwMDMnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuV2luZG93c1hQLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc1dpbmRvd3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpbmRvd3MgWFAnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuV2luZG93czIwMDAudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzV2luZG93cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2luZG93cyAyMDAwJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLldpbmRvd3NQaG9uZTgudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpbmRvd3MgUGhvbmUgOCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5MaW51eDY0LnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0xpbnV4ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0xpbnV4NjQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0xpbnV4IDY0JztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLkxpbnV4LnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0xpbnV4ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdMaW51eCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5DaHJvbWVPUy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNDaHJvbWVPUyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ2hyb21lIE9TJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLldpaS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnV2lpJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLlBTMy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnUGxheXN0YXRpb24nO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuUFNQLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdQbGF5c3RhdGlvbic7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5PU1hDaGVldGFoLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCBDaGVldGFoJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLk9TWFB1bWEudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTWFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPUyBYIFB1bWEnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuT1NYSmFndWFyLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCBKYWd1YXInO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuT1NYUGFudGhlci50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNNYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09TIFggUGFudGhlcic7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5PU1hUaWdlci50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNNYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09TIFggVGlnZXInO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuT1NYTGVvcGFyZC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNNYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09TIFggTGVvcGFyZCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5PU1hTbm93TGVvcGFyZC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNNYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09TIFggU25vdyBMZW9wYXJkJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLk9TWExpb24udGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTWFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPUyBYIExpb24nO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuT1NYTW91bnRhaW5MaW9uLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCBNb3VudGFpbiBMaW9uJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLk9TWE1hdmVyaWNrcy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNNYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09TIFggTWF2ZXJpY2tzJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLk9TWFlvc2VtaXRlLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnT1MgWCBZb3NlbWl0ZSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5PU1hFbENhcGl0YW4udGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzTWFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPUyBYIEVsIENhcGl0YW4nO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuT1NYU2llcnJhLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbWFjT1MgU2llcnJhJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLk1hYy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNNYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ09TIFgnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuaVBhZC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNpUGFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaCh0aGlzLl9PUy5pUGFkKVswXS5yZXBsYWNlKCdfJywgJy4nKTtcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX09TLmlQaG9uZS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNpUGhvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHRoaXMuX09TLmlQaG9uZSlbMF0ucmVwbGFjZSgnXycsICcuJyk7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9PUy5CYWRhLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0JhZGEgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0JhZGEnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fT1MuQ3VybC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNDdXJsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdDdXJsJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3Vua25vd24nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZ2V0UGxhdGZvcm0gPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX1BsYXRmb3JtLldpbmRvd3MudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ01pY3Jvc29mdCBXaW5kb3dzJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX1BsYXRmb3JtLldpbmRvd3NQaG9uZS50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNXaW5kb3dzUGhvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ01pY3Jvc29mdCBXaW5kb3dzIFBob25lJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX1BsYXRmb3JtLk1hYy50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQXBwbGUgTWFjJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX1BsYXRmb3JtLkN1cmwudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0N1cmwnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uQW5kcm9pZC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNBbmRyb2lkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdBbmRyb2lkJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX1BsYXRmb3JtLkJsYWNrYmVycnkudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzQmxhY2tiZXJyeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQmxhY2tiZXJyeSc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9QbGF0Zm9ybS5MaW51eC50ZXN0KHN0cmluZyk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnTGludXgnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uV2lpLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdXaWknO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uUGxheXN0YXRpb24udGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1BsYXlzdGF0aW9uJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX1BsYXRmb3JtLmlQYWQudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzaVBhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaVBhZCc7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl9QbGF0Zm9ybS5pUG9kLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc2lQb2QgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2lQb2QnO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fUGxhdGZvcm0uaVBob25lLnRlc3Qoc3RyaW5nKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc2lQaG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaVBob25lJztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX1BsYXRmb3JtLlNhbXN1bmcudGVzdChzdHJpbmcpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzaVNhbXN1bmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1NhbXN1bmcnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndW5rbm93bic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0Q29tcGF0aWJpbGl0eU1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHRoaXMuQWdlbnQuaXNJRSkge1xuICAgICAgICAgICAgICAgIGlmICgvVHJpZGVudFxcLyhcXGQpXFwuMC9pLnRlc3QodWEuQWdlbnQuc291cmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJpZGVudFZlcnNpb24gPSBwYXJzZUludChSZWdFeHAuJDEsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnNpb24gPSBwYXJzZUludCh1YS5BZ2VudC52ZXJzaW9uLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uID09PSA3ICYmIHRyaWRlbnRWZXJzaW9uID09PSA3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc0lFQ29tcGF0aWJpbGl0eU1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQudmVyc2lvbiA9IDExLjA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gNyAmJiB0cmlkZW50VmVyc2lvbiA9PT0gNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNJRUNvbXBhdGliaWxpdHlNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LnZlcnNpb24gPSAxMC4wO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnNpb24gPT09IDcgJiYgdHJpZGVudFZlcnNpb24gPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzSUVDb21wYXRpYmlsaXR5TW9kZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC52ZXJzaW9uID0gOS4wO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnNpb24gPT09IDcgJiYgdHJpZGVudFZlcnNpb24gPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzSUVDb21wYXRpYmlsaXR5TW9kZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC52ZXJzaW9uID0gOC4wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudGVzdFNpbGsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBuZXcgUmVnRXhwKCdzaWxrJywgJ2dpJykudGVzdCh1YS5BZ2VudC5zb3VyY2UpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzU2lsayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgvU2lsay1BY2NlbGVyYXRlZD10cnVlL2dpLnRlc3QodWEuQWdlbnQuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuU2lsa0FjY2VsZXJhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLkFnZW50LmlzU2lsayA/ICdTaWxrJyA6IGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudGVzdEtpbmRsZUZpcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvS0ZPVC9naS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNLaW5kbGVGaXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdLaW5kbGUgRmlyZSc7XG4gICAgICAgICAgICAgICAgY2FzZSAvS0ZUVC9naS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNLaW5kbGVGaXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdLaW5kbGUgRmlyZSBIRCc7XG4gICAgICAgICAgICAgICAgY2FzZSAvS0ZKV0kvZ2kudGVzdCh1YS5BZ2VudC5zb3VyY2UpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzS2luZGxlRmlyZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnS2luZGxlIEZpcmUgSEQgOC45JztcbiAgICAgICAgICAgICAgICBjYXNlIC9LRkpXQS9naS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNLaW5kbGVGaXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdLaW5kbGUgRmlyZSBIRCA4LjkgNEcnO1xuICAgICAgICAgICAgICAgIGNhc2UgL0tGU09XSS9naS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNLaW5kbGVGaXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdLaW5kbGUgRmlyZSBIRCA3JztcbiAgICAgICAgICAgICAgICBjYXNlIC9LRlRIV0kvZ2kudGVzdCh1YS5BZ2VudC5zb3VyY2UpOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFnZW50LmlzS2luZGxlRmlyZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnS2luZGxlIEZpcmUgSERYIDcnO1xuICAgICAgICAgICAgICAgIGNhc2UgL0tGVEhXQS9naS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNLaW5kbGVGaXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdLaW5kbGUgRmlyZSBIRFggNyA0Ryc7XG4gICAgICAgICAgICAgICAgY2FzZSAvS0ZBUFdJL2dpLnRlc3QodWEuQWdlbnQuc291cmNlKTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BZ2VudC5pc0tpbmRsZUZpcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0tpbmRsZSBGaXJlIEhEWCA4LjknO1xuICAgICAgICAgICAgICAgIGNhc2UgL0tGQVBXQS9naS50ZXN0KHVhLkFnZW50LnNvdXJjZSk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQWdlbnQuaXNLaW5kbGVGaXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdLaW5kbGUgRmlyZSBIRFggOC45IDRHJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0Q2FwdGl2ZU5ldHdvcmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvQ2FwdGl2ZU5ldHdvcmsvZ2kudGVzdCh1YS5BZ2VudC5zb3VyY2UpOlxuICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc0NhcHRpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc01hYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LnBsYXRmb3JtID0gJ0FwcGxlIE1hYyc7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ2FwdGl2ZU5ldHdvcmsnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRlc3RNb2JpbGUgPSBmdW5jdGlvbiB0ZXN0TW9iaWxlKCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNXaW5kb3dzOlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNMaW51eDpcbiAgICAgICAgICAgICAgICBjYXNlIHVhLkFnZW50LmlzTWFjOlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNDaHJvbWVPUzpcbiAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNEZXNrdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc0FuZHJvaWQ6XG4gICAgICAgICAgICAgICAgY2FzZSB1YS5BZ2VudC5pc1NhbXN1bmc6XG4gICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzTW9iaWxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNEZXNrdG9wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHVhLkFnZW50LmlzaVBhZDpcbiAgICAgICAgICAgICAgICBjYXNlIHVhLkFnZW50LmlzaVBvZDpcbiAgICAgICAgICAgICAgICBjYXNlIHVhLkFnZW50LmlzaVBob25lOlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNCYWRhOlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNCbGFja2JlcnJ5OlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNBbmRyb2lkOlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNXaW5kb3dzUGhvbmU6XG4gICAgICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzTW9iaWxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNEZXNrdG9wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoL21vYmlsZS9pLnRlc3QodWEuQWdlbnQuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzTW9iaWxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc0Rlc2t0b3AgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRlc3RUYWJsZXQgPSBmdW5jdGlvbiB0ZXN0VGFibGV0KCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNpUGFkOlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNBbmRyb2lkVGFibGV0OlxuICAgICAgICAgICAgICAgIGNhc2UgdWEuQWdlbnQuaXNLaW5kbGVGaXJlOlxuICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc1RhYmxldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKC90YWJsZXQvaS50ZXN0KHVhLkFnZW50LnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc1RhYmxldCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0TmdpbnhHZW9JUCA9IGZ1bmN0aW9uIHRlc3ROZ2lueEdlb0lQKGhlYWRlcnMpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoL15HRU9JUC9pLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB1YS5BZ2VudC5nZW9JcFtrZXldID0gaGVhZGVyc1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudGVzdEJvdCA9IGZ1bmN0aW9uIHRlc3RCb3QoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGlzQm90ID0gSVNfQk9UX1JFR0VYUC5leGVjKHVhLkFnZW50LnNvdXJjZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIGlmIChpc0JvdCkge1xuICAgICAgICAgICAgICAgIHVhLkFnZW50LmlzQm90ID0gaXNCb3RbMV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF1YS5BZ2VudC5pc0F1dGhvcml0YXRpdmUpIHtcbiAgICAgICAgICAgICAgICAvLyBUZXN0IHVuYXV0aG9yaXRhdGl2ZSBwYXJzZSBmb3IgYGJvdGAgaW4gVUEgdG8gZmxhZyBmb3IgYm90XG4gICAgICAgICAgICAgICAgdWEuQWdlbnQuaXNCb3QgPSAvYm90L2kudGVzdCh1YS5BZ2VudC5zb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudGVzdFNtYXJ0VFYgPSBmdW5jdGlvbiB0ZXN0Qm90KCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIHZhciBpc1NtYXJ0VFYgPSBuZXcgUmVnRXhwKCdzbWFydC10dnxzbWFydHR2fGdvb2dsZXR2fGFwcGxldHZ8aGJidHZ8cG92X3R2fG5ldGNhc3QudHYnLCAnZ2knKS5leGVjKHVhLkFnZW50LnNvdXJjZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIGlmIChpc1NtYXJ0VFYpIHtcbiAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc1NtYXJ0VFYgPSBpc1NtYXJ0VFZbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0QW5kcm9pZFRhYmxldCA9IGZ1bmN0aW9uIHRlc3RBbmRyb2lkVGFibGV0KCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIGlmICh1YS5BZ2VudC5pc0FuZHJvaWQgJiYgIS9tb2JpbGUvaS50ZXN0KHVhLkFnZW50LnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICB1YS5BZ2VudC5pc0FuZHJvaWRUYWJsZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudGVzdFRvdWNoU3VwcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICB1YS5BZ2VudC5pc1RvdWNoU2NyZWVuID0gKCgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHx8IChuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKSB8fCAobmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5nZXRMYWd1YWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIHVhLkFnZW50Lmxhbmd1YWdlID0gKG5hdmlnYXRvci5sYW5ndWFnZSB8fCBuYXZpZ2F0b3IudXNlckxhbmd1YWdlIHx8IG5hdmlnYXRvci5icm93c2VyTGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnN5c3RlbUxhbmd1YWdlIHx8ICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZ2V0Q29sb3JEZXB0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICB1YS5BZ2VudC5jb2xvckRlcHRoID0gc2NyZWVuLmNvbG9yRGVwdGggfHwgLTE7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5nZXRTY3JlZW5SZXNvbHV0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIHVhLkFnZW50LnJlc29sdXRpb24gPSBbc2NyZWVuLmF2YWlsV2lkdGgsIHNjcmVlbi5hdmFpbEhlaWdodF07XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5nZXRQaXhlbERlcHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVhID0gdGhpcztcbiAgICAgICAgICAgIHVhLkFnZW50LnBpeGVsRGVwdGggPSBzY3JlZW4ucGl4ZWxEZXB0aCB8fCAtMTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldENQVSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICB1YS5BZ2VudC5jcHVDb3JlcyA9IG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5IHx8IC0xO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHRoaXM7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdWEuRGVmYXVsdEFnZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHVhLkRlZmF1bHRBZ2VudC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHVhLkFnZW50W2tleV0gPSB1YS5EZWZhdWx0QWdlbnRba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdWE7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wYXJzZSA9IGZ1bmN0aW9uIGdldChzb3VyY2UpIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZSB8fCBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICAgICAgdmFyIHVhID0gbmV3IERldmljZVVVSUQoKTtcbiAgICAgICAgICAgIHVhLkFnZW50LnNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICAgICAgICAgIHVhLkFnZW50Lm9zID0gdWEuZ2V0T1ModWEuQWdlbnQuc291cmNlKTtcbiAgICAgICAgICAgIHVhLkFnZW50LnBsYXRmb3JtID0gdWEuZ2V0UGxhdGZvcm0odWEuQWdlbnQuc291cmNlKTtcbiAgICAgICAgICAgIHVhLkFnZW50LmJyb3dzZXIgPSB1YS5nZXRCcm93c2VyKHVhLkFnZW50LnNvdXJjZSk7XG4gICAgICAgICAgICB1YS5BZ2VudC52ZXJzaW9uID0gdWEuZ2V0QnJvd3NlclZlcnNpb24odWEuQWdlbnQuc291cmNlKTtcbiAgICAgICAgICAgIHVhLnRlc3RCb3QoKTtcbiAgICAgICAgICAgIHVhLnRlc3RTbWFydFRWKCk7XG4gICAgICAgICAgICB1YS50ZXN0TW9iaWxlKCk7XG4gICAgICAgICAgICB1YS50ZXN0QW5kcm9pZFRhYmxldCgpO1xuICAgICAgICAgICAgdWEudGVzdFRhYmxldCgpO1xuICAgICAgICAgICAgdWEudGVzdENvbXBhdGliaWxpdHlNb2RlKCk7XG4gICAgICAgICAgICB1YS50ZXN0U2lsaygpO1xuICAgICAgICAgICAgdWEudGVzdEtpbmRsZUZpcmUoKTtcbiAgICAgICAgICAgIHVhLnRlc3RDYXB0aXZlTmV0d29yaygpO1xuICAgICAgICAgICAgdWEudGVzdFRvdWNoU3VwcG9ydCgpO1xuICAgICAgICAgICAgdWEuZ2V0TGFndWFnZSgpO1xuICAgICAgICAgICAgdWEuZ2V0Q29sb3JEZXB0aCgpO1xuICAgICAgICAgICAgdWEuZ2V0UGl4ZWxEZXB0aCgpO1xuICAgICAgICAgICAgdWEuZ2V0U2NyZWVuUmVzb2x1dGlvbigpO1xuICAgICAgICAgICAgdWEuZ2V0Q1BVKCk7XG4gICAgICAgICAgICByZXR1cm4gdWEuQWdlbnQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5nZXQgPSBmdW5jdGlvbiAoY3VzdG9tRGF0YSkge1xuICAgICAgICAgICAgdmFyIHByZWYgPSAnYScsIGR1ID0gdGhpcy5wYXJzZSgpO1xuICAgICAgICAgICAgdmFyIGR1YSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMub3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiB0aGlzLm9wdGlvbnNba2V5XSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBkdWEucHVzaChkdVtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VzdG9tRGF0YSkge1xuICAgICAgICAgICAgICAgIGR1YS5wdXNoKGN1c3RvbURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucmVzb2x1dGlvbiAmJiBkdS5pc01vYmlsZSkge1xuICAgICAgICAgICAgICAgIGR1YS5wdXNoKGR1LnJlc29sdXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gOCwgOSwgYSwgYlxuICAgICAgICAgICAgcHJlZiA9ICdiJztcbiAgICAgICAgICAgIHZhciB0bXBVdWlkID0gZHUuaGFzaE1ENShkdWEuam9pbignOicpKTtcbiAgICAgICAgICAgIHZhciB1dWlkID0gW1xuICAgICAgICAgICAgICAgIHRtcFV1aWQuc2xpY2UoMCw4KSxcbiAgICAgICAgICAgICAgICB0bXBVdWlkLnNsaWNlKDgsMTIpLFxuICAgICAgICAgICAgICAgICc0JyArIHRtcFV1aWQuc2xpY2UoMTIsMTUpLFxuICAgICAgICAgICAgICAgIHByZWYgKyB0bXBVdWlkLnNsaWNlKDE1LDE4KSxcbiAgICAgICAgICAgICAgICB0bXBVdWlkLnNsaWNlKDIwKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHJldHVybiB1dWlkLmpvaW4oJy0nKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLkFnZW50ID0gdGhpcy5EZWZhdWx0QWdlbnQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBleHBvcnRzLkRldmljZVVVSUQgPSBEZXZpY2VVVUlEO1xuICAgIHJldHVybiBuZXcgRGV2aWNlVVVJRChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxufSkodGhpcyk7XG4iLCJcclxubGV0IGRldmljZTtcclxuXHJcbmlmKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnKXtcclxuXHRkZXZpY2UgPSAnbm9kZWpzX2VudidcclxufSBlbHNlIHtcclxuXHRjb25zdCB7RGV2aWNlVVVJRH0gPSByZXF1aXJlKCdkZXZpY2UtdXVpZCcpO1xyXG5cclxuXHRjb25zdCBkdSA9IG5ldyBEZXZpY2VVVUlEKCkucGFyc2UoKTtcclxuXHRjb25zdCBkdWEgPSBbXHJcblx0XHRkdS5sYW5ndWFnZSxcclxuXHRcdGR1LnBsYXRmb3JtLFxyXG5cdFx0ZHUub3MsXHJcblx0XHRkdS5jcHVDb3JlcyxcclxuXHRcdGR1LmNvbG9yRGVwdGgsXHJcblx0XTtcclxuXHRkZXZpY2UgPSBkdS5oYXNoTUQ1KGR1YS5qb2luKCc6JykpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZXZpY2U7IiwiZXhwb3J0IGNvbnN0IEJMT0NLQ0hBSU5fU1VQUE9SVCA9ICdibG9ja2NoYWluX3N1cHBvcnQnO1xyXG5leHBvcnQgY29uc3QgV0FMTEVUX1NVUFBPUlQgPSAnd2FsbGV0X3N1cHBvcnQnOyIsImltcG9ydCAqIGFzIFBsdWdpblR5cGVzIGZyb20gJy4vUGx1Z2luVHlwZXMnO1xyXG5cclxuLyoqKlxyXG4gKiBTZXR0aW5nIHVwIGZvciBwbHVnaW4gYmFzZWQgZ2VuZXJhdG9ycyxcclxuICogdGhpcyB3aWxsIGFkZCBtb3JlIGJsb2NrY2hhaW4gY29tcGF0aWJpbGl0eSBpbiB0aGUgZnV0dXJlLlxyXG4gKi9cclxuXHJcbmNsYXNzIFBsdWdpblJlcG9zaXRvcnlTaW5nbGV0b24ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZFBsdWdpbihwbHVnaW4pe1xyXG5cdFx0aWYoIXRoaXMucGx1Z2luKHBsdWdpbi5uYW1lKSlcclxuXHRcdFx0dGhpcy5wbHVnaW5zLnB1c2gocGx1Z2luKTtcclxuXHR9XHJcblxyXG4gICAgd2FsbGV0cygpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbnMuZmlsdGVyKHBsdWdpbiA9PiBwbHVnaW4udHlwZSA9PT0gUGx1Z2luVHlwZXMuV0FMTEVUX1NVUFBPUlQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNpZ25hdHVyZVByb3ZpZGVycygpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbnMuZmlsdGVyKHBsdWdpbiA9PiBwbHVnaW4udHlwZSA9PT0gUGx1Z2luVHlwZXMuQkxPQ0tDSEFJTl9TVVBQT1JUKTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBwb3J0ZWRCbG9ja2NoYWlucygpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25hdHVyZVByb3ZpZGVycygpLm1hcChwbHVnaW4gPT4gbmFtZSlcclxuICAgIH1cclxuXHJcbiAgICBwbHVnaW4obmFtZSl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2lucy5maW5kKHBsdWdpbiA9PiBwbHVnaW4ubmFtZSA9PT0gbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZW5kb3JzZWROZXR3b3Jrcygpe1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLnNpZ25hdHVyZVByb3ZpZGVycygpLm1hcChhc3luYyBwbHVnaW4gPT4gYXdhaXQgcGx1Z2luLmdldEVuZG9yc2VkTmV0d29yaygpKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IFBsdWdpblJlcG9zaXRvcnkgPSBuZXcgUGx1Z2luUmVwb3NpdG9yeVNpbmdsZXRvbigpO1xyXG5leHBvcnQgZGVmYXVsdCBQbHVnaW5SZXBvc2l0b3J5OyIsImxldCBzdG9yYWdlID0ge307XHJcbmNvbnN0IGdldFdpbmRvdyA9ICgpID0+IHtcclxuICAgIGlmKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gd2luZG93O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2U6e1xyXG4gICAgICAgICAgICBzZXRJdGVtOihrZXksIHZhbCkgPT4gc3RvcmFnZVtrZXldID0gdmFsLFxyXG4gICAgICAgICAgICBnZXRJdGVtOihrZXkpID0+IHN0b3JhZ2Vba2V5XSB8fCBudWxsLFxyXG4gICAgICAgICAgICByZW1vdmVJdGVtOihrZXkpID0+IGRlbGV0ZSBzdG9yYWdlW2tleV1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3JhZ2VTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe31cclxuXHJcbiAgICBzdGF0aWMgc2V0QXBwS2V5KGFwcGtleSl7XHJcbiAgICAgICAgZ2V0V2luZG93KCkubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FwcGtleScsIGFwcGtleSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRpYyBnZXRBcHBLZXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldFdpbmRvdygpLmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhcHBrZXknKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVtb3ZlQXBwS2V5KCkge1xyXG4gICAgICAgIHJldHVybiBnZXRXaW5kb3coKS5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnYXBwa2V5Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNldE5vbmNlKG5vbmNlKXtcclxuICAgICAgICBnZXRXaW5kb3coKS5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbm9uY2UnLCBub25jZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRpYyBnZXROb25jZSgpIHtcclxuICAgICAgICByZXR1cm4gZ2V0V2luZG93KCkubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25vbmNlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJlbW92ZU5vbmNlKCkge1xyXG4gICAgICAgIHJldHVybiBnZXRXaW5kb3coKS5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnbm9uY2UnKTtcclxuICAgIH1cclxufSIsImltcG9ydCBTdG9yYWdlU2VydmljZSBmcm9tICcuL1N0b3JhZ2VTZXJ2aWNlJ1xyXG5pbXBvcnQgZ2V0UmFuZG9tVmFsdWVzIGZyb20gJ2dldC1yYW5kb20tdmFsdWVzJztcclxuaW1wb3J0IGNyZWF0ZUhhc2ggZnJvbSAnY3JlYXRlLWhhc2gnO1xyXG5pbXBvcnQgV2ViU29ja2V0IGZyb20gJ2lzb21vcnBoaWMtd3MnO1xyXG5pbXBvcnQgZGV2aWNlIGZyb20gXCIuLi91dGlsL0RldmljZVwiO1xyXG5cclxuY29uc3Qgc3VmZml4ID0gJy9zb2NrZXQuaW8vP0VJTz0zJnRyYW5zcG9ydD13ZWJzb2NrZXQnO1xyXG5cclxuXHJcbmNvbnN0IHNoYTI1NiA9IGRhdGEgPT4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGRhdGEpLmRpZ2VzdCgnaGV4Jyk7XHJcblxyXG5jb25zdCByYW5kb20gPSAoKSA9PiB7XHJcbiAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50OEFycmF5KDI0KTtcclxuICAgIGdldFJhbmRvbVZhbHVlcyhhcnJheSk7XHJcbiAgICByZXR1cm4gYXJyYXkuam9pbignJyk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTb2NrZXRTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihfcGx1Z2luLCBfdGltZW91dCl7XHJcblx0ICAgIHRoaXMucGx1Z2luID0gX3BsdWdpbjtcclxuXHQgICAgdGhpcy50aW1lb3V0ID0gX3RpbWVvdXQ7XHJcblxyXG4gICAgICAgIHRoaXMudXVpZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wYWlyZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9wZW5SZXF1ZXN0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMucGFpcmluZ1Byb21pc2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IHt9O1xyXG5cclxuXHQgICAgdGhpcy5hcHBrZXkgPSBTdG9yYWdlU2VydmljZS5nZXRBcHBLZXkoKTtcclxuXHQgICAgaWYoIXRoaXMuYXBwa2V5KSB0aGlzLmFwcGtleSA9ICdhcHBrZXk6JytyYW5kb20oKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRFdmVudEhhbmRsZXIoaGFuZGxlciwga2V5KXtcclxuICAgICAgICBpZigha2V5KSBrZXkgPSAnYXBwJztcclxuXHQgICAgdGhpcy5ldmVudEhhbmRsZXJzW2tleV0gPSBoYW5kbGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUV2ZW50SGFuZGxlcihrZXkpe1xyXG5cdCAgICBpZigha2V5KSBrZXkgPSAnYXBwJztcclxuXHQgICAgZGVsZXRlIHRoaXMuZXZlbnRIYW5kbGVyc1trZXldO1xyXG4gICAgfVxyXG5cclxuICAgIGxpbmsoYWxsb3dIdHRwID0gdHJ1ZSwgX3V1aWQgPSBudWxsLCBzb2NrZXRIb3N0ID0gbnVsbCl7XHJcblx0ICAgIHRoaXMudXVpZCA9IF91dWlkO1xyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtcclxuICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmNvbm5lY3RlZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5zb2NrZXQpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB0aGlzLnRpbWVvdXQpKSxcclxuICAgICAgICAgICAgbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNldHVwU29ja2V0ID0gKCkgPT4ge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSBtc2cgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kc2hha2luZy9VcGdyYWRpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYobXNnLmRhdGEuaW5kZXhPZignNDIvc2NhdHRlcicpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlYWwgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbdHlwZSwgZGF0YV0gPSBKU09OLnBhcnNlKG1zZy5kYXRhLnJlcGxhY2UoJzQyL3NjYXR0ZXIsJywgJycpKTtcclxuXHJcblx0XHQgICAgICAgICAgICAgICAgaWYodHlwZSA9PT0gJ3BvbmcnKSByZXR1cm47XHJcblx0XHQgICAgICAgICAgICAgICAgaWYodHlwZSA9PT0gJ3BpbmcnKSByZXR1cm4gdGhpcy5zb2NrZXQuc2VuZChgNDIvc2NhdHRlcixbXCJwb25nXCJdYCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2godHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwYWlyZWQnOiByZXR1cm4gbXNnX3BhaXJlZChkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Jla2V5JzogcmV0dXJuIG1zZ19yZWtleSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXBpJzogcmV0dXJuIG1zZ19hcGkoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdldmVudCc6IHJldHVybiBldmVudF9hcGkoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnX3BhaXJlZCA9IHJlc3VsdCA9PiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBhaXJlZCA9IHJlc3VsdDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMucGFpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzYXZlZEtleSA9IFN0b3JhZ2VTZXJ2aWNlLmdldEFwcEtleSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzaGVkID0gdGhpcy5hcHBrZXkuaW5kZXhPZignYXBwa2V5OicpID4gLTEgPyBzaGEyNTYodGhpcy5hcHBrZXkpIDogdGhpcy5hcHBrZXk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzYXZlZEtleSB8fCBzYXZlZEtleSAhPT0gaGFzaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVNlcnZpY2Uuc2V0QXBwS2V5KGhhc2hlZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwa2V5ID0gU3RvcmFnZVNlcnZpY2UuZ2V0QXBwS2V5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBhaXJpbmdQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2dfcmVrZXkgPSAoKSA9PiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGtleSA9ICdhcHBrZXk6JytyYW5kb20oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZCgncmVrZXllZCcsIHtkYXRhOnsgYXBwa2V5OnRoaXMuYXBwa2V5LCBvcmlnaW46dGhpcy5nZXRPcmlnaW4oKSB9LCBwbHVnaW46dGhpcy5wbHVnaW59KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2dfYXBpID0gcmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcGVuUmVxdWVzdCA9IHRoaXMub3BlblJlcXVlc3RzLmZpbmQoeCA9PiB4LmlkID09PSByZXNwb25zZS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFvcGVuUmVxdWVzdCkgcmV0dXJuO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub3BlblJlcXVlc3RzID0gdGhpcy5vcGVuUmVxdWVzdHMuZmlsdGVyKHggPT4geC5pZCAhPT0gcmVzcG9uc2UuaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNFcnJvclJlc3BvbnNlID0gdHlwZW9mIHJlc3BvbnNlLnJlc3VsdCA9PT0gJ29iamVjdCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHJlc3BvbnNlLnJlc3VsdCAhPT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgcmVzcG9uc2UucmVzdWx0Lmhhc093blByb3BlcnR5KCdpc0Vycm9yJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpc0Vycm9yUmVzcG9uc2UpIG9wZW5SZXF1ZXN0LnJlamVjdChyZXNwb25zZS5yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIG9wZW5SZXF1ZXN0LnJlc29sdmUocmVzcG9uc2UucmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudF9hcGkgPSAoe2V2ZW50LCBwYXlsb2FkfSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRpZihPYmplY3Qua2V5cyh0aGlzLmV2ZW50SGFuZGxlcnMpLmxlbmd0aCkgT2JqZWN0LmtleXModGhpcy5ldmVudEhhbmRsZXJzKS5tYXAoa2V5ID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmV2ZW50SGFuZGxlcnNba2V5XShldmVudCwgcGF5bG9hZCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGdldEhvc3RuYW1lID0gKHBvcnQsIHNzbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHNvY2tldEhvc3QpIHJldHVybiBzb2NrZXRIb3N0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzc2wgPyBgbG9jYWwuZ2V0LXNjYXR0ZXIuY29tOiR7cG9ydH1gIDogYDEyNy4wLjAuMToke3BvcnR9YDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwb3J0cyA9IGF3YWl0IChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoc29ja2V0SG9zdCkgcmV0dXJuIFs1MDAwNl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrUG9ydCA9IChob3N0LCBjYikgPT4gZmV0Y2goaG9zdCkudGhlbihyID0+IHIudGV4dCgpKS50aGVuKHIgPT4gY2IociA9PT0gJ3NjYXR0ZXInKSkuY2F0Y2goKCkgPT4gY2IoZmFsc2UpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0aW5nUG9ydCA9IDUwMDA1O1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdmFpbGFibGVQb3J0cyA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICBbLi4ubmV3IEFycmF5KDUpLmtleXMoKV0ubWFwKGkgPT4ge1xyXG5cdFx0ICAgICAgICAgICAgICAgIGNvbnN0IF9wb3J0ID0gc3RhcnRpbmdQb3J0KyhpKjE1MDApO1xyXG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXHJcblx0XHRcdCAgICAgICAgICAgICAgICBjaGVja1BvcnQoYGh0dHBzOi8vYCtnZXRIb3N0bmFtZShfcG9ydCsxLCB0cnVlKSwgeCA9PiB4ID8gYXZhaWxhYmxlUG9ydHMucHVzaChfcG9ydCsxKSA6IG51bGwpLFxyXG5cdFx0XHQgICAgICAgICAgICAgICAgYWxsb3dIdHRwID8gY2hlY2tQb3J0KGBodHRwOi8vYCtnZXRIb3N0bmFtZShfcG9ydCwgZmFsc2UpLCB4ID0+IHggPyBhdmFpbGFibGVQb3J0cy5wdXNoKF9wb3J0KSA6IG51bGwpIDogbnVsbFxyXG5cdFx0ICAgICAgICAgICAgICAgIF0pXHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHJpZXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKHRyaWVzIDwgNTApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoYXZhaWxhYmxlUG9ydHMubGVuZ3RoKSBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dCgoKSA9PiByKHRydWUpLDIpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRyaWVzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCFhdmFpbGFibGVQb3J0cy5sZW5ndGggPyAgLyogQkFDS1dBUkRTIENPTVBBVCAqLyBbNTAwMDYsIDUwMDA1XSA6IGF2YWlsYWJsZVBvcnRzKS5maWx0ZXIoeCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHRpZihhbGxvd0h0dHApIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIFx0cmV0dXJuICEoeCAlIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLnNvcnQoKGEsYikgPT4ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gQWx3YXlzIHRyeSB0byB1c2UgU1NMIGZpcnN0LlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEoYiAlIDIpID8gMSA6ICEoYSAlIDIpID8gLTEgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSkoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJ5U29ja2V0ID0gKHBvcnQsIHJlc29sdmVyID0gbnVsbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFyZXNvbHZlcikgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHIgPT4gcmVzb2x2ZXIgPSByKTtcclxuXHQgICAgICAgICAgICAgICAgY29uc3Qgc3NsID0gIShwb3J0ICUgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaG9zdG5hbWUgPSBnZXRIb3N0bmFtZShwb3J0LCBzc2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3RvY29sID0gc3NsID8gJ3dzczovLycgOiAnd3M6Ly8nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvc3QgPSBgJHtwcm90b2NvbH0ke2hvc3RuYW1lfSR7c3VmZml4fWA7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBXZWJTb2NrZXQoaG9zdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHMub25lcnJvciA9ICgpID0+IHJlc29sdmVyKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBzLm9ub3BlbiA9ICgpID0+IHJlc29sdmVyKHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBvcnRzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gYXdhaXQgdHJ5U29ja2V0KHBvcnRzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihzKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gcztcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWlyKHRydWUpLnRoZW4oKCkgPT4gcmVzb2x2ZSh0cnVlKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzZXR1cFNvY2tldCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICBdKVxyXG4gICAgfVxyXG5cclxuICAgIGlzQ29ubmVjdGVkKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGVkO1xyXG4gICAgfVxyXG5cclxuICAgIGlzUGFpcmVkKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFpcmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc2Nvbm5lY3QoKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnZGlzY29ubmVjdCcpXHJcbiAgICAgICAgaWYodGhpcy5zb2NrZXQpIHRoaXMuc29ja2V0LmNsb3NlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZEFwaVJlcXVlc3QocmVxdWVzdCl7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYocmVxdWVzdC50eXBlID09PSAnaWRlbnRpdHlGcm9tUGVybWlzc2lvbnMnICYmICF0aGlzLnBhaXJlZCkgcmV0dXJuIHJlc29sdmUoZmFsc2UpO1xyXG5cclxuXHQgICAgICAgIHRoaXMucGFpcigpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMucGFpcmVkKSByZXR1cm4gcmVqZWN0KHtjb2RlOidub3RfcGFpcmVkJywgbWVzc2FnZTonVGhlIHVzZXIgZGlkIG5vdCBhbGxvdyB0aGlzIGFwcCB0byBjb25uZWN0IHRvIHRoZWlyIFNjYXR0ZXInfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVxdWVzdCBJRCB1c2VkIGZvciByZXNvbHZpbmcgcHJvbWlzZXNcclxuICAgICAgICAgICAgICAgIHJlcXVlc3QuaWQgPSByYW5kb20oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTZXQgQXBwbGljYXRpb24gS2V5XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmFwcGtleSA9IHRoaXMuYXBwa2V5O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE5vbmNlIHVzZWQgdG8gYXV0aGVudGljYXRlIHRoaXMgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5ub25jZSA9IFN0b3JhZ2VTZXJ2aWNlLmdldE5vbmNlKCkgfHwgMDtcclxuICAgICAgICAgICAgICAgIC8vIE5leHQgbm9uY2UgdXNlZCB0byBhdXRoZW50aWNhdGUgdGhlIG5leHQgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dE5vbmNlID0gcmFuZG9tKCk7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm5leHROb25jZSA9IHNoYTI1NihuZXh0Tm9uY2UpO1xyXG4gICAgICAgICAgICAgICAgU3RvcmFnZVNlcnZpY2Uuc2V0Tm9uY2UobmV4dE5vbmNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihyZXF1ZXN0Lmhhc093blByb3BlcnR5KCdwYXlsb2FkJykgJiYgIXJlcXVlc3QucGF5bG9hZC5oYXNPd25Qcm9wZXJ0eSgnb3JpZ2luJykpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLm9yaWdpbiA9IHRoaXMuZ2V0T3JpZ2luKCk7XHJcblxyXG5cclxuXHRcdCAgICAgICAgdGhpcy5vcGVuUmVxdWVzdHMucHVzaChPYmplY3QuYXNzaWduKHJlcXVlc3QsIHtyZXNvbHZlLCByZWplY3R9KSk7XHJcblx0XHQgICAgICAgIHRoaXMuc2VuZCgnYXBpJywge2RhdGE6cmVxdWVzdCwgcGx1Z2luOnRoaXMucGx1Z2lufSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cdHBhaXIocGFzc3Rocm91Z2ggPSBmYWxzZSl7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHR0aGlzLnBhaXJpbmdQcm9taXNlID0ge3Jlc29sdmUsIHJlamVjdH07XHJcblx0XHRcdHRoaXMuc2VuZCgncGFpcicsIHtkYXRhOnsgYXBwa2V5OnRoaXMuYXBwa2V5LCBvcmlnaW46dGhpcy5nZXRPcmlnaW4oKSwgcGFzc3Rocm91Z2ggfSwgcGx1Z2luOnRoaXMucGx1Z2lufSlcclxuXHRcdH0pXHJcblx0fVxyXG5cclxuXHRzZW5kKHR5cGUgPSBudWxsLCBkYXRhID0gbnVsbCl7XHJcblx0XHRpZih0eXBlID09PSBudWxsICYmIGRhdGEgPT09IG51bGwpIHRoaXMuc29ja2V0LnNlbmQoJzQwL3NjYXR0ZXInKTtcclxuXHRcdGVsc2UgdGhpcy5zb2NrZXQuc2VuZCgnNDIvc2NhdHRlciwnICsgSlNPTi5zdHJpbmdpZnkoW3R5cGUsIE9iamVjdC5hc3NpZ24oZGF0YSwge2RldmljZSwgdXVpZDp0aGlzLnV1aWR9KV0pKTtcclxuXHR9XHJcblxyXG5cclxuXHRnZXRPcmlnaW4oKXtcclxuXHRcdHJldHVybiBTb2NrZXRTZXJ2aWNlLmdldE9yaWdpbk9yUGx1Z2luKHRoaXMucGx1Z2luKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRPcmlnaW5PclBsdWdpbihwbHVnaW4pe1xyXG5cdFx0bGV0IG9yaWdpbjtcclxuXHRcdGlmKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpXHJcblx0XHRcdGlmKGxvY2F0aW9uLmhhc093blByb3BlcnR5KCdob3N0bmFtZScpICYmIGxvY2F0aW9uLmhvc3RuYW1lLmxlbmd0aCAmJiBsb2NhdGlvbi5ob3N0bmFtZSAhPT0gJ2xvY2FsaG9zdCcpXHJcblx0XHRcdFx0b3JpZ2luID0gbG9jYXRpb24uaG9zdG5hbWU7XHJcblx0XHRcdGVsc2Ugb3JpZ2luID0gcGx1Z2luO1xyXG5cdFx0ZWxzZSBvcmlnaW4gPSBwbHVnaW47XHJcblx0XHRpZihvcmlnaW4uc3Vic3RyKDAsIDQpID09PSAnd3d3LicpIG9yaWdpbiA9IG9yaWdpbi5yZXBsYWNlKCd3d3cuJywnJyk7XHJcblx0XHRyZXR1cm4gb3JpZ2luO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG59XHJcbiIsImltcG9ydCAqIGFzIFBsdWdpblR5cGVzIGZyb20gXCIuL1BsdWdpblR5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbHVnaW4ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKF9uYW1lID0gJycsIF90eXBlID0gJycpe1xyXG4gICAgICAgIHRoaXMubmFtZSA9IF9uYW1lO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IF90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwbGFjZWhvbGRlcigpeyByZXR1cm4gbmV3IFBsdWdpbigpOyB9XHJcbiAgICBzdGF0aWMgZnJvbUpzb24oanNvbil7IHJldHVybiBPYmplY3QuYXNzaWduKFBsdWdpbi5wbGFjZWhvbGRlcigpLCBqc29uKTsgfVxyXG5cclxuICAgIGlzU2lnbmF0dXJlUHJvdmlkZXIoKXtcclxuICAgIFx0cmV0dXJuIHRoaXMudHlwZSA9PT0gUGx1Z2luVHlwZXMuQkxPQ0tDSEFJTl9TVVBQT1JUO1xyXG5cdH1cclxuXHJcblx0aXNWYWxpZCgpe1xyXG4gICAgXHRyZXR1cm4gT2JqZWN0LmtleXMoUGx1Z2luVHlwZXMpLm1hcCh4ID0+IFBsdWdpblR5cGVzW3hdKS5pbmNsdWRlcyh0aGlzLnR5cGUpO1xyXG5cdH1cclxuXHJcbn0iLCJcclxuZXhwb3J0IGNvbnN0IEJsb2NrY2hhaW5zID0ge1xyXG4gICAgRU9TOidlb3MnLFxyXG4gICAgRVRIOidldGgnLFxyXG4gICAgVFJYOid0cngnXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgQmxvY2tjaGFpbnNBcnJheSA9XHJcbiAgICBPYmplY3Qua2V5cyhCbG9ja2NoYWlucykubWFwKGtleSA9PiAoe2tleSwgdmFsdWU6QmxvY2tjaGFpbnNba2V5XX0pKTsiLCJpbXBvcnQge0Jsb2NrY2hhaW5zfSBmcm9tIFwiLi9CbG9ja2NoYWluc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9rZW4ge1xyXG5cclxuXHRjb25zdHJ1Y3RvcihibG9ja2NoYWluID0gQmxvY2tjaGFpbnMuRU9TLCBjb250cmFjdCA9ICcnLCBzeW1ib2wgPSAnJywgbmFtZSA9IG51bGwsIGRlY2ltYWxzID0gbnVsbCl7XHJcblx0XHR0aGlzLmJsb2NrY2hhaW4gPSBibG9ja2NoYWluO1xyXG5cdFx0dGhpcy5jb250cmFjdCA9IGNvbnRyYWN0O1xyXG5cdFx0dGhpcy5zeW1ib2wgPSBzeW1ib2w7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lID8gbmFtZSA6IHN5bWJvbDtcclxuXHRcdHRoaXMuZGVjaW1hbHMgPSBkZWNpbWFscztcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBwbGFjZWhvbGRlcigpeyByZXR1cm4gbmV3IFRva2VuKCk7IH1cclxuXHRzdGF0aWMgZnJvbUpzb24oanNvbil7IHJldHVybiBPYmplY3QuYXNzaWduKHRoaXMucGxhY2Vob2xkZXIoKSwganNvbik7IH1cclxufSIsImltcG9ydCB7QmxvY2tjaGFpbnN9IGZyb20gJy4vQmxvY2tjaGFpbnMnO1xyXG5pbXBvcnQgVG9rZW4gZnJvbSBcIi4vVG9rZW5cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5ldHdvcmsge1xyXG4gICAgY29uc3RydWN0b3IoX25hbWUgPSAnJywgX3Byb3RvY29sID0gJ2h0dHBzJywgX2hvc3QgPSAnJywgX3BvcnQgPSAwLCBibG9ja2NoYWluID0gQmxvY2tjaGFpbnMuRU9TLCBjaGFpbklkID0gJycpe1xyXG4gICAgICAgIHRoaXMubmFtZSA9IF9uYW1lO1xyXG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSBfcHJvdG9jb2w7XHJcbiAgICAgICAgdGhpcy5ob3N0ID0gX2hvc3Q7XHJcbiAgICAgICAgdGhpcy5wb3J0ID0gX3BvcnQ7XHJcbiAgICAgICAgdGhpcy5ibG9ja2NoYWluID0gYmxvY2tjaGFpbjtcclxuICAgICAgICB0aGlzLmNoYWluSWQgPSBjaGFpbklkLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIHRoaXMudG9rZW4gPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwbGFjZWhvbGRlcigpeyByZXR1cm4gbmV3IE5ldHdvcmsoKTsgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uKXtcclxuICAgICAgICBjb25zdCBwID0gT2JqZWN0LmFzc2lnbihOZXR3b3JrLnBsYWNlaG9sZGVyKCksIGpzb24pO1xyXG4gICAgICAgIHAuY2hhaW5JZCA9IHAuY2hhaW5JZCA/IHAuY2hhaW5JZC50b1N0cmluZygpIDogJyc7XHJcblx0ICAgIHAudG9rZW4gPSBqc29uLmhhc093blByb3BlcnR5KCd0b2tlbicpICYmIGpzb24udG9rZW4gPyBUb2tlbi5mcm9tSnNvbihqc29uLnRva2VuKSA6IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9XHJcblxyXG4gICAgZnVsbGhvc3QoKXsgcmV0dXJuIGAke3RoaXMucHJvdG9jb2x9Oi8vJHt0aGlzLmhvc3R9JHt0aGlzLnBvcnQgPyAnOicgOiAnJ30ke3RoaXMucG9ydH1gIH1cclxuXHR1bmlxdWUoKXsgcmV0dXJuIChgJHt0aGlzLmJsb2NrY2hhaW59OmAgKyAodGhpcy5jaGFpbklkLmxlbmd0aCA/IGBjaGFpbjoke3RoaXMuY2hhaW5JZH1gIDogYCR7dGhpcy5ob3N0fToke3RoaXMucG9ydH1gKSkudG9Mb3dlckNhc2UoKTsgfVxyXG59IiwiZXhwb3J0IGNvbnN0IFdBTExFVF9NRVRIT0RTID0ge1xyXG5cdGRpc2Nvbm5lY3Q6J2Rpc2Nvbm5lY3QnLFxyXG5cdGlzQ29ubmVjdGVkOidpc0Nvbm5lY3RlZCcsXHJcblx0aXNQYWlyZWQ6J2lzUGFpcmVkJyxcclxuXHRhZGRFdmVudEhhbmRsZXI6J2FkZEV2ZW50SGFuZGxlcicsXHJcblx0cmVtb3ZlRXZlbnRIYW5kbGVyOidyZW1vdmVFdmVudEhhbmRsZXInLFxyXG5cdGxpc3RlbjonbGlzdGVuJyxcclxuXHJcblx0Z2V0VmVyc2lvbjonZ2V0VmVyc2lvbicsXHJcblx0Z2V0SWRlbnRpdHk6J2dldElkZW50aXR5JyxcclxuXHRnZXRBbGxBY2NvdW50c0ZvcjonZ2V0QWxsQWNjb3VudHNGb3InLFxyXG5cdGdldElkZW50aXR5RnJvbVBlcm1pc3Npb25zOidnZXRJZGVudGl0eUZyb21QZXJtaXNzaW9ucycsXHJcblx0Zm9yZ2V0SWRlbnRpdHk6J2ZvcmdldElkZW50aXR5JyxcclxuXHR1cGRhdGVJZGVudGl0eTondXBkYXRlSWRlbnRpdHknLFxyXG5cdGF1dGhlbnRpY2F0ZTonYXV0aGVudGljYXRlJyxcclxuXHRnZXRBcmJpdHJhcnlTaWduYXR1cmU6J2dldEFyYml0cmFyeVNpZ25hdHVyZScsXHJcblx0Z2V0UHVibGljS2V5OidnZXRQdWJsaWNLZXknLFxyXG5cdGxpbmtBY2NvdW50OidsaW5rQWNjb3VudCcsXHJcblx0aGFzQWNjb3VudEZvcjonaGFzQWNjb3VudEZvcicsXHJcblx0c3VnZ2VzdE5ldHdvcms6J3N1Z2dlc3ROZXR3b3JrJyxcclxuXHRyZXF1ZXN0VHJhbnNmZXI6J3JlcXVlc3RUcmFuc2ZlcicsXHJcblx0Z2V0QXZhdGFyOidnZXRBdmF0YXInLFxyXG5cdHJlcXVlc3RTaWduYXR1cmU6J3JlcXVlc3RTaWduYXR1cmUnLFxyXG5cdGNyZWF0ZVRyYW5zYWN0aW9uOidjcmVhdGVUcmFuc2FjdGlvbicsXHJcblx0YWRkVG9rZW46J2FkZFRva2VuJyxcclxufTtcclxuXHJcbmNvbnN0IEFMVEVSTkFURVMgPSB7XHJcblx0W1dBTExFVF9NRVRIT0RTLmdldElkZW50aXR5XTonbG9naW4nLFxyXG5cdFtXQUxMRVRfTUVUSE9EUy5nZXRBbGxBY2NvdW50c0Zvcl06J2xvZ2luQWxsJyxcclxuXHRbV0FMTEVUX01FVEhPRFMuZm9yZ2V0SWRlbnRpdHldOidsb2dvdXQnLFxyXG5cdFtXQUxMRVRfTUVUSE9EUy5nZXRJZGVudGl0eUZyb21QZXJtaXNzaW9uc106J2NoZWNrTG9naW4nXHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2FsbGV0SW50ZXJmYWNlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoaWRlbnRpZmllciwgbWV0aG9kcywgY29udGV4dCl7XHJcblx0XHRjb25zdCB1bmF2YWlsYWJsZSA9IG1ldGhvZCA9PiAoKSA9PiB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoYCR7aWRlbnRpZmllcn0gZG9lcyBub3Qgc3VwcG9ydCB0aGUgJHttZXRob2R9IG1ldGhvZC5gKTtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGAke2lkZW50aWZpZXJ9IGRvZXMgbm90IHN1cHBvcnQgdGhlICR7bWV0aG9kfSBtZXRob2QuYCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdGNvbnN0IGJpbmRUb0NvbnRleHQgPSAobWV0aG9kLCBrZXkpID0+IHtcclxuXHRcdFx0aWYodHlwZW9mIGNvbnRleHRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpe1xyXG5cdFx0XHRcdGNvbnRleHRba2V5XSA9IG1ldGhvZCA/IG1ldGhvZCA6IHVuYXZhaWxhYmxlKGtleSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoQUxURVJOQVRFU1trZXldICYmIHR5cGVvZiBjb250ZXh0W0FMVEVSTkFURVNba2V5XV0gPT09ICd1bmRlZmluZWQnKXtcclxuXHRcdFx0XHRjb250ZXh0W0FMVEVSTkFURVNba2V5XV0gPSBjb250ZXh0W2tleV0gPyBjb250ZXh0W2tleV0gOiB1bmF2YWlsYWJsZShrZXkpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdE9iamVjdC5rZXlzKFdBTExFVF9NRVRIT0RTKS5tYXAoa2V5ID0+IGJpbmRUb0NvbnRleHQobWV0aG9kc1trZXldLCBrZXkpKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBiaW5kQmFzaWNzKGNvbnRleHQpe1xyXG5cclxuXHRcdGNvbnRleHQuYWNjb3VudCA9IChibG9ja2NoYWluKSA9PiB7XHJcblx0XHRcdGlmKCFjb250ZXh0LmlkZW50aXR5KSByZXR1cm47XHJcblx0XHRcdGlmKCFjb250ZXh0LmlkZW50aXR5LmFjY291bnRzKSByZXR1cm47XHJcblx0XHRcdHJldHVybiBjb250ZXh0LmlkZW50aXR5LmFjY291bnRzLmZpbmQoeCA9PiB4LmJsb2NrY2hhaW4gPT09IGJsb2NrY2hhaW4pO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59IiwiaW1wb3J0IFBsdWdpbiBmcm9tIFwiLi4vcGx1Z2lucy9QbHVnaW5cIjtcclxuaW1wb3J0IHtCbG9ja2NoYWluc30gZnJvbSBcIi4uL21vZGVscy9CbG9ja2NoYWluc1wiO1xyXG5pbXBvcnQgKiBhcyBQbHVnaW5UeXBlcyBmcm9tIFwiLi4vcGx1Z2lucy9QbHVnaW5UeXBlc1wiO1xyXG5pbXBvcnQgU29ja2V0U2VydmljZSBmcm9tIFwiLi4vc2VydmljZXMvU29ja2V0U2VydmljZVwiO1xyXG5pbXBvcnQge0VWRU5UUywgV0FMTEVUX01FVEhPRFN9IGZyb20gXCIuLi9pbmRleFwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2FsU29ja2V0IGV4dGVuZHMgUGx1Z2luIHtcclxuXHRjb25zdHJ1Y3Rvcihjb250ZXh0LCBob2xkZXJGbnMpe1xyXG5cdFx0c3VwZXIoJ0xvY2FsU29ja2V0JywgUGx1Z2luVHlwZXMuV0FMTEVUX1NVUFBPUlQpO1xyXG5cdFx0dGhpcy5uYW1lID0gJ0xvY2FsU29ja2V0JztcclxuXHRcdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcblx0XHR0aGlzLmhvbGRlckZucyA9IGhvbGRlckZucztcclxuXHR9XHJcblxyXG5cdGNvbm5lY3QocGx1Z2luTmFtZSwgb3B0aW9ucyA9IHt9KXtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuXHRcdFx0aWYoIXBsdWdpbk5hbWUgfHwgIXBsdWdpbk5hbWUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBzcGVjaWZ5IGEgbmFtZSBmb3IgdGhpcyBjb25uZWN0aW9uXCIpO1xyXG5cdFx0XHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7aW5pdFRpbWVvdXQ6MTAwMCwgbGlua1RpbWVvdXQ6MzAwMCwgYWxsb3dIdHRwOnRydWV9LCBvcHRpb25zKTtcclxuXHJcblxyXG5cdFx0XHQvLyBUcmllcyB0byBzZXQgdXAgTG9jYWxTb2NrZXQgQ29ubmVjdGlvblxyXG5cdFx0XHR0aGlzLnNvY2tldFNlcnZpY2UgPSBuZXcgU29ja2V0U2VydmljZShwbHVnaW5OYW1lLCBvcHRpb25zLmxpbmtUaW1lb3V0KTtcclxuXHRcdFx0dGhpcy5zb2NrZXRTZXJ2aWNlLmxpbmsob3B0aW9ucy5hbGxvd0h0dHApLnRoZW4oYXN5bmMgYXV0aGVudGljYXRlZCA9PiB7XHJcblx0XHRcdFx0aWYoIWF1dGhlbnRpY2F0ZWQpIHJldHVybiByZXNvbHZlKGZhbHNlKTtcclxuXHRcdFx0XHR0aGlzLmhvbGRlckZucy5nZXQoKS5pc0V4dGVuc2lvbiA9IGZhbHNlO1xyXG5cdFx0XHRcdGlmKCF0aGlzLmhvbGRlckZucy5nZXQoKS53YWxsZXQpIHRoaXMuaG9sZGVyRm5zLmdldCgpLndhbGxldCA9IHRoaXMubmFtZTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzb2x2ZSh0aGlzLnNvY2tldFNlcnZpY2UpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pXHJcblx0fVxyXG5cclxuXHRhc3luYyBydW5BZnRlckludGVyZmFjaW5nKCl7XHJcblx0XHR0aGlzLmhvbGRlckZucy5nZXQoKS5hZGRFdmVudEhhbmRsZXIoKHQseCkgPT4gdGhpcy5ldmVudEhhbmRsZXIodCx4KSwgJ2ludGVybmFsJyk7XHJcblx0XHR0aGlzLmhvbGRlckZucy5nZXQoKS5pZGVudGl0eSA9IGF3YWl0IHRoaXMuaG9sZGVyRm5zLmdldCgpLmdldElkZW50aXR5RnJvbVBlcm1pc3Npb25zKCk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRNZXRob2RzKGNvbnRleHQpe1xyXG5cdFx0Y29uc3Qgc2V0QW5kUmV0dXJuSWQgPSAoaWQsIGZvcmdldCkgPT4ge1xyXG5cdFx0XHRpZihpZCB8fCBmb3JnZXQpIGNvbnRleHQuaG9sZGVyRm5zLmdldCgpLmlkZW50aXR5ID0gaWQ7XHJcblx0XHRcdHJldHVybiBmb3JnZXQgfHwgaWQ7XHJcblx0XHR9O1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5kaXNjb25uZWN0XTooKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2UuZGlzY29ubmVjdCgpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuaXNDb25uZWN0ZWRdOigpID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5pc0Nvbm5lY3RlZCgpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuaXNQYWlyZWRdOigpID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5pc1BhaXJlZCgpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuYWRkRXZlbnRIYW5kbGVyXTooaGFuZGxlciwga2V5ID0gbnVsbCkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLmFkZEV2ZW50SGFuZGxlcihoYW5kbGVyLCBrZXkpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMucmVtb3ZlRXZlbnRIYW5kbGVyXTooa2V5ID0gbnVsbCkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnJlbW92ZUV2ZW50SGFuZGxlcihrZXkpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMubGlzdGVuXTooaGFuZGxlcikgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLmFkZEV2ZW50SGFuZGxlcihoYW5kbGVyKSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmdldFZlcnNpb25dOigpID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7IHR5cGU6J2dldFZlcnNpb24nLCBwYXlsb2FkOnt9IH0pLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuZ2V0SWRlbnRpdHldOihyZXF1aXJlZEZpZWxkcykgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidnZXRPclJlcXVlc3RJZGVudGl0eScsXHJcblx0XHRcdFx0cGF5bG9hZDp7IGZpZWxkczpyZXF1aXJlZEZpZWxkcyA/IHJlcXVpcmVkRmllbGRzIDoge2FjY291bnRzOltjb250ZXh0LmhvbGRlckZucy5nZXQoKS5uZXR3b3JrXX0gfVxyXG5cdFx0XHR9KS50aGVuKHNldEFuZFJldHVybklkKSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmdldEFsbEFjY291bnRzRm9yXToocmVxdWlyZWRGaWVsZHMpID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7XHJcblx0XHRcdFx0dHlwZTonZ2V0QWxsQWNjb3VudHNGb3InLFxyXG5cdFx0XHRcdHBheWxvYWQ6eyBmaWVsZHM6cmVxdWlyZWRGaWVsZHMgPyByZXF1aXJlZEZpZWxkcyA6IHthY2NvdW50czpbY29udGV4dC5ob2xkZXJGbnMuZ2V0KCkubmV0d29ya119IH1cclxuXHRcdFx0fSkudGhlbihzZXRBbmRSZXR1cm5JZCksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5nZXRJZGVudGl0eUZyb21QZXJtaXNzaW9uc106KCkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidpZGVudGl0eUZyb21QZXJtaXNzaW9ucycsXHJcblx0XHRcdFx0cGF5bG9hZDp7fVxyXG5cdFx0XHR9KS50aGVuKHNldEFuZFJldHVybklkKSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmZvcmdldElkZW50aXR5XTooKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J2ZvcmdldElkZW50aXR5JyxcclxuXHRcdFx0XHRwYXlsb2FkOnt9XHJcblx0XHRcdH0pLnRoZW4ocmVzID0+IHNldEFuZFJldHVybklkKG51bGwsIHJlcykpLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMudXBkYXRlSWRlbnRpdHldOih7bmFtZSwga3ljfSkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOid1cGRhdGVJZGVudGl0eScsXHJcblx0XHRcdFx0cGF5bG9hZDp7bmFtZSwga3ljfVxyXG5cdFx0XHR9KS50aGVuKGlkID0+IGlkID8gc2V0QW5kUmV0dXJuSWQoaWQpIDogbnVsbCksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5hdXRoZW50aWNhdGVdOihub25jZSwgZGF0YSA9IG51bGwsIHB1YmxpY0tleSA9IG51bGwpID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7XHJcblx0XHRcdFx0dHlwZTonYXV0aGVudGljYXRlJyxcclxuXHRcdFx0XHRwYXlsb2FkOnsgbm9uY2UsIGRhdGEsIHB1YmxpY0tleSB9XHJcblx0XHRcdH0pLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuZ2V0QXJiaXRyYXJ5U2lnbmF0dXJlXToocHVibGljS2V5LCBkYXRhKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J3JlcXVlc3RBcmJpdHJhcnlTaWduYXR1cmUnLFxyXG5cdFx0XHRcdHBheWxvYWQ6eyBwdWJsaWNLZXksIGRhdGEgfVxyXG5cdFx0XHR9KSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmdldFB1YmxpY0tleV06KGJsb2NrY2hhaW4pID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7XHJcblx0XHRcdFx0dHlwZTonZ2V0UHVibGljS2V5JyxcclxuXHRcdFx0XHRwYXlsb2FkOnsgYmxvY2tjaGFpbiB9XHJcblx0XHRcdH0pLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMubGlua0FjY291bnRdOihhY2NvdW50LCBuZXR3b3JrKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J2xpbmtBY2NvdW50JyxcclxuXHRcdFx0XHRwYXlsb2FkOnsgYWNjb3VudCwgbmV0d29yazpuZXR3b3JrIHx8IGNvbnRleHQuaG9sZGVyRm5zLmdldCgpLm5ldHdvcmsgfVxyXG5cdFx0XHR9KSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmhhc0FjY291bnRGb3JdOihuZXR3b3JrKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J2hhc0FjY291bnRGb3InLFxyXG5cdFx0XHRcdHBheWxvYWQ6eyBuZXR3b3JrOm5ldHdvcmsgfHwgY29udGV4dC5ob2xkZXJGbnMuZ2V0KCkubmV0d29yayB9XHJcblx0XHRcdH0pLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuc3VnZ2VzdE5ldHdvcmtdOihuZXR3b3JrKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J3JlcXVlc3RBZGROZXR3b3JrJyxcclxuXHRcdFx0XHRwYXlsb2FkOnsgbmV0d29yazpuZXR3b3JrIHx8IGNvbnRleHQuaG9sZGVyRm5zLmdldCgpLm5ldHdvcmsgfVxyXG5cdFx0XHR9KSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLnJlcXVlc3RUcmFuc2Zlcl06KG5ldHdvcmssIHRvLCBhbW91bnQsIG9wdGlvbnMgPSB7fSkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidyZXF1ZXN0VHJhbnNmZXInLFxyXG5cdFx0XHRcdHBheWxvYWQ6e25ldHdvcms6bmV0d29yayB8fCBjb250ZXh0LmhvbGRlckZucy5nZXQoKS5uZXR3b3JrLCB0bywgYW1vdW50LCBvcHRpb25zfVxyXG5cdFx0XHR9KSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmdldEF2YXRhcl06KCkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidnZXRBdmF0YXInLFxyXG5cdFx0XHRcdHBheWxvYWQ6e31cclxuXHRcdFx0fSksXHJcblx0XHRcdFtXQUxMRVRfTUVUSE9EUy5yZXF1ZXN0U2lnbmF0dXJlXToocGF5bG9hZCkgPT4gY29udGV4dC5zb2NrZXRTZXJ2aWNlLnNlbmRBcGlSZXF1ZXN0KHtcclxuXHRcdFx0XHR0eXBlOidyZXF1ZXN0U2lnbmF0dXJlJyxcclxuXHRcdFx0XHRwYXlsb2FkXHJcblx0XHRcdH0pLFxyXG5cdFx0XHRbV0FMTEVUX01FVEhPRFMuY3JlYXRlVHJhbnNhY3Rpb25dOihibG9ja2NoYWluLCBhY3Rpb25zLCBhY2NvdW50LCBuZXR3b3JrKSA9PiBjb250ZXh0LnNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG5cdFx0XHRcdHR5cGU6J2NyZWF0ZVRyYW5zYWN0aW9uJyxcclxuXHRcdFx0XHRwYXlsb2FkOnsgYmxvY2tjaGFpbiwgYWN0aW9ucywgYWNjb3VudCwgbmV0d29yazpuZXR3b3JrIHx8IGNvbnRleHQuaG9sZGVyRm5zLmdldCgpLm5ldHdvcmsgfVxyXG5cdFx0XHR9KSxcclxuXHRcdFx0W1dBTExFVF9NRVRIT0RTLmFkZFRva2VuXToodG9rZW4sIG5ldHdvcmspID0+IGNvbnRleHQuc29ja2V0U2VydmljZS5zZW5kQXBpUmVxdWVzdCh7XHJcblx0XHRcdFx0dHlwZTonYWRkVG9rZW4nLFxyXG5cdFx0XHRcdHBheWxvYWQ6eyB0b2tlbiwgbmV0d29yazpuZXR3b3JrIHx8IGNvbnRleHQuaG9sZGVyRm5zLmdldCgpLm5ldHdvcmsgfVxyXG5cdFx0XHR9KSxcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG1ldGhvZHMoKXtcclxuXHRcdHJldHVybiBMb2NhbFNvY2tldC5nZXRNZXRob2RzKHRoaXMpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgZXZlbnRIYW5kbGVyKGV2ZW50LCBwYXlsb2FkKXtcclxuXHRcdHN3aXRjaChldmVudCl7XHJcblx0XHRcdGNhc2UgRVZFTlRTLkRpc2Nvbm5lY3RlZDpcclxuXHRcdFx0XHR0aGlzLmhvbGRlckZucy5nZXQoKS5pZGVudGl0eSA9IG51bGw7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgRVZFTlRTLkxvZ2dlZE91dDpcclxuXHRcdFx0XHR0aGlzLmhvbGRlckZucy5nZXQoKS5pZGVudGl0eSA9IGF3YWl0IHRoaXMuaG9sZGVyRm5zLmdldCgpLmdldElkZW50aXR5RnJvbVBlcm1pc3Npb25zKCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0fVxyXG59IiwiaW1wb3J0IFBsdWdpbiBmcm9tIFwiLi4vcGx1Z2lucy9QbHVnaW5cIjtcclxuaW1wb3J0IHtCbG9ja2NoYWluc30gZnJvbSBcIi4uL21vZGVscy9CbG9ja2NoYWluc1wiO1xyXG5pbXBvcnQgKiBhcyBQbHVnaW5UeXBlcyBmcm9tIFwiLi4vcGx1Z2lucy9QbHVnaW5UeXBlc1wiO1xyXG5pbXBvcnQgU29ja2V0U2VydmljZSBmcm9tIFwiLi4vc2VydmljZXMvU29ja2V0U2VydmljZVwiO1xyXG5pbXBvcnQge0VWRU5UUywgV0FMTEVUX01FVEhPRFN9IGZyb20gXCIuLi9pbmRleFwiO1xyXG5pbXBvcnQgTG9jYWxTb2NrZXQgZnJvbSBcIi4vTG9jYWxTb2NrZXRcIjtcclxuaW1wb3J0IGRldmljZSBmcm9tICcuLi91dGlsL0RldmljZSc7XHJcblxyXG5cclxuXHJcbmNvbnN0IFdFQl9IT1NUID0gYGh0dHBzOi8vcmVsYXkuZ2V0LXNjYXR0ZXIuY29tOjQ0M2A7XHJcbmNvbnN0IFNPQ0tFVF9IT1NUID0gYHJlbGF5c29jay5nZXQtc2NhdHRlci5jb206NDQzYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbGF5U29ja2V0IGV4dGVuZHMgUGx1Z2luIHtcclxuXHRjb25zdHJ1Y3Rvcihjb250ZXh0LCBob2xkZXJGbnMpe1xyXG5cdFx0c3VwZXIoJ1JlbGF5U29ja2V0JywgUGx1Z2luVHlwZXMuV0FMTEVUX1NVUFBPUlQpO1xyXG5cdFx0dGhpcy5uYW1lID0gJ1JlbGF5U29ja2V0JztcclxuXHRcdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcblx0XHR0aGlzLmhvbGRlckZucyA9IGhvbGRlckZucztcclxuXHR9XHJcblxyXG5cdGNvbm5lY3QocGx1Z2luTmFtZSwgb3B0aW9ucyA9IHt9KXtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShhc3luYyByZXNvbHZlID0+IHtcclxuXHRcdFx0aWYoIXBsdWdpbk5hbWUgfHwgIXBsdWdpbk5hbWUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBzcGVjaWZ5IGEgbmFtZSBmb3IgdGhpcyBjb25uZWN0aW9uXCIpO1xyXG5cdFx0XHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7aW5pdFRpbWVvdXQ6MTAwMCwgbGlua1RpbWVvdXQ6MzAwMCwgYWxsb3dIdHRwOnRydWV9LCBvcHRpb25zKTtcclxuXHJcblx0XHRcdGNvbnN0IHV1aWQgPSBhd2FpdCBmZXRjaChgJHtXRUJfSE9TVH0vYXBwL2Nvbm5lY3QvJHtkZXZpY2V9YCkudGhlbih4ID0+IHguanNvbigpKTtcclxuXHRcdFx0aWYoIXV1aWQpIHJldHVybiByZXNvbHZlKGZhbHNlKTtcclxuXHJcblx0XHRcdC8vIFRyaWVzIHRvIHNldCB1cCBMb2NhbFNvY2tldCBDb25uZWN0aW9uXHJcblx0XHRcdHRoaXMuc29ja2V0U2VydmljZSA9IG5ldyBTb2NrZXRTZXJ2aWNlKHBsdWdpbk5hbWUsIG9wdGlvbnMubGlua1RpbWVvdXQpO1xyXG5cdFx0XHR0aGlzLnNvY2tldFNlcnZpY2UubGluayhvcHRpb25zLmFsbG93SHR0cCwgdXVpZCwgU09DS0VUX0hPU1QpLnRoZW4oYXN5bmMgYXV0aGVudGljYXRlZCA9PiB7XHJcblx0XHRcdFx0aWYoIWF1dGhlbnRpY2F0ZWQpIHJldHVybiByZXNvbHZlKGZhbHNlKTtcclxuXHRcdFx0XHR0aGlzLmhvbGRlckZucy5nZXQoKS5pc0V4dGVuc2lvbiA9IGZhbHNlO1xyXG5cdFx0XHRcdGlmKCF0aGlzLmhvbGRlckZucy5nZXQoKS53YWxsZXQpIHRoaXMuaG9sZGVyRm5zLmdldCgpLndhbGxldCA9IHRoaXMubmFtZTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzb2x2ZSh0aGlzLnNvY2tldFNlcnZpY2UpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pXHJcblx0fVxyXG5cclxuXHRhc3luYyBydW5BZnRlckludGVyZmFjaW5nKCl7XHJcblx0XHQvLyB0aGlzLmhvbGRlckZucy5nZXQoKS5hZGRFdmVudEhhbmRsZXIoKHQseCkgPT4gdGhpcy5ldmVudEhhbmRsZXIodCx4KSwgJ2ludGVybmFsJyk7XHJcblx0XHR0aGlzLmhvbGRlckZucy5nZXQoKS5pZGVudGl0eSA9IGF3YWl0IHRoaXMuaG9sZGVyRm5zLmdldCgpLmdldElkZW50aXR5RnJvbVBlcm1pc3Npb25zKCk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdG1ldGhvZHMoKXtcclxuXHRcdHJldHVybiBMb2NhbFNvY2tldC5nZXRNZXRob2RzKHRoaXMpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgZXZlbnRIYW5kbGVyKGV2ZW50LCBwYXlsb2FkKXtcclxuXHRcdHN3aXRjaChldmVudCl7XHJcblx0XHRcdGNhc2UgRVZFTlRTLkRpc2Nvbm5lY3RlZDpcclxuXHRcdFx0XHR0aGlzLmhvbGRlckZucy5nZXQoKS5pZGVudGl0eSA9IG51bGw7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgRVZFTlRTLkxvZ2dlZE91dDpcclxuXHRcdFx0XHR0aGlzLmhvbGRlckZucy5nZXQoKS5pZGVudGl0eSA9IGF3YWl0IHRoaXMuaG9sZGVyRm5zLmdldCgpLmdldElkZW50aXR5RnJvbVBlcm1pc3Npb25zKCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0fVxyXG59IiwiaW1wb3J0ICogYXMgUGx1Z2luVHlwZXMgZnJvbSBcIi4uL3BsdWdpbnMvUGx1Z2luVHlwZXNcIjtcclxuaW1wb3J0IFBsdWdpbiBmcm9tIFwiLi4vcGx1Z2lucy9QbHVnaW5cIjtcclxuXHJcblxyXG5sZXQgaXNBdmFpbGFibGUgPSBmYWxzZTtcclxuaWYodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xyXG5cdGlmKHR5cGVvZiB3aW5kb3cuc2NhdHRlciAhPT0gJ3VuZGVmaW5lZCcpIGlzQXZhaWxhYmxlID0gdHJ1ZTtcclxuXHRlbHNlIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NjYXR0ZXJMb2FkZWQnLCAoKSA9PiBpc0F2YWlsYWJsZSA9IHRydWUpO1xyXG59XHJcblxyXG5jb25zdCBwb2xsRXhpc3RlbmNlID0gYXN5bmMgKHJlc29sdmVyID0gbnVsbCwgdHJpZXMgPSAwKSA9PiB7XHJcblx0cmV0dXJuIG5ldyBQcm9taXNlKHIgPT4ge1xyXG5cdFx0aWYoIXJlc29sdmVyKSByZXNvbHZlciA9IHI7XHJcblx0XHRpZihpc0F2YWlsYWJsZSkgcmV0dXJuIHJlc29sdmVyKHRydWUpO1xyXG5cdFx0aWYodHJpZXMgPiA1KSByZXR1cm4gcmVzb2x2ZXIoZmFsc2UpO1xyXG5cdFx0c2V0VGltZW91dCgoKSA9PiBwb2xsRXhpc3RlbmNlKHJlc29sdmVyLCB0cmllcyArIDEpLCAxMDApO1xyXG5cdH0pXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmplY3Rpb24gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihjb250ZXh0LCBob2xkZXJGbnMpe1xyXG5cdFx0c3VwZXIoJ0luamVjdGVkV2FsbGV0JywgUGx1Z2luVHlwZXMuV0FMTEVUX1NVUFBPUlQpO1xyXG5cdFx0dGhpcy5uYW1lID0gJ0luamVjdGVkV2FsbGV0JztcclxuXHRcdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcblx0XHR0aGlzLmhvbGRlckZucyA9IGhvbGRlckZucztcclxuXHR9XHJcblxyXG5cdGFzeW5jIGNvbm5lY3QoKXtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShhc3luYyByZXNvbHZlID0+IHtcclxuXHRcdFx0Y29uc3QgZm91bmQgPSBhd2FpdCBwb2xsRXhpc3RlbmNlKCk7XHJcblx0XHRcdGlmKGZvdW5kKSB7XHJcblx0XHRcdFx0aWYodGhpcy5ob2xkZXJGbnMgJiYgIXRoaXMuaG9sZGVyRm5zLmdldCgpLndhbGxldCkgdGhpcy5ob2xkZXJGbnMuZ2V0KCkud2FsbGV0ID0gdGhpcy5uYW1lO1xyXG5cdFx0XHRcdHJlc29sdmUoJ2luamVjdGlvbicpO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0YXN5bmMgcnVuQmVmb3JlSW50ZXJmYWNpbmcoKXtcclxuXHRcdGNvbnN0IG5ldHdvcmsgPSB0aGlzLmNvbnRleHQubmV0d29yaztcclxuXHJcblx0XHRpZihuZXR3b3JrKXtcclxuXHRcdFx0Y29uc3QgZ2V0SWQgPSB3aW5kb3cuc2NhdHRlci5nZXRJZGVudGl0eS5iaW5kKHdpbmRvdy5zY2F0dGVyKTtcclxuXHRcdFx0Y29uc3QgdXNlSWRlbnRpdHkgPSB3aW5kb3cuc2NhdHRlci51c2VJZGVudGl0eS5iaW5kKHdpbmRvdy5zY2F0dGVyKTtcclxuXHRcdFx0d2luZG93LnNjYXR0ZXIuZ2V0SWRlbnRpdHkgPSBmaWVsZHMgPT4gZ2V0SWQoZmllbGRzID8gZmllbGRzIDoge2FjY291bnRzOltuZXR3b3JrXX0pLnRoZW4oaWQgPT4ge1xyXG5cdFx0XHRcdHRoaXMuaG9sZGVyRm5zLmdldCgpLmlkZW50aXR5ID0gaWQ7XHJcblx0XHRcdFx0dXNlSWRlbnRpdHkoaWQpO1xyXG5cdFx0XHRcdHJldHVybiBpZDtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRjb25zdCBzdWdnZXN0ID0gd2luZG93LnNjYXR0ZXIuc3VnZ2VzdE5ldHdvcmsuYmluZCh3aW5kb3cuc2NhdHRlcik7XHJcblx0XHRcdHdpbmRvdy5zY2F0dGVyLnN1Z2dlc3ROZXR3b3JrID0gbmV0ID0+IHN1Z2dlc3QobmV0ID8gbmV0IDogbmV0d29yayk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYodGhpcy5ob2xkZXJGbnMuZ2V0KCkud2FsbGV0ID09PSB0aGlzLm5hbWUpe1xyXG5cdFx0XHR3aW5kb3cuc2NhdHRlci53YWxsZXQgPSB0aGlzLm5hbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5ob2xkZXJGbnMuc2V0KHdpbmRvdy5zY2F0dGVyKTtcclxuXHRcdHRoaXMuY29udGV4dCA9IHRoaXMuaG9sZGVyRm5zLmdldCgpO1xyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgcnVuQWZ0ZXJJbnRlcmZhY2luZygpe1xyXG5cdFx0dGhpcy5jb250ZXh0LmlzRXh0ZW5zaW9uID0gdHJ1ZTtcclxuXHRcdHRoaXMuY29udGV4dC5jb25uZWN0ID0gdGhpcy5jb25uZWN0O1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRtZXRob2RzKCl7IHJldHVybiB7XHJcblxyXG5cdH07IH1cclxuXHJcbn0iLCJpbXBvcnQgUGx1Z2luUmVwb3NpdG9yeSBmcm9tICcuL3BsdWdpbnMvUGx1Z2luUmVwb3NpdG9yeSc7XHJcbmltcG9ydCBTb2NrZXRTZXJ2aWNlIGZyb20gJy4vc2VydmljZXMvU29ja2V0U2VydmljZSc7XHJcbmltcG9ydCBQbHVnaW4gZnJvbSAnLi9wbHVnaW5zL1BsdWdpbic7XHJcbmltcG9ydCAqIGFzIFBsdWdpblR5cGVzIGZyb20gJy4vcGx1Z2lucy9QbHVnaW5UeXBlcyc7XHJcbmltcG9ydCB7IEJsb2NrY2hhaW5zIH0gZnJvbSAnLi9tb2RlbHMvQmxvY2tjaGFpbnMnO1xyXG5pbXBvcnQgTmV0d29yayBmcm9tICcuL21vZGVscy9OZXR3b3JrJztcclxuaW1wb3J0IFdhbGxldEludGVyZmFjZSwge1dBTExFVF9NRVRIT0RTfSBmcm9tICcuL21vZGVscy9XYWxsZXRJbnRlcmZhY2UnO1xyXG5pbXBvcnQgTG9jYWxTb2NrZXQgZnJvbSBcIi4vd2FsbGV0cy9Mb2NhbFNvY2tldFwiO1xyXG5pbXBvcnQgUmVsYXlTb2NrZXQgZnJvbSBcIi4vd2FsbGV0cy9SZWxheVNvY2tldFwiO1xyXG5pbXBvcnQgSW5qZWN0aW9uIGZyb20gXCIuL3dhbGxldHMvSW5qZWN0aW9uXCI7XHJcbmltcG9ydCBUb2tlbiBmcm9tIFwiLi9tb2RlbHMvVG9rZW5cIjtcclxuXHJcbmxldCBvcmlnaW47XHJcblxyXG5jb25zdCBFVkVOVFMgPSB7XHJcblx0RGlzY29ubmVjdGVkOidkY2VkJyxcclxuXHRMb2dnZWRPdXQ6J2xvZ291dCcsXHJcbn07XHJcblxyXG5sZXQgc29ja2V0U2V0dGVycyA9IFtdO1xyXG5sZXQgaG9sZGVyRm5zID0ge307XHJcbmNsYXNzIEluZGV4IHtcclxuXHJcblx0Y29uc3RydWN0b3IoKXtcclxuXHRcdHRoaXMuaWRlbnRpdHkgPSBudWxsO1xyXG5cdFx0dGhpcy5uZXR3b3JrID0gbnVsbDtcclxuXHJcblx0XHRQbHVnaW5SZXBvc2l0b3J5LmxvYWRQbHVnaW4obmV3IFJlbGF5U29ja2V0KHRoaXMsIGhvbGRlckZucykpO1xyXG5cdFx0UGx1Z2luUmVwb3NpdG9yeS5sb2FkUGx1Z2luKG5ldyBMb2NhbFNvY2tldCh0aGlzLCBob2xkZXJGbnMpKTtcclxuXHRcdFBsdWdpblJlcG9zaXRvcnkubG9hZFBsdWdpbihuZXcgSW5qZWN0aW9uKHRoaXMsIGhvbGRlckZucykpO1xyXG5cdH1cclxuXHJcblx0bG9hZFBsdWdpbihwbHVnaW4pe1xyXG5cdFx0Y29uc3Qgbm9JZEZ1bmMgPSAoKSA9PiB7IGlmKCFob2xkZXJGbnMuZ2V0KCkuaWRlbnRpdHkpIHRocm93IG5ldyBFcnJvcignTm8gSWRlbnRpdHknKSB9O1xyXG5cdFx0aWYoIXBsdWdpbi5pc1ZhbGlkKCkpIHRocm93IG5ldyBFcnJvcihgJHtwbHVnaW4ubmFtZX0gZG9lc24ndCBzZWVtIHRvIGJlIGEgdmFsaWQgU2NhdHRlckpTIHBsdWdpbi5gKTtcclxuXHJcblx0XHRQbHVnaW5SZXBvc2l0b3J5LmxvYWRQbHVnaW4ocGx1Z2luKTtcclxuXHJcblx0XHRpZihwbHVnaW4udHlwZSA9PT0gUGx1Z2luVHlwZXMuQkxPQ0tDSEFJTl9TVVBQT1JUKXtcclxuXHRcdFx0dGhpc1twbHVnaW4ubmFtZV0gPSBwbHVnaW4uc2lnbmF0dXJlUHJvdmlkZXIobm9JZEZ1bmMsICgpID0+IGhvbGRlckZucy5nZXQoKS5pZGVudGl0eSk7XHJcblx0XHRcdHRoaXNbcGx1Z2luLm5hbWUrJ0hvb2snXSA9IHBsdWdpbi5ob29rUHJvdmlkZXI7XHJcblx0XHRcdHNvY2tldFNldHRlcnMucHVzaChwbHVnaW4uc2V0U29ja2V0U2VydmljZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYocGx1Z2luLnR5cGUgPT09IFBsdWdpblR5cGVzLldBTExFVF9TVVBQT1JUKXtcclxuXHRcdFx0cGx1Z2luLmluaXQodGhpcywgaG9sZGVyRm5zLCBzb2NrZXRTZXR0ZXJzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIGNvbm5lY3QocGx1Z2luTmFtZSwgb3B0aW9ucyl7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUpID0+IHtcclxuXHRcdFx0aWYoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcclxuXHRcdFx0dGhpcy5uZXR3b3JrID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbmV0d29yaycpID8gb3B0aW9ucy5uZXR3b3JrIDogbnVsbDtcclxuXHJcblx0XHRcdGNvbnN0IHdhbGxldHMgPSBQbHVnaW5SZXBvc2l0b3J5LndhbGxldHMoKTtcclxuXHJcblx0XHRcdGxldCBjb25uZWN0ZWQgPSBmYWxzZTtcclxuXHRcdFx0bGV0IHByb21pc2VzID0gW107XHJcblx0XHRcdGZvcihsZXQgaSA9IDA7IGkgPCB3YWxsZXRzLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHRjb25zdCB3YWxsZXQgPSB3YWxsZXRzW2ldO1xyXG5cdFx0XHRcdHByb21pc2VzLnB1c2goUHJvbWlzZS5yYWNlKFtcclxuXHRcdFx0XHRcdHdhbGxldC5jb25uZWN0KHBsdWdpbk5hbWUsIG9wdGlvbnMpLnRoZW4oYXN5bmMgc29ja2V0U2VydmljZSA9PiB7XHJcblx0XHRcdFx0XHRcdGlmKHNvY2tldFNlcnZpY2UpIHtcclxuXHRcdFx0XHRcdFx0XHRpZihzb2NrZXRTZXJ2aWNlICE9PSAnaW5qZWN0aW9uJykgc29ja2V0U2V0dGVycy5tYXAoeCA9PiB4KHNvY2tldFNlcnZpY2UpKTtcclxuXHRcdFx0XHRcdFx0XHRpZih0eXBlb2Ygd2FsbGV0LnJ1bkJlZm9yZUludGVyZmFjaW5nID09PSAnZnVuY3Rpb24nKSBhd2FpdCB3YWxsZXQucnVuQmVmb3JlSW50ZXJmYWNpbmcoKTtcclxuXHRcdFx0XHRcdFx0XHRuZXcgV2FsbGV0SW50ZXJmYWNlKHdhbGxldC5uYW1lLCB3YWxsZXQubWV0aG9kcygpLCBob2xkZXJGbnMuZ2V0KCkpO1xyXG5cdFx0XHRcdFx0XHRcdGlmKHR5cGVvZiB3YWxsZXQucnVuQWZ0ZXJJbnRlcmZhY2luZyA9PT0gJ2Z1bmN0aW9uJykgYXdhaXQgd2FsbGV0LnJ1bkFmdGVySW50ZXJmYWNpbmcoKTtcclxuXHRcdFx0XHRcdFx0XHRXYWxsZXRJbnRlcmZhY2UuYmluZEJhc2ljcyhob2xkZXJGbnMuZ2V0KCkpO1xyXG5cdFx0XHRcdFx0XHRcdGNvbm5lY3RlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZSh0cnVlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSksXHJcblx0XHRcdFx0XHRuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQoKCkgPT4gcihmYWxzZSksIG9wdGlvbnMuaW5pdFRpbWVvdXQgfHwgMzUwMCkpXHJcblx0XHRcdFx0XSkpXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuXHRcdFx0cmV0dXJuIHJlc29sdmUoY29ubmVjdGVkKTtcclxuXHRcdH0pXHJcblx0fVxyXG59XHJcblxyXG5cclxuY2xhc3MgSG9sZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9zY2F0dGVyKXtcclxuICAgICAgICB0aGlzLnNjYXR0ZXIgPSBfc2NhdHRlcjtcclxuICAgIH1cclxuXHJcblx0cGx1Z2lucyguLi5wbHVnaW5zKSB7XHJcblx0XHRpZiAoIXRoaXMuc2NhdHRlci5pc0V4dGVuc2lvbikge1xyXG5cdFx0XHRwbHVnaW5zLm1hcChwbHVnaW4gPT4gdGhpcy5zY2F0dGVyLmxvYWRQbHVnaW4ocGx1Z2luKSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRjb25uZWN0KC4uLnBhcmFtcyl7XHJcbiAgICBcdHJldHVybiB0aGlzLnNjYXR0ZXIuY29ubmVjdCguLi5wYXJhbXMpO1xyXG5cdH1cclxuXHJcblx0Y2F0Y2hBbGwoLi4ucGFyYW1zKXtcclxuXHJcblx0fVxyXG59XHJcblxyXG5cclxubGV0IGhvbGRlciA9IG5ldyBQcm94eShuZXcgSG9sZGVyKG5ldyBJbmRleCgpKSwge1xyXG5cdGdldCh0YXJnZXQsbmFtZSkge1xyXG5cdFx0aWYodHlwZW9mIHRhcmdldFtuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0YXJnZXRbbmFtZV07XHJcblx0XHRyZXR1cm4gdGFyZ2V0LnNjYXR0ZXJbbmFtZV07XHJcblx0fVxyXG59KTtcclxuaG9sZGVyRm5zLnNldCA9IHMgPT4gaG9sZGVyLnNjYXR0ZXIgPSBzO1xyXG5ob2xkZXJGbnMuZ2V0ID0gKCkgPT4gaG9sZGVyLnNjYXR0ZXI7XHJcbmlmKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB3aW5kb3cuU2NhdHRlckpTID0gaG9sZGVyO1xyXG5cclxuXHJcbmhvbGRlci5QbHVnaW4gPSBQbHVnaW47XHJcbmhvbGRlci5QbHVnaW5UeXBlcyA9IFBsdWdpblR5cGVzO1xyXG5ob2xkZXIuQmxvY2tjaGFpbnMgPSBCbG9ja2NoYWlucztcclxuaG9sZGVyLk5ldHdvcmsgPSBOZXR3b3JrO1xyXG5ob2xkZXIuVG9rZW4gPSBUb2tlbjtcclxuaG9sZGVyLlNvY2tldFNlcnZpY2UgPSBTb2NrZXRTZXJ2aWNlO1xyXG5ob2xkZXIuRVZFTlRTID0gRVZFTlRTO1xyXG5ob2xkZXIuV2FsbGV0SW50ZXJmYWNlID0gV2FsbGV0SW50ZXJmYWNlO1xyXG5ob2xkZXIuV0FMTEVUX01FVEhPRFMgPSBXQUxMRVRfTUVUSE9EUztcclxuZXhwb3J0IHtQbHVnaW4sIFBsdWdpblR5cGVzLCBCbG9ja2NoYWlucywgTmV0d29yaywgU29ja2V0U2VydmljZSwgRVZFTlRTLCBXYWxsZXRJbnRlcmZhY2UsIFdBTExFVF9NRVRIT0RTfTtcclxuZXhwb3J0IGRlZmF1bHQgaG9sZGVyO1xyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=